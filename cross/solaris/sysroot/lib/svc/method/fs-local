#!/sbin/sh
#
# Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
#ident	"@(#)fs-local	1.24	06/03/10 SMI"

. /lib/svc/share/smf_include.sh

result=$SMF_EXIT_OK

# Mount all local filesystems.

cd /; /sbin/mountall -l >/dev/msglog
rc=$?
if [ $rc -ne 0 ]; then
	msg="WARNING: /sbin/mountall -l failed: exit status $rc"
	echo $msg
	echo "$SMF_FMRI:" $msg >/dev/msglog
	result=$SMF_EXIT_ERR_FATAL
fi

# get rid of transient reboot entry in GRUB menu
if [ -f /stubboot/boot/grub/menu.lst ]; then
	/sbin/bootadm -m update_temp -R /stubboot
else
	/sbin/bootadm -m update_temp
fi

#
# If there are non-global UFS filesystems with quotas, check and enable them.
#

# vlist is the non-global filesystems in vfstab requesting quotas
vlist=`/usr/bin/nawk '$1 !~ /^(#|-)/ && $4 == "ufs" {
	if (match($7, "(^|,)(quota|rq)(,|$)") != 0 &&
	    match($7, "(^|,)global(,|$)") == 0) print $1; }' /etc/vfstab`

if [ -n "$vlist" ]; then
	# mlist is the filesystems in mnttab that are ufs, mounted rw,
	# and without quotas turned on
	mlist=`/usr/sbin/mount -p | /usr/bin/nawk '$4 == "ufs" {
		if (match($7, "(^|,)ro(,|$)") == 0) print $1; }'`

	# qlist is the intersection of vlist and mlist
	qlist=`echo "$vlist\n-\n$mlist" | \
		/usr/bin/nawk '{if ($1 == "-") { mlist = 1; }
			else if (mlist == 0) { vlist[$1] = 1; }
			else if (vlist[$1]) { print $1; } }'`

	#
	# Just check and enable the non-global UFS file systems with quotas
	# enabled. Note that "quotacheck -a" and "quotaon -a" will try
	# to process all UFS entries with quotas rather than excluding
	# the entries with the global option (the global entries are handled
	# later in another script if the cluster package is installed).
	#
	if [ -n "$qlist" ]; then
		echo 'Checking UFS quotas: \c'
		/usr/sbin/quotacheck -p $qlist
		echo 'done.'
		/usr/sbin/quotaon $qlist
	fi
fi

# Mount all ZFS filesystems.

if [ -x /usr/sbin/zfs ]; then
	/usr/sbin/zfs mount -a >/dev/msglog 2>&1 
	rc=$?
	if [ $rc -ne 0 ]; then
		msg="WARNING: /usr/sbin/zfs mount -a failed: exit status $rc"
		echo $msg
		echo "$SMF_FMRI:" $msg >/dev/msglog
		result=$SMF_EXIT_ERR_FATAL
	fi
fi

exit $result

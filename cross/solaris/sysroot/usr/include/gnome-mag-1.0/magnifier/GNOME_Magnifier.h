/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */
#ifndef GNOME_Magnifier_H
#define GNOME_Magnifier_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>
#ifdef __cplusplus
extern "C" {
#endif				/* __cplusplus */
   /** typedefs **/
#include <bonobo-activation/Bonobo_Unknown.h>
#if !defined(ORBIT_DECL_Bonobo_Listener) && !defined(_Bonobo_Listener_defined)
#define ORBIT_DECL_Bonobo_Listener 1
#define _Bonobo_Listener_defined 1
#define Bonobo_Listener__freekids CORBA_Object__freekids
   typedef CORBA_Object Bonobo_Listener;
   extern CORBA_unsigned_long Bonobo_Listener__classid;
#if !defined(TC_IMPL_TC_Bonobo_Listener_0)
#define TC_IMPL_TC_Bonobo_Listener_0 'G'
#define TC_IMPL_TC_Bonobo_Listener_1 'N'
#define TC_IMPL_TC_Bonobo_Listener_2 'O'
#define TC_IMPL_TC_Bonobo_Listener_3 'M'
#define TC_IMPL_TC_Bonobo_Listener_4 'E'
#define TC_IMPL_TC_Bonobo_Listener_5 '_'
#define TC_IMPL_TC_Bonobo_Listener_6 'M'
#define TC_IMPL_TC_Bonobo_Listener_7 'a'
#define TC_IMPL_TC_Bonobo_Listener_8 'g'
#define TC_IMPL_TC_Bonobo_Listener_9 'n'
#define TC_IMPL_TC_Bonobo_Listener_10 'i'
#define TC_IMPL_TC_Bonobo_Listener_11 'f'
#define TC_IMPL_TC_Bonobo_Listener_12 'i'
#define TC_IMPL_TC_Bonobo_Listener_13 'e'
#define TC_IMPL_TC_Bonobo_Listener_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Listener_struct;
#define TC_Bonobo_Listener ((CORBA_TypeCode)&TC_Bonobo_Listener_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_EventSource) && !defined(_Bonobo_EventSource_defined)
#define ORBIT_DECL_Bonobo_EventSource 1
#define _Bonobo_EventSource_defined 1
#define Bonobo_EventSource__freekids CORBA_Object__freekids
   typedef CORBA_Object Bonobo_EventSource;
   extern CORBA_unsigned_long Bonobo_EventSource__classid;
#if !defined(TC_IMPL_TC_Bonobo_EventSource_0)
#define TC_IMPL_TC_Bonobo_EventSource_0 'G'
#define TC_IMPL_TC_Bonobo_EventSource_1 'N'
#define TC_IMPL_TC_Bonobo_EventSource_2 'O'
#define TC_IMPL_TC_Bonobo_EventSource_3 'M'
#define TC_IMPL_TC_Bonobo_EventSource_4 'E'
#define TC_IMPL_TC_Bonobo_EventSource_5 '_'
#define TC_IMPL_TC_Bonobo_EventSource_6 'M'
#define TC_IMPL_TC_Bonobo_EventSource_7 'a'
#define TC_IMPL_TC_Bonobo_EventSource_8 'g'
#define TC_IMPL_TC_Bonobo_EventSource_9 'n'
#define TC_IMPL_TC_Bonobo_EventSource_10 'i'
#define TC_IMPL_TC_Bonobo_EventSource_11 'f'
#define TC_IMPL_TC_Bonobo_EventSource_12 'i'
#define TC_IMPL_TC_Bonobo_EventSource_13 'e'
#define TC_IMPL_TC_Bonobo_EventSource_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_EventSource_struct;
#define TC_Bonobo_EventSource ((CORBA_TypeCode)&TC_Bonobo_EventSource_struct)
#endif
#endif
#undef ex_Bonobo_EventSource_UnknownListener
#define ex_Bonobo_EventSource_UnknownListener "IDL:Bonobo/EventSource/UnknownListener:1.0"
#if !defined(_Bonobo_EventSource_UnknownListener_defined)
#define _Bonobo_EventSource_UnknownListener_defined 1
   typedef struct Bonobo_EventSource_UnknownListener_type Bonobo_EventSource_UnknownListener;
   struct Bonobo_EventSource_UnknownListener_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_EventSource_UnknownListener_0)
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_0 'G'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_1 'N'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_2 'O'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_3 'M'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_4 'E'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_5 '_'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_6 'M'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_7 'a'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_8 'g'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_9 'n'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_10 'i'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_11 'f'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_12 'i'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_13 'e'
#define TC_IMPL_TC_Bonobo_EventSource_UnknownListener_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_EventSource_UnknownListener_struct;
#define TC_Bonobo_EventSource_UnknownListener ((CORBA_TypeCode)&TC_Bonobo_EventSource_UnknownListener_struct)
#endif
#define Bonobo_EventSource_UnknownListener__alloc() ((Bonobo_EventSource_UnknownListener *)ORBit_small_alloc (TC_Bonobo_EventSource_UnknownListener))
#define Bonobo_EventSource_UnknownListener__freekids(m,d) ORBit_small_freekids (TC_Bonobo_EventSource_UnknownListener,(m),(d))
#endif
#if !defined(_Bonobo_Pair_defined)
#define _Bonobo_Pair_defined 1
   typedef struct Bonobo_Pair_type Bonobo_Pair;
   struct Bonobo_Pair_type {
      CORBA_string name;
      CORBA_any value;
   };
#if !defined(TC_IMPL_TC_Bonobo_Pair_0)
#define TC_IMPL_TC_Bonobo_Pair_0 'G'
#define TC_IMPL_TC_Bonobo_Pair_1 'N'
#define TC_IMPL_TC_Bonobo_Pair_2 'O'
#define TC_IMPL_TC_Bonobo_Pair_3 'M'
#define TC_IMPL_TC_Bonobo_Pair_4 'E'
#define TC_IMPL_TC_Bonobo_Pair_5 '_'
#define TC_IMPL_TC_Bonobo_Pair_6 'M'
#define TC_IMPL_TC_Bonobo_Pair_7 'a'
#define TC_IMPL_TC_Bonobo_Pair_8 'g'
#define TC_IMPL_TC_Bonobo_Pair_9 'n'
#define TC_IMPL_TC_Bonobo_Pair_10 'i'
#define TC_IMPL_TC_Bonobo_Pair_11 'f'
#define TC_IMPL_TC_Bonobo_Pair_12 'i'
#define TC_IMPL_TC_Bonobo_Pair_13 'e'
#define TC_IMPL_TC_Bonobo_Pair_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Pair_struct;
#define TC_Bonobo_Pair ((CORBA_TypeCode)&TC_Bonobo_Pair_struct)
#endif
#define Bonobo_Pair__alloc() ((Bonobo_Pair *)ORBit_small_alloc (TC_Bonobo_Pair))
#define Bonobo_Pair__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Pair,(m),(d))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_Pair)
#define ORBIT_DECL_CORBA_sequence_Bonobo_Pair 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_0 'G'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_1 'N'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_2 'O'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_3 'M'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_4 'E'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_5 '_'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_6 'M'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_7 'a'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_8 'g'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_9 'n'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_10 'i'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_11 'f'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_12 'i'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_13 'e'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_Pair_14 'r'
#if !defined(_CORBA_sequence_Bonobo_Pair_defined)
#define _CORBA_sequence_Bonobo_Pair_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_Pair *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_Bonobo_Pair;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_0 'G'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_1 'N'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_2 'O'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_3 'M'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_4 'E'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_5 '_'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_6 'M'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_7 'a'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_8 'g'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_9 'n'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_10 'i'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_11 'f'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_12 'i'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_13 'e'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_Pair_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_Bonobo_Pair_struct;
#define TC_CORBA_sequence_Bonobo_Pair ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_Pair_struct)
#endif
#define CORBA_sequence_Bonobo_Pair__alloc() ((CORBA_sequence_Bonobo_Pair *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_Pair))
#define CORBA_sequence_Bonobo_Pair__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_Pair,(m),(d))
#define CORBA_sequence_Bonobo_Pair_allocbuf(l) ((Bonobo_Pair*)ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Pair, (l)))
#define CORBA_sequence_Bonobo_Pair_allocbuf(l) ((Bonobo_Pair*)ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Pair, (l)))
#endif
#if !defined(_Bonobo_PropertySet_defined)
#define _Bonobo_PropertySet_defined 1
   typedef CORBA_sequence_Bonobo_Pair Bonobo_PropertySet;
#define Bonobo_PropertySet_marshal(x,y,z) CORBA_sequence_Bonobo_Pair_marshal((x),(y),(z))
#define Bonobo_PropertySet_demarshal(x,y,z,i) CORBA_sequence_Bonobo_Pair_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Bonobo_PropertySet_0)
#define TC_IMPL_TC_Bonobo_PropertySet_0 'G'
#define TC_IMPL_TC_Bonobo_PropertySet_1 'N'
#define TC_IMPL_TC_Bonobo_PropertySet_2 'O'
#define TC_IMPL_TC_Bonobo_PropertySet_3 'M'
#define TC_IMPL_TC_Bonobo_PropertySet_4 'E'
#define TC_IMPL_TC_Bonobo_PropertySet_5 '_'
#define TC_IMPL_TC_Bonobo_PropertySet_6 'M'
#define TC_IMPL_TC_Bonobo_PropertySet_7 'a'
#define TC_IMPL_TC_Bonobo_PropertySet_8 'g'
#define TC_IMPL_TC_Bonobo_PropertySet_9 'n'
#define TC_IMPL_TC_Bonobo_PropertySet_10 'i'
#define TC_IMPL_TC_Bonobo_PropertySet_11 'f'
#define TC_IMPL_TC_Bonobo_PropertySet_12 'i'
#define TC_IMPL_TC_Bonobo_PropertySet_13 'e'
#define TC_IMPL_TC_Bonobo_PropertySet_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_PropertySet_struct;
#define TC_Bonobo_PropertySet ((CORBA_TypeCode)&TC_Bonobo_PropertySet_struct)
#endif
#define Bonobo_PropertySet__alloc() ((Bonobo_PropertySet *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_Pair))
#define Bonobo_PropertySet__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_Pair,(m),(d))
#define Bonobo_PropertySet_allocbuf(l) ((Bonobo_Pair*)ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_Pair, (l)))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'N'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'O'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'M'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'E'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_6 'M'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_7 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_8 'g'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_9 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_10 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_11 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_12 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_13 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_14 'r'
#if !defined(_CORBA_sequence_CORBA_string_defined)
#define _CORBA_sequence_CORBA_string_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_string *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_string;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'N'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'O'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'M'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'E'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_6 'M'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_7 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_8 'g'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_9 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_10 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_11 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_12 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_13 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(_Bonobo_KeyList_defined)
#define _Bonobo_KeyList_defined 1
   typedef CORBA_sequence_CORBA_string Bonobo_KeyList;
#define Bonobo_KeyList_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
#define Bonobo_KeyList_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Bonobo_KeyList_0)
#define TC_IMPL_TC_Bonobo_KeyList_0 'G'
#define TC_IMPL_TC_Bonobo_KeyList_1 'N'
#define TC_IMPL_TC_Bonobo_KeyList_2 'O'
#define TC_IMPL_TC_Bonobo_KeyList_3 'M'
#define TC_IMPL_TC_Bonobo_KeyList_4 'E'
#define TC_IMPL_TC_Bonobo_KeyList_5 '_'
#define TC_IMPL_TC_Bonobo_KeyList_6 'M'
#define TC_IMPL_TC_Bonobo_KeyList_7 'a'
#define TC_IMPL_TC_Bonobo_KeyList_8 'g'
#define TC_IMPL_TC_Bonobo_KeyList_9 'n'
#define TC_IMPL_TC_Bonobo_KeyList_10 'i'
#define TC_IMPL_TC_Bonobo_KeyList_11 'f'
#define TC_IMPL_TC_Bonobo_KeyList_12 'i'
#define TC_IMPL_TC_Bonobo_KeyList_13 'e'
#define TC_IMPL_TC_Bonobo_KeyList_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_KeyList_struct;
#define TC_Bonobo_KeyList ((CORBA_TypeCode)&TC_Bonobo_KeyList_struct)
#endif
#define Bonobo_KeyList__alloc() ((Bonobo_KeyList *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define Bonobo_KeyList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define Bonobo_KeyList_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(_Bonobo_PropertyFlags_defined)
#define _Bonobo_PropertyFlags_defined 1
   typedef CORBA_long Bonobo_PropertyFlags;
#define Bonobo_PropertyFlags_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
#define Bonobo_PropertyFlags_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Bonobo_PropertyFlags_0)
#define TC_IMPL_TC_Bonobo_PropertyFlags_0 'G'
#define TC_IMPL_TC_Bonobo_PropertyFlags_1 'N'
#define TC_IMPL_TC_Bonobo_PropertyFlags_2 'O'
#define TC_IMPL_TC_Bonobo_PropertyFlags_3 'M'
#define TC_IMPL_TC_Bonobo_PropertyFlags_4 'E'
#define TC_IMPL_TC_Bonobo_PropertyFlags_5 '_'
#define TC_IMPL_TC_Bonobo_PropertyFlags_6 'M'
#define TC_IMPL_TC_Bonobo_PropertyFlags_7 'a'
#define TC_IMPL_TC_Bonobo_PropertyFlags_8 'g'
#define TC_IMPL_TC_Bonobo_PropertyFlags_9 'n'
#define TC_IMPL_TC_Bonobo_PropertyFlags_10 'i'
#define TC_IMPL_TC_Bonobo_PropertyFlags_11 'f'
#define TC_IMPL_TC_Bonobo_PropertyFlags_12 'i'
#define TC_IMPL_TC_Bonobo_PropertyFlags_13 'e'
#define TC_IMPL_TC_Bonobo_PropertyFlags_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_PropertyFlags_struct;
#define TC_Bonobo_PropertyFlags ((CORBA_TypeCode)&TC_Bonobo_PropertyFlags_struct)
#endif
#define Bonobo_PropertyFlags__alloc() ((Bonobo_PropertyFlags *)ORBit_small_alloc (TC_CORBA_long))
#define Bonobo_PropertyFlags__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
#endif
#ifndef Bonobo_PROPERTY_READABLE
#define Bonobo_PROPERTY_READABLE 1
#endif				/* !Bonobo_PROPERTY_READABLE */
#ifndef Bonobo_PROPERTY_WRITEABLE
#define Bonobo_PROPERTY_WRITEABLE 2
#endif				/* !Bonobo_PROPERTY_WRITEABLE */
#ifndef Bonobo_PROPERTY_NO_LISTENING
#define Bonobo_PROPERTY_NO_LISTENING 4
#endif				/* !Bonobo_PROPERTY_NO_LISTENING */
#ifndef Bonobo_PROPERTY_NO_AUTONOTIFY
#define Bonobo_PROPERTY_NO_AUTONOTIFY 8
#endif				/* !Bonobo_PROPERTY_NO_AUTONOTIFY */
#ifndef Bonobo_PROPERTY_NO_PERSIST
#define Bonobo_PROPERTY_NO_PERSIST 16
#endif				/* !Bonobo_PROPERTY_NO_PERSIST */
#if !defined(ORBIT_DECL_Bonobo_PropertyBag) && !defined(_Bonobo_PropertyBag_defined)
#define ORBIT_DECL_Bonobo_PropertyBag 1
#define _Bonobo_PropertyBag_defined 1
#define Bonobo_PropertyBag__freekids CORBA_Object__freekids
   typedef CORBA_Object Bonobo_PropertyBag;
   extern CORBA_unsigned_long Bonobo_PropertyBag__classid;
#if !defined(TC_IMPL_TC_Bonobo_PropertyBag_0)
#define TC_IMPL_TC_Bonobo_PropertyBag_0 'G'
#define TC_IMPL_TC_Bonobo_PropertyBag_1 'N'
#define TC_IMPL_TC_Bonobo_PropertyBag_2 'O'
#define TC_IMPL_TC_Bonobo_PropertyBag_3 'M'
#define TC_IMPL_TC_Bonobo_PropertyBag_4 'E'
#define TC_IMPL_TC_Bonobo_PropertyBag_5 '_'
#define TC_IMPL_TC_Bonobo_PropertyBag_6 'M'
#define TC_IMPL_TC_Bonobo_PropertyBag_7 'a'
#define TC_IMPL_TC_Bonobo_PropertyBag_8 'g'
#define TC_IMPL_TC_Bonobo_PropertyBag_9 'n'
#define TC_IMPL_TC_Bonobo_PropertyBag_10 'i'
#define TC_IMPL_TC_Bonobo_PropertyBag_11 'f'
#define TC_IMPL_TC_Bonobo_PropertyBag_12 'i'
#define TC_IMPL_TC_Bonobo_PropertyBag_13 'e'
#define TC_IMPL_TC_Bonobo_PropertyBag_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_PropertyBag_struct;
#define TC_Bonobo_PropertyBag ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_struct)
#endif
#endif
#undef ex_Bonobo_PropertyBag_NotFound
#define ex_Bonobo_PropertyBag_NotFound "IDL:Bonobo/PropertyBag/NotFound:1.0"
#if !defined(_Bonobo_PropertyBag_NotFound_defined)
#define _Bonobo_PropertyBag_NotFound_defined 1
   typedef struct Bonobo_PropertyBag_NotFound_type Bonobo_PropertyBag_NotFound;
   struct Bonobo_PropertyBag_NotFound_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_PropertyBag_NotFound_0)
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_0 'G'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_1 'N'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_2 'O'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_3 'M'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_4 'E'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_5 '_'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_6 'M'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_7 'a'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_8 'g'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_9 'n'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_10 'i'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_11 'f'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_12 'i'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_13 'e'
#define TC_IMPL_TC_Bonobo_PropertyBag_NotFound_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_PropertyBag_NotFound_struct;
#define TC_Bonobo_PropertyBag_NotFound ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_NotFound_struct)
#endif
#define Bonobo_PropertyBag_NotFound__alloc() ((Bonobo_PropertyBag_NotFound *)ORBit_small_alloc (TC_Bonobo_PropertyBag_NotFound))
#define Bonobo_PropertyBag_NotFound__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PropertyBag_NotFound,(m),(d))
#endif
#undef ex_Bonobo_PropertyBag_InvalidType
#define ex_Bonobo_PropertyBag_InvalidType "IDL:Bonobo/PropertyBag/InvalidType:1.0"
#if !defined(_Bonobo_PropertyBag_InvalidType_defined)
#define _Bonobo_PropertyBag_InvalidType_defined 1
   typedef struct Bonobo_PropertyBag_InvalidType_type Bonobo_PropertyBag_InvalidType;
   struct Bonobo_PropertyBag_InvalidType_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_0)
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_0 'G'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_1 'N'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_2 'O'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_3 'M'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_4 'E'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_5 '_'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_6 'M'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_7 'a'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_8 'g'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_9 'n'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_10 'i'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_11 'f'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_12 'i'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_13 'e'
#define TC_IMPL_TC_Bonobo_PropertyBag_InvalidType_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_PropertyBag_InvalidType_struct;
#define TC_Bonobo_PropertyBag_InvalidType ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_InvalidType_struct)
#endif
#define Bonobo_PropertyBag_InvalidType__alloc() ((Bonobo_PropertyBag_InvalidType *)ORBit_small_alloc (TC_Bonobo_PropertyBag_InvalidType))
#define Bonobo_PropertyBag_InvalidType__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PropertyBag_InvalidType,(m),(d))
#endif
#undef ex_Bonobo_PropertyBag_ReadOnly
#define ex_Bonobo_PropertyBag_ReadOnly "IDL:Bonobo/PropertyBag/ReadOnly:1.0"
#if !defined(_Bonobo_PropertyBag_ReadOnly_defined)
#define _Bonobo_PropertyBag_ReadOnly_defined 1
   typedef struct Bonobo_PropertyBag_ReadOnly_type Bonobo_PropertyBag_ReadOnly;
   struct Bonobo_PropertyBag_ReadOnly_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_0)
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_0 'G'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_1 'N'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_2 'O'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_3 'M'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_4 'E'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_5 '_'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_6 'M'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_7 'a'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_8 'g'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_9 'n'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_10 'i'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_11 'f'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_12 'i'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_13 'e'
#define TC_IMPL_TC_Bonobo_PropertyBag_ReadOnly_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_PropertyBag_ReadOnly_struct;
#define TC_Bonobo_PropertyBag_ReadOnly ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_ReadOnly_struct)
#endif
#define Bonobo_PropertyBag_ReadOnly__alloc() ((Bonobo_PropertyBag_ReadOnly *)ORBit_small_alloc (TC_Bonobo_PropertyBag_ReadOnly))
#define Bonobo_PropertyBag_ReadOnly__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PropertyBag_ReadOnly,(m),(d))
#endif
#undef ex_Bonobo_PropertyBag_BackendFailed
#define ex_Bonobo_PropertyBag_BackendFailed "IDL:Bonobo/PropertyBag/BackendFailed:1.0"
#if !defined(_Bonobo_PropertyBag_BackendFailed_defined)
#define _Bonobo_PropertyBag_BackendFailed_defined 1
   typedef struct Bonobo_PropertyBag_BackendFailed_type Bonobo_PropertyBag_BackendFailed;
   struct Bonobo_PropertyBag_BackendFailed_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_0)
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_0 'G'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_1 'N'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_2 'O'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_3 'M'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_4 'E'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_5 '_'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_6 'M'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_7 'a'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_8 'g'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_9 'n'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_10 'i'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_11 'f'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_12 'i'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_13 'e'
#define TC_IMPL_TC_Bonobo_PropertyBag_BackendFailed_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_PropertyBag_BackendFailed_struct;
#define TC_Bonobo_PropertyBag_BackendFailed ((CORBA_TypeCode)&TC_Bonobo_PropertyBag_BackendFailed_struct)
#endif
#define Bonobo_PropertyBag_BackendFailed__alloc() ((Bonobo_PropertyBag_BackendFailed *)ORBit_small_alloc (TC_Bonobo_PropertyBag_BackendFailed))
#define Bonobo_PropertyBag_BackendFailed__freekids(m,d) ORBit_small_freekids (TC_Bonobo_PropertyBag_BackendFailed,(m),(d))
#endif
#if !defined(ORBIT_DECL_Bonobo_ConfigDatabase) && !defined(_Bonobo_ConfigDatabase_defined)
#define ORBIT_DECL_Bonobo_ConfigDatabase 1
#define _Bonobo_ConfigDatabase_defined 1
#define Bonobo_ConfigDatabase__freekids CORBA_Object__freekids
   typedef CORBA_Object Bonobo_ConfigDatabase;
   extern CORBA_unsigned_long Bonobo_ConfigDatabase__classid;
#if !defined(TC_IMPL_TC_Bonobo_ConfigDatabase_0)
#define TC_IMPL_TC_Bonobo_ConfigDatabase_0 'G'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_1 'N'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_2 'O'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_3 'M'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_4 'E'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_5 '_'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_6 'M'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_7 'a'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_8 'g'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_9 'n'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_10 'i'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_11 'f'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_12 'i'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_13 'e'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_ConfigDatabase_struct;
#define TC_Bonobo_ConfigDatabase ((CORBA_TypeCode)&TC_Bonobo_ConfigDatabase_struct)
#endif
#endif
#if !defined(_Bonobo_ConfigDatabase_DBFlags_defined)
#define _Bonobo_ConfigDatabase_DBFlags_defined 1
   typedef enum {
      Bonobo_ConfigDatabase_DEFAULT,
      Bonobo_ConfigDatabase_WRITE,
      Bonobo_ConfigDatabase_MANDATORY
   } Bonobo_ConfigDatabase_DBFlags;
#if !defined(TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_0)
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_0 'G'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_1 'N'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_2 'O'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_3 'M'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_4 'E'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_5 '_'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_6 'M'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_7 'a'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_8 'g'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_9 'n'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_10 'i'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_11 'f'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_12 'i'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_13 'e'
#define TC_IMPL_TC_Bonobo_ConfigDatabase_DBFlags_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_ConfigDatabase_DBFlags_struct;
#define TC_Bonobo_ConfigDatabase_DBFlags ((CORBA_TypeCode)&TC_Bonobo_ConfigDatabase_DBFlags_struct)
#endif
#endif
#if !defined(_GNOME_Magnifier_Point_defined)
#define _GNOME_Magnifier_Point_defined 1
   typedef struct GNOME_Magnifier_Point_type GNOME_Magnifier_Point;
   struct GNOME_Magnifier_Point_type {
      CORBA_long x;
      CORBA_long y;
   };
#if !defined(TC_IMPL_TC_GNOME_Magnifier_Point_0)
#define TC_IMPL_TC_GNOME_Magnifier_Point_0 'G'
#define TC_IMPL_TC_GNOME_Magnifier_Point_1 'N'
#define TC_IMPL_TC_GNOME_Magnifier_Point_2 'O'
#define TC_IMPL_TC_GNOME_Magnifier_Point_3 'M'
#define TC_IMPL_TC_GNOME_Magnifier_Point_4 'E'
#define TC_IMPL_TC_GNOME_Magnifier_Point_5 '_'
#define TC_IMPL_TC_GNOME_Magnifier_Point_6 'M'
#define TC_IMPL_TC_GNOME_Magnifier_Point_7 'a'
#define TC_IMPL_TC_GNOME_Magnifier_Point_8 'g'
#define TC_IMPL_TC_GNOME_Magnifier_Point_9 'n'
#define TC_IMPL_TC_GNOME_Magnifier_Point_10 'i'
#define TC_IMPL_TC_GNOME_Magnifier_Point_11 'f'
#define TC_IMPL_TC_GNOME_Magnifier_Point_12 'i'
#define TC_IMPL_TC_GNOME_Magnifier_Point_13 'e'
#define TC_IMPL_TC_GNOME_Magnifier_Point_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_Magnifier_Point_struct;
#define TC_GNOME_Magnifier_Point ((CORBA_TypeCode)&TC_GNOME_Magnifier_Point_struct)
#endif
#define GNOME_Magnifier_Point__alloc() ((GNOME_Magnifier_Point *)ORBit_small_alloc (TC_GNOME_Magnifier_Point))
#define GNOME_Magnifier_Point__freekids(m,d) ORBit_small_freekids (TC_GNOME_Magnifier_Point,(m),(d))
#endif
#if !defined(_GNOME_Magnifier_RectBounds_defined)
#define _GNOME_Magnifier_RectBounds_defined 1
   typedef struct GNOME_Magnifier_RectBounds_type GNOME_Magnifier_RectBounds;
   struct GNOME_Magnifier_RectBounds_type {
      CORBA_long x1;
      CORBA_long y1;
      CORBA_long x2;
      CORBA_long y2;
   };
#if !defined(TC_IMPL_TC_GNOME_Magnifier_RectBounds_0)
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_0 'G'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_1 'N'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_2 'O'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_3 'M'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_4 'E'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_5 '_'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_6 'M'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_7 'a'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_8 'g'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_9 'n'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_10 'i'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_11 'f'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_12 'i'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_13 'e'
#define TC_IMPL_TC_GNOME_Magnifier_RectBounds_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_Magnifier_RectBounds_struct;
#define TC_GNOME_Magnifier_RectBounds ((CORBA_TypeCode)&TC_GNOME_Magnifier_RectBounds_struct)
#endif
#define GNOME_Magnifier_RectBounds__alloc() ((GNOME_Magnifier_RectBounds *)ORBit_small_alloc (TC_GNOME_Magnifier_RectBounds))
#define GNOME_Magnifier_RectBounds__freekids(m,d) ORBit_small_freekids (TC_GNOME_Magnifier_RectBounds,(m),(d))
#endif
#if !defined(ORBIT_DECL_GNOME_Magnifier_ZoomRegion) && !defined(_GNOME_Magnifier_ZoomRegion_defined)
#define ORBIT_DECL_GNOME_Magnifier_ZoomRegion 1
#define _GNOME_Magnifier_ZoomRegion_defined 1
#define GNOME_Magnifier_ZoomRegion__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_Magnifier_ZoomRegion;
   extern CORBA_unsigned_long GNOME_Magnifier_ZoomRegion__classid;
#if !defined(TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_0)
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_0 'G'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_1 'N'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_2 'O'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_3 'M'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_4 'E'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_5 '_'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_6 'M'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_7 'a'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_8 'g'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_9 'n'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_10 'i'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_11 'f'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_12 'i'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_13 'e'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_Magnifier_ZoomRegion_struct;
#define TC_GNOME_Magnifier_ZoomRegion ((CORBA_TypeCode)&TC_GNOME_Magnifier_ZoomRegion_struct)
#endif
#endif
#if !defined(_GNOME_Magnifier_ZoomRegion_AlignPolicy_defined)
#define _GNOME_Magnifier_ZoomRegion_AlignPolicy_defined 1
   typedef enum {
      GNOME_Magnifier_ZoomRegion_ALIGN_CENTER,
      GNOME_Magnifier_ZoomRegion_ALIGN_MIN,
      GNOME_Magnifier_ZoomRegion_ALIGN_MAX
   } GNOME_Magnifier_ZoomRegion_AlignPolicy;
#if !defined(TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_0)
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_0 'G'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_1 'N'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_2 'O'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_3 'M'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_4 'E'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_5 '_'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_6 'M'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_7 'a'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_8 'g'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_9 'n'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_10 'i'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_11 'f'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_12 'i'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_13 'e'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_struct;
#define TC_GNOME_Magnifier_ZoomRegion_AlignPolicy ((CORBA_TypeCode)&TC_GNOME_Magnifier_ZoomRegion_AlignPolicy_struct)
#endif
#endif
#if !defined(_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_defined)
#define _GNOME_Magnifier_ZoomRegion_ScrollingPolicy_defined 1
   typedef enum {
      GNOME_Magnifier_ZoomRegion_SCROLL_FASTEST,
      GNOME_Magnifier_ZoomRegion_SCROLL_FAST,
      GNOME_Magnifier_ZoomRegion_SCROLL_NORMAL,
      GNOME_Magnifier_ZoomRegion_SCROLL_SMOOTH,
      GNOME_Magnifier_ZoomRegion_SCROLL_SMOOTHEST
   } GNOME_Magnifier_ZoomRegion_ScrollingPolicy;
#if !defined(TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_0)
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_0 'G'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_1 'N'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_2 'O'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_3 'M'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_4 'E'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_5 '_'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_6 'M'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_7 'a'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_8 'g'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_9 'n'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_10 'i'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_11 'f'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_12 'i'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_13 'e'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_struct;
#define TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy ((CORBA_TypeCode)&TC_GNOME_Magnifier_ZoomRegion_ScrollingPolicy_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_Object)
#define ORBIT_DECL_CORBA_sequence_CORBA_Object 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_1 'N'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_2 'O'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_3 'M'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_4 'E'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_5 '_'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_6 'M'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_7 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_8 'g'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_9 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_10 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_11 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_12 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_13 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_14 'r'
#if !defined(_CORBA_sequence_CORBA_Object_defined)
#define _CORBA_sequence_CORBA_Object_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_Object *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_Object;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_Object_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_1 'N'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_2 'O'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_3 'M'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_4 'E'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_5 '_'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_6 'M'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_7 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_8 'g'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_9 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_10 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_11 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_12 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_13 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_Object_struct;
#define TC_CORBA_sequence_CORBA_Object ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_Object_struct)
#endif
#define CORBA_sequence_CORBA_Object__alloc() ((CORBA_sequence_CORBA_Object *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_Object))
#define CORBA_sequence_CORBA_Object__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_Object,(m),(d))
#define CORBA_sequence_CORBA_Object_allocbuf(l) ((CORBA_Object*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_Object, (l)))
#define CORBA_sequence_CORBA_Object_allocbuf(l) ((CORBA_Object*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_Object, (l)))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_GNOME_Magnifier_ZoomRegion)
#define ORBIT_DECL_CORBA_sequence_GNOME_Magnifier_ZoomRegion 1
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_0 'G'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_1 'N'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_2 'O'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_3 'M'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_4 'E'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_5 '_'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_6 'M'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_7 'a'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_8 'g'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_9 'n'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_10 'i'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_11 'f'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_12 'i'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_13 'e'
#define ORBIT_IMPL_CORBA_sequence_GNOME_Magnifier_ZoomRegion_14 'r'
#if !defined(_CORBA_sequence_GNOME_Magnifier_ZoomRegion_defined)
#define _CORBA_sequence_GNOME_Magnifier_ZoomRegion_defined 1
   typedef CORBA_sequence_CORBA_Object CORBA_sequence_GNOME_Magnifier_ZoomRegion;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_0)
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_0 'G'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_1 'N'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_2 'O'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_3 'M'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_4 'E'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_5 '_'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_6 'M'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_7 'a'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_8 'g'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_9 'n'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_10 'i'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_11 'f'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_12 'i'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_13 'e'
#define TC_IMPL_TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_struct;
#define TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion ((CORBA_TypeCode)&TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion_struct)
#endif
#define CORBA_sequence_GNOME_Magnifier_ZoomRegion__alloc CORBA_sequence_CORBA_Object__alloc
#define CORBA_sequence_GNOME_Magnifier_ZoomRegion__freekids CORBA_sequence_CORBA_Object__freekids
#define CORBA_sequence_GNOME_Magnifier_ZoomRegion_allocbuf CORBA_sequence_CORBA_Object_allocbuf
#define CORBA_sequence_GNOME_Magnifier_ZoomRegion_marshal(x,y,z) CORBA_sequence_CORBA_Object_marshal((x),(y),(z))
#define CORBA_sequence_GNOME_Magnifier_ZoomRegion_demarshal(x,y,z,i) CORBA_sequence_CORBA_Object_demarshal((x),(y),(z),(i))
#endif
#if !defined(_GNOME_Magnifier_ZoomRegionList_defined)
#define _GNOME_Magnifier_ZoomRegionList_defined 1
   typedef CORBA_sequence_GNOME_Magnifier_ZoomRegion GNOME_Magnifier_ZoomRegionList;
#define GNOME_Magnifier_ZoomRegionList_marshal(x,y,z) CORBA_sequence_GNOME_Magnifier_ZoomRegion_marshal((x),(y),(z))
#define GNOME_Magnifier_ZoomRegionList_demarshal(x,y,z,i) CORBA_sequence_GNOME_Magnifier_ZoomRegion_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_0)
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_0 'G'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_1 'N'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_2 'O'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_3 'M'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_4 'E'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_5 '_'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_6 'M'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_7 'a'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_8 'g'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_9 'n'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_10 'i'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_11 'f'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_12 'i'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_13 'e'
#define TC_IMPL_TC_GNOME_Magnifier_ZoomRegionList_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_Magnifier_ZoomRegionList_struct;
#define TC_GNOME_Magnifier_ZoomRegionList ((CORBA_TypeCode)&TC_GNOME_Magnifier_ZoomRegionList_struct)
#endif
#define GNOME_Magnifier_ZoomRegionList__alloc() ((GNOME_Magnifier_ZoomRegionList *)ORBit_small_alloc (TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion))
#define GNOME_Magnifier_ZoomRegionList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion,(m),(d))
#define GNOME_Magnifier_ZoomRegionList_allocbuf(l) ((GNOME_Magnifier_ZoomRegion*)ORBit_small_allocbuf (TC_CORBA_sequence_GNOME_Magnifier_ZoomRegion, (l)))
#endif
#if !defined(ORBIT_DECL_GNOME_Magnifier_Magnifier) && !defined(_GNOME_Magnifier_Magnifier_defined)
#define ORBIT_DECL_GNOME_Magnifier_Magnifier 1
#define _GNOME_Magnifier_Magnifier_defined 1
#define GNOME_Magnifier_Magnifier__freekids CORBA_Object__freekids
   typedef CORBA_Object GNOME_Magnifier_Magnifier;
   extern CORBA_unsigned_long GNOME_Magnifier_Magnifier__classid;
#if !defined(TC_IMPL_TC_GNOME_Magnifier_Magnifier_0)
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_0 'G'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_1 'N'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_2 'O'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_3 'M'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_4 'E'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_5 '_'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_6 'M'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_7 'a'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_8 'g'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_9 'n'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_10 'i'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_11 'f'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_12 'i'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_13 'e'
#define TC_IMPL_TC_GNOME_Magnifier_Magnifier_14 'r'
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_GNOME_Magnifier_Magnifier_struct;
#define TC_GNOME_Magnifier_Magnifier ((CORBA_TypeCode)&TC_GNOME_Magnifier_Magnifier_struct)
#endif
#endif
   /** POA structures **/
#ifndef _defined_POA_Bonobo_Listener
#define _defined_POA_Bonobo_Listener 1
   typedef struct {
      void *_private;
      void (*event) (PortableServer_Servant _servant, const CORBA_char * event_name, const CORBA_any * args, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Bonobo_Listener__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Listener__epv *Bonobo_Listener_epv;
   } POA_Bonobo_Listener__vepv;
   typedef struct {
      void *_private;
      POA_Bonobo_Listener__vepv *vepv;
   } POA_Bonobo_Listener;
   extern void POA_Bonobo_Listener__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Bonobo_Listener__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Bonobo_Listener */
#ifndef _defined_POA_Bonobo_EventSource
#define _defined_POA_Bonobo_EventSource 1
   typedef struct {
      void *_private;
      void (*addListener) (PortableServer_Servant _servant, const Bonobo_Listener l, CORBA_Environment * ev);
      void (*addListenerWithMask) (PortableServer_Servant _servant, const Bonobo_Listener l, const CORBA_char * event_mask, CORBA_Environment * ev);
      void (*removeListener) (PortableServer_Servant _servant, const Bonobo_Listener l, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Bonobo_EventSource__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_EventSource__epv *Bonobo_EventSource_epv;
   } POA_Bonobo_EventSource__vepv;
   typedef struct {
      void *_private;
      POA_Bonobo_EventSource__vepv *vepv;
   } POA_Bonobo_EventSource;
   extern void POA_Bonobo_EventSource__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Bonobo_EventSource__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Bonobo_EventSource */
#ifndef _defined_POA_Bonobo_PropertyBag
#define _defined_POA_Bonobo_PropertyBag 1
   typedef struct {
      void *_private;
      Bonobo_KeyList *(*getKeys) (PortableServer_Servant _servant, const CORBA_char * filter, CORBA_Environment * ev);
       CORBA_TypeCode(*getType) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev);
      CORBA_any *(*getValue) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev);
      void (*setValue) (PortableServer_Servant _servant, const CORBA_char * key, const CORBA_any * value, CORBA_Environment * ev);
      Bonobo_PropertySet *(*getValues) (PortableServer_Servant _servant, const CORBA_char * filter, CORBA_Environment * ev);
      void (*setValues) (PortableServer_Servant _servant, const Bonobo_PropertySet * set, CORBA_Environment * ev);
      CORBA_any *(*getDefault) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev);
       CORBA_string(*getDocTitle) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev);
       CORBA_string(*getDoc) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev);
       Bonobo_PropertyFlags(*getFlags) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev);
      void (*unImplemented1) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Bonobo_PropertyBag__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_PropertyBag__epv *Bonobo_PropertyBag_epv;
   } POA_Bonobo_PropertyBag__vepv;
   typedef struct {
      void *_private;
      POA_Bonobo_PropertyBag__vepv *vepv;
   } POA_Bonobo_PropertyBag;
   extern void POA_Bonobo_PropertyBag__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Bonobo_PropertyBag__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Bonobo_PropertyBag */
#ifndef _defined_POA_Bonobo_ConfigDatabase
#define _defined_POA_Bonobo_ConfigDatabase 1
   typedef struct {
      void *_private;
       CORBA_boolean(*_get_isWriteable) (PortableServer_Servant _servant, CORBA_Environment * ev);
      Bonobo_KeyList *(*getDirs) (PortableServer_Servant _servant, const CORBA_char * dir, CORBA_Environment * ev);
       CORBA_boolean(*hasDir) (PortableServer_Servant _servant, const CORBA_char * dir, CORBA_Environment * ev);
      void (*removeValue) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev);
      void (*removeDir) (PortableServer_Servant _servant, const CORBA_char * dir, CORBA_Environment * ev);
      void (*addDatabase) (PortableServer_Servant _servant, const Bonobo_ConfigDatabase db, const CORBA_char * key, const Bonobo_ConfigDatabase_DBFlags flags, CORBA_Environment * ev);
      void (*sync) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented5) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented6) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented7) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented8) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Bonobo_ConfigDatabase__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_PropertyBag__epv *Bonobo_PropertyBag_epv;
      POA_Bonobo_ConfigDatabase__epv *Bonobo_ConfigDatabase_epv;
   } POA_Bonobo_ConfigDatabase__vepv;
   typedef struct {
      void *_private;
      POA_Bonobo_ConfigDatabase__vepv *vepv;
   } POA_Bonobo_ConfigDatabase;
   extern void POA_Bonobo_ConfigDatabase__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Bonobo_ConfigDatabase__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Bonobo_ConfigDatabase */
#ifndef _defined_POA_GNOME_Magnifier_ZoomRegion
#define _defined_POA_GNOME_Magnifier_ZoomRegion 1
   typedef struct {
      void *_private;
       CORBA_boolean(*setMagFactor) (PortableServer_Servant _servant, const CORBA_float magX, const CORBA_float magY, CORBA_Environment * ev);
      void (*getMagFactor) (PortableServer_Servant _servant, CORBA_float * magX, CORBA_float * magY, CORBA_Environment * ev);
       Bonobo_PropertyBag(*getProperties) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*setROI) (PortableServer_Servant _servant, const GNOME_Magnifier_RectBounds * bounds, CORBA_Environment * ev);
      void (*markDirty) (PortableServer_Servant _servant, const GNOME_Magnifier_RectBounds * dirtyRegion, CORBA_Environment * ev);
       GNOME_Magnifier_RectBounds(*getROI) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*moveResize) (PortableServer_Servant _servant, const GNOME_Magnifier_RectBounds * bounds, CORBA_Environment * ev);
      void (*dispose) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_GNOME_Magnifier_ZoomRegion__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_Magnifier_ZoomRegion__epv *GNOME_Magnifier_ZoomRegion_epv;
   } POA_GNOME_Magnifier_ZoomRegion__vepv;
   typedef struct {
      void *_private;
      POA_GNOME_Magnifier_ZoomRegion__vepv *vepv;
   } POA_GNOME_Magnifier_ZoomRegion;
   extern void POA_GNOME_Magnifier_ZoomRegion__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_GNOME_Magnifier_ZoomRegion__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_Magnifier_ZoomRegion */
#ifndef _defined_POA_GNOME_Magnifier_Magnifier
#define _defined_POA_GNOME_Magnifier_Magnifier 1
   typedef struct {
      void *_private;
       CORBA_string(*_get_SourceDisplay) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*_set_SourceDisplay) (PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment * ev);
       CORBA_string(*_get_TargetDisplay) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*_set_TargetDisplay) (PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment * ev);
       Bonobo_PropertyBag(*getProperties) (PortableServer_Servant _servant, CORBA_Environment * ev);
       GNOME_Magnifier_ZoomRegion(*createZoomRegion) (PortableServer_Servant _servant, const CORBA_float zx, const CORBA_float zy, const GNOME_Magnifier_RectBounds * ROI, const GNOME_Magnifier_RectBounds * viewport, CORBA_Environment * ev);
      GNOME_Magnifier_ZoomRegionList *(*getZoomRegions) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_boolean(*addZoomRegion) (PortableServer_Servant _servant, const GNOME_Magnifier_ZoomRegion region, CORBA_Environment * ev);
      void (*clearAllZoomRegions) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*dispose) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_GNOME_Magnifier_Magnifier__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_GNOME_Magnifier_Magnifier__epv *GNOME_Magnifier_Magnifier_epv;
   } POA_GNOME_Magnifier_Magnifier__vepv;
   typedef struct {
      void *_private;
      POA_GNOME_Magnifier_Magnifier__vepv *vepv;
   } POA_GNOME_Magnifier_Magnifier;
   extern void POA_GNOME_Magnifier_Magnifier__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_GNOME_Magnifier_Magnifier__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_GNOME_Magnifier_Magnifier */
   /** skel prototypes **/
   void _ORBIT_skel_small_Bonobo_Listener_event(POA_Bonobo_Listener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_event) (PortableServer_Servant _servant, const CORBA_char * event_name, const CORBA_any * args, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Listener_unImplemented(POA_Bonobo_Listener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Listener_unImplemented2(POA_Bonobo_Listener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_EventSource_addListener(POA_Bonobo_EventSource * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_addListener) (PortableServer_Servant _servant, const Bonobo_Listener l, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_EventSource_addListenerWithMask(POA_Bonobo_EventSource * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_addListenerWithMask) (PortableServer_Servant _servant, const Bonobo_Listener l, const CORBA_char * event_mask, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_EventSource_removeListener(POA_Bonobo_EventSource * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_removeListener) (PortableServer_Servant _servant, const Bonobo_Listener l, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_EventSource_unImplemented(POA_Bonobo_EventSource * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_EventSource_unImplemented2(POA_Bonobo_EventSource * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_getKeys(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_KeyList * (*_impl_getKeys) (PortableServer_Servant _servant, const CORBA_char * filter, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_getType(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_TypeCode(*_impl_getType) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_getValue(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_any * (*_impl_getValue) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_setValue(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_setValue) (PortableServer_Servant _servant, const CORBA_char * key, const CORBA_any * value, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_getValues(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_PropertySet * (*_impl_getValues) (PortableServer_Servant _servant, const CORBA_char * filter, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_setValues(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_setValues) (PortableServer_Servant _servant, const Bonobo_PropertySet * set, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_getDefault(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_any * (*_impl_getDefault) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_getDocTitle(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getDocTitle) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_getDoc(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getDoc) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_getFlags(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_PropertyFlags(*_impl_getFlags) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_unImplemented1(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented1) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_unImplemented2(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_unImplemented3(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_PropertyBag_unImplemented4(POA_Bonobo_PropertyBag * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase__get_isWriteable(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl__get_isWriteable) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase_getDirs(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_KeyList * (*_impl_getDirs) (PortableServer_Servant _servant, const CORBA_char * dir, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase_hasDir(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_hasDir) (PortableServer_Servant _servant, const CORBA_char * dir, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase_removeValue(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_removeValue) (PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase_removeDir(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_removeDir) (PortableServer_Servant _servant, const CORBA_char * dir, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase_addDatabase(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_addDatabase) (PortableServer_Servant _servant, const Bonobo_ConfigDatabase db, const CORBA_char * key, const Bonobo_ConfigDatabase_DBFlags flags, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase_sync(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_sync) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase_unImplemented5(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented5) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase_unImplemented6(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented6) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase_unImplemented7(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented7) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_ConfigDatabase_unImplemented8(POA_Bonobo_ConfigDatabase * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented8) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_ZoomRegion_setMagFactor(POA_GNOME_Magnifier_ZoomRegion * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_setMagFactor) (PortableServer_Servant _servant, const CORBA_float magX, const CORBA_float magY, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_ZoomRegion_getMagFactor(POA_GNOME_Magnifier_ZoomRegion * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_getMagFactor) (PortableServer_Servant _servant, CORBA_float * magX, CORBA_float * magY, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_ZoomRegion_getProperties(POA_GNOME_Magnifier_ZoomRegion * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_PropertyBag(*_impl_getProperties) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_ZoomRegion_setROI(POA_GNOME_Magnifier_ZoomRegion * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_setROI) (PortableServer_Servant _servant, const GNOME_Magnifier_RectBounds * bounds, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_ZoomRegion_markDirty(POA_GNOME_Magnifier_ZoomRegion * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_markDirty) (PortableServer_Servant _servant, const GNOME_Magnifier_RectBounds * dirtyRegion, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_ZoomRegion_getROI(POA_GNOME_Magnifier_ZoomRegion * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, GNOME_Magnifier_RectBounds(*_impl_getROI) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_ZoomRegion_moveResize(POA_GNOME_Magnifier_ZoomRegion * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_moveResize) (PortableServer_Servant _servant, const GNOME_Magnifier_RectBounds * bounds, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_ZoomRegion_dispose(POA_GNOME_Magnifier_ZoomRegion * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_dispose) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_Magnifier__get_SourceDisplay(POA_GNOME_Magnifier_Magnifier * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl__get_SourceDisplay) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_Magnifier__set_SourceDisplay(POA_GNOME_Magnifier_Magnifier * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl__set_SourceDisplay) (PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_Magnifier__get_TargetDisplay(POA_GNOME_Magnifier_Magnifier * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl__get_TargetDisplay) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_Magnifier__set_TargetDisplay(POA_GNOME_Magnifier_Magnifier * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl__set_TargetDisplay) (PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_Magnifier_getProperties(POA_GNOME_Magnifier_Magnifier * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_PropertyBag(*_impl_getProperties) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_Magnifier_createZoomRegion(POA_GNOME_Magnifier_Magnifier * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, GNOME_Magnifier_ZoomRegion(*_impl_createZoomRegion) (PortableServer_Servant _servant, const CORBA_float zx, const CORBA_float zy, const GNOME_Magnifier_RectBounds * ROI, const GNOME_Magnifier_RectBounds * viewport, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_Magnifier_getZoomRegions(POA_GNOME_Magnifier_Magnifier * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, GNOME_Magnifier_ZoomRegionList * (*_impl_getZoomRegions) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_Magnifier_addZoomRegion(POA_GNOME_Magnifier_Magnifier * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_addZoomRegion) (PortableServer_Servant _servant, const GNOME_Magnifier_ZoomRegion region, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_Magnifier_clearAllZoomRegions(POA_GNOME_Magnifier_Magnifier * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_clearAllZoomRegions) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_GNOME_Magnifier_Magnifier_dispose(POA_GNOME_Magnifier_Magnifier * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_dispose) (PortableServer_Servant _servant, CORBA_Environment * ev));
   /** stub prototypes **/
#define Bonobo_Listener_ref Bonobo_Unknown_ref
#define Bonobo_Listener_unref Bonobo_Unknown_unref
#define Bonobo_Listener_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_Listener_event(Bonobo_Listener _obj, const CORBA_char * event_name, const CORBA_any * args, CORBA_Environment * ev);
   void Bonobo_Listener_unImplemented(Bonobo_Listener _obj, CORBA_Environment * ev);
   void Bonobo_Listener_unImplemented2(Bonobo_Listener _obj, CORBA_Environment * ev);
#define Bonobo_EventSource_ref Bonobo_Unknown_ref
#define Bonobo_EventSource_unref Bonobo_Unknown_unref
#define Bonobo_EventSource_queryInterface Bonobo_Unknown_queryInterface
   void Bonobo_EventSource_addListener(Bonobo_EventSource _obj, const Bonobo_Listener l, CORBA_Environment * ev);
   void Bonobo_EventSource_addListenerWithMask(Bonobo_EventSource _obj, const Bonobo_Listener l, const CORBA_char * event_mask, CORBA_Environment * ev);
   void Bonobo_EventSource_removeListener(Bonobo_EventSource _obj, const Bonobo_Listener l, CORBA_Environment * ev);
   void Bonobo_EventSource_unImplemented(Bonobo_EventSource _obj, CORBA_Environment * ev);
   void Bonobo_EventSource_unImplemented2(Bonobo_EventSource _obj, CORBA_Environment * ev);
#define Bonobo_PropertyBag_ref Bonobo_Unknown_ref
#define Bonobo_PropertyBag_unref Bonobo_Unknown_unref
#define Bonobo_PropertyBag_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_KeyList *Bonobo_PropertyBag_getKeys(Bonobo_PropertyBag _obj, const CORBA_char * filter, CORBA_Environment * ev);
   CORBA_TypeCode Bonobo_PropertyBag_getType(Bonobo_PropertyBag _obj, const CORBA_char * key, CORBA_Environment * ev);
   CORBA_any *Bonobo_PropertyBag_getValue(Bonobo_PropertyBag _obj, const CORBA_char * key, CORBA_Environment * ev);
   void Bonobo_PropertyBag_setValue(Bonobo_PropertyBag _obj, const CORBA_char * key, const CORBA_any * value, CORBA_Environment * ev);
   Bonobo_PropertySet *Bonobo_PropertyBag_getValues(Bonobo_PropertyBag _obj, const CORBA_char * filter, CORBA_Environment * ev);
   void Bonobo_PropertyBag_setValues(Bonobo_PropertyBag _obj, const Bonobo_PropertySet * set, CORBA_Environment * ev);
   CORBA_any *Bonobo_PropertyBag_getDefault(Bonobo_PropertyBag _obj, const CORBA_char * key, CORBA_Environment * ev);
   CORBA_string Bonobo_PropertyBag_getDocTitle(Bonobo_PropertyBag _obj, const CORBA_char * key, CORBA_Environment * ev);
   CORBA_string Bonobo_PropertyBag_getDoc(Bonobo_PropertyBag _obj, const CORBA_char * key, CORBA_Environment * ev);
   Bonobo_PropertyFlags Bonobo_PropertyBag_getFlags(Bonobo_PropertyBag _obj, const CORBA_char * key, CORBA_Environment * ev);
   void Bonobo_PropertyBag_unImplemented1(Bonobo_PropertyBag _obj, CORBA_Environment * ev);
   void Bonobo_PropertyBag_unImplemented2(Bonobo_PropertyBag _obj, CORBA_Environment * ev);
   void Bonobo_PropertyBag_unImplemented3(Bonobo_PropertyBag _obj, CORBA_Environment * ev);
   void Bonobo_PropertyBag_unImplemented4(Bonobo_PropertyBag _obj, CORBA_Environment * ev);
#define Bonobo_ConfigDatabase_ref Bonobo_Unknown_ref
#define Bonobo_ConfigDatabase_unref Bonobo_Unknown_unref
#define Bonobo_ConfigDatabase_queryInterface Bonobo_Unknown_queryInterface
#define Bonobo_ConfigDatabase_getKeys Bonobo_PropertyBag_getKeys
#define Bonobo_ConfigDatabase_getType Bonobo_PropertyBag_getType
#define Bonobo_ConfigDatabase_getValue Bonobo_PropertyBag_getValue
#define Bonobo_ConfigDatabase_setValue Bonobo_PropertyBag_setValue
#define Bonobo_ConfigDatabase_getValues Bonobo_PropertyBag_getValues
#define Bonobo_ConfigDatabase_setValues Bonobo_PropertyBag_setValues
#define Bonobo_ConfigDatabase_getDefault Bonobo_PropertyBag_getDefault
#define Bonobo_ConfigDatabase_getDocTitle Bonobo_PropertyBag_getDocTitle
#define Bonobo_ConfigDatabase_getDoc Bonobo_PropertyBag_getDoc
#define Bonobo_ConfigDatabase_getFlags Bonobo_PropertyBag_getFlags
#define Bonobo_ConfigDatabase_unImplemented1 Bonobo_PropertyBag_unImplemented1
#define Bonobo_ConfigDatabase_unImplemented2 Bonobo_PropertyBag_unImplemented2
#define Bonobo_ConfigDatabase_unImplemented3 Bonobo_PropertyBag_unImplemented3
#define Bonobo_ConfigDatabase_unImplemented4 Bonobo_PropertyBag_unImplemented4
   CORBA_boolean Bonobo_ConfigDatabase__get_isWriteable(Bonobo_ConfigDatabase _obj, CORBA_Environment * ev);
   Bonobo_KeyList *Bonobo_ConfigDatabase_getDirs(Bonobo_ConfigDatabase _obj, const CORBA_char * dir, CORBA_Environment * ev);
   CORBA_boolean Bonobo_ConfigDatabase_hasDir(Bonobo_ConfigDatabase _obj, const CORBA_char * dir, CORBA_Environment * ev);
   void Bonobo_ConfigDatabase_removeValue(Bonobo_ConfigDatabase _obj, const CORBA_char * key, CORBA_Environment * ev);
   void Bonobo_ConfigDatabase_removeDir(Bonobo_ConfigDatabase _obj, const CORBA_char * dir, CORBA_Environment * ev);
   void Bonobo_ConfigDatabase_addDatabase(Bonobo_ConfigDatabase _obj, const Bonobo_ConfigDatabase db, const CORBA_char * key, const Bonobo_ConfigDatabase_DBFlags flags, CORBA_Environment * ev);
   void Bonobo_ConfigDatabase_sync(Bonobo_ConfigDatabase _obj, CORBA_Environment * ev);
   void Bonobo_ConfigDatabase_unImplemented5(Bonobo_ConfigDatabase _obj, CORBA_Environment * ev);
   void Bonobo_ConfigDatabase_unImplemented6(Bonobo_ConfigDatabase _obj, CORBA_Environment * ev);
   void Bonobo_ConfigDatabase_unImplemented7(Bonobo_ConfigDatabase _obj, CORBA_Environment * ev);
   void Bonobo_ConfigDatabase_unImplemented8(Bonobo_ConfigDatabase _obj, CORBA_Environment * ev);
#define GNOME_Magnifier_ZoomRegion_ref Bonobo_Unknown_ref
#define GNOME_Magnifier_ZoomRegion_unref Bonobo_Unknown_unref
#define GNOME_Magnifier_ZoomRegion_queryInterface Bonobo_Unknown_queryInterface
   CORBA_boolean GNOME_Magnifier_ZoomRegion_setMagFactor(GNOME_Magnifier_ZoomRegion _obj, const CORBA_float magX, const CORBA_float magY, CORBA_Environment * ev);
   void GNOME_Magnifier_ZoomRegion_getMagFactor(GNOME_Magnifier_ZoomRegion _obj, CORBA_float * magX, CORBA_float * magY, CORBA_Environment * ev);
   Bonobo_PropertyBag GNOME_Magnifier_ZoomRegion_getProperties(GNOME_Magnifier_ZoomRegion _obj, CORBA_Environment * ev);
   void GNOME_Magnifier_ZoomRegion_setROI(GNOME_Magnifier_ZoomRegion _obj, const GNOME_Magnifier_RectBounds * bounds, CORBA_Environment * ev);
   void GNOME_Magnifier_ZoomRegion_markDirty(GNOME_Magnifier_ZoomRegion _obj, const GNOME_Magnifier_RectBounds * dirtyRegion, CORBA_Environment * ev);
   GNOME_Magnifier_RectBounds GNOME_Magnifier_ZoomRegion_getROI(GNOME_Magnifier_ZoomRegion _obj, CORBA_Environment * ev);
   void GNOME_Magnifier_ZoomRegion_moveResize(GNOME_Magnifier_ZoomRegion _obj, const GNOME_Magnifier_RectBounds * bounds, CORBA_Environment * ev);
   void GNOME_Magnifier_ZoomRegion_dispose(GNOME_Magnifier_ZoomRegion _obj, CORBA_Environment * ev);
#define GNOME_Magnifier_Magnifier_ref Bonobo_Unknown_ref
#define GNOME_Magnifier_Magnifier_unref Bonobo_Unknown_unref
#define GNOME_Magnifier_Magnifier_queryInterface Bonobo_Unknown_queryInterface
   CORBA_string GNOME_Magnifier_Magnifier__get_SourceDisplay(GNOME_Magnifier_Magnifier _obj, CORBA_Environment * ev);
   void GNOME_Magnifier_Magnifier__set_SourceDisplay(GNOME_Magnifier_Magnifier _obj, const CORBA_char * value, CORBA_Environment * ev);
   CORBA_string GNOME_Magnifier_Magnifier__get_TargetDisplay(GNOME_Magnifier_Magnifier _obj, CORBA_Environment * ev);
   void GNOME_Magnifier_Magnifier__set_TargetDisplay(GNOME_Magnifier_Magnifier _obj, const CORBA_char * value, CORBA_Environment * ev);
   Bonobo_PropertyBag GNOME_Magnifier_Magnifier_getProperties(GNOME_Magnifier_Magnifier _obj, CORBA_Environment * ev);
   GNOME_Magnifier_ZoomRegion GNOME_Magnifier_Magnifier_createZoomRegion(GNOME_Magnifier_Magnifier _obj, const CORBA_float zx, const CORBA_float zy, const GNOME_Magnifier_RectBounds * ROI, const GNOME_Magnifier_RectBounds * viewport, CORBA_Environment * ev);
   GNOME_Magnifier_ZoomRegionList *GNOME_Magnifier_Magnifier_getZoomRegions(GNOME_Magnifier_Magnifier _obj, CORBA_Environment * ev);
   CORBA_boolean GNOME_Magnifier_Magnifier_addZoomRegion(GNOME_Magnifier_Magnifier _obj, const GNOME_Magnifier_ZoomRegion region, CORBA_Environment * ev);
   void GNOME_Magnifier_Magnifier_clearAllZoomRegions(GNOME_Magnifier_Magnifier _obj, CORBA_Environment * ev);
   void GNOME_Magnifier_Magnifier_dispose(GNOME_Magnifier_Magnifier _obj, CORBA_Environment * ev);
#include <orbit/orb-core/orbit-interface.h>
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IInterface Bonobo_Listener__iinterface;
#define Bonobo_Listener_IMETHODS_LEN 3
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IMethod Bonobo_Listener__imethods[Bonobo_Listener_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IInterface Bonobo_EventSource__iinterface;
#define Bonobo_EventSource_IMETHODS_LEN 5
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IMethod Bonobo_EventSource__imethods[Bonobo_EventSource_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IInterface Bonobo_PropertyBag__iinterface;
#define Bonobo_PropertyBag_IMETHODS_LEN 14
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IMethod Bonobo_PropertyBag__imethods[Bonobo_PropertyBag_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IInterface Bonobo_ConfigDatabase__iinterface;
#define Bonobo_ConfigDatabase_IMETHODS_LEN 11
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IMethod Bonobo_ConfigDatabase__imethods[Bonobo_ConfigDatabase_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_Magnifier_ZoomRegion__iinterface;
#define GNOME_Magnifier_ZoomRegion_IMETHODS_LEN 8
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IMethod GNOME_Magnifier_ZoomRegion__imethods[GNOME_Magnifier_ZoomRegion_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IInterface GNOME_Magnifier_Magnifier__iinterface;
#define GNOME_Magnifier_Magnifier_IMETHODS_LEN 10
#ifdef ORBIT_IDL_C_IMODULE_GNOME_Magnifier
   static
#else
   extern
#endif
   ORBit_IMethod GNOME_Magnifier_Magnifier__imethods[GNOME_Magnifier_Magnifier_IMETHODS_LEN];
#ifdef __cplusplus
}
#endif				/* __cplusplus */
#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>
#endif				/* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL

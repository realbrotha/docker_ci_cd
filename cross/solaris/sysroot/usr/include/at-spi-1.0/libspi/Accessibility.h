/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */
#ifndef Accessibility_H
#define Accessibility_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>
#ifdef __cplusplus
extern "C" {
#endif				/* __cplusplus */
   /** typedefs **/
#include <bonobo-activation/Bonobo_Unknown.h>
#if !defined(_Accessibility_RelationType_defined)
#define _Accessibility_RelationType_defined 1
   typedef enum {
      Accessibility_RELATION_NULL,
      Accessibility_RELATION_LABEL_FOR,
      Accessibility_RELATION_LABELLED_BY,
      Accessibility_RELATION_CONTROLLER_FOR,
      Accessibility_RELATION_CONTROLLED_BY,
      Accessibility_RELATION_MEMBER_OF,
      Accessibility_RELATION_TOOLTIP_FOR,
      Accessibility_RELATION_NODE_CHILD_OF,
      Accessibility_RELATION_EXTENDED,
      Accessibility_RELATION_FLOWS_TO,
      Accessibility_RELATION_FLOWS_FROM,
      Accessibility_RELATION_SUBWINDOW_OF,
      Accessibility_RELATION_EMBEDS,
      Accessibility_RELATION_EMBEDDED_BY,
      Accessibility_RELATION_POPUP_FOR,
      Accessibility_RELATION_LAST_DEFINED
   } Accessibility_RelationType;
#if !defined(TC_IMPL_TC_Accessibility_RelationType_0)
#define TC_IMPL_TC_Accessibility_RelationType_0 'A'
#define TC_IMPL_TC_Accessibility_RelationType_1 'c'
#define TC_IMPL_TC_Accessibility_RelationType_2 'c'
#define TC_IMPL_TC_Accessibility_RelationType_3 'e'
#define TC_IMPL_TC_Accessibility_RelationType_4 's'
#define TC_IMPL_TC_Accessibility_RelationType_5 's'
#define TC_IMPL_TC_Accessibility_RelationType_6 'i'
#define TC_IMPL_TC_Accessibility_RelationType_7 'b'
#define TC_IMPL_TC_Accessibility_RelationType_8 'i'
#define TC_IMPL_TC_Accessibility_RelationType_9 'l'
#define TC_IMPL_TC_Accessibility_RelationType_10 'i'
#define TC_IMPL_TC_Accessibility_RelationType_11 't'
#define TC_IMPL_TC_Accessibility_RelationType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_RelationType_struct;
#define TC_Accessibility_RelationType ((CORBA_TypeCode)&TC_Accessibility_RelationType_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Relation) && !defined(_Accessibility_Relation_defined)
#define ORBIT_DECL_Accessibility_Relation 1
#define _Accessibility_Relation_defined 1
#define Accessibility_Relation__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Relation;
   extern CORBA_unsigned_long Accessibility_Relation__classid;
#if !defined(TC_IMPL_TC_Accessibility_Relation_0)
#define TC_IMPL_TC_Accessibility_Relation_0 'A'
#define TC_IMPL_TC_Accessibility_Relation_1 'c'
#define TC_IMPL_TC_Accessibility_Relation_2 'c'
#define TC_IMPL_TC_Accessibility_Relation_3 'e'
#define TC_IMPL_TC_Accessibility_Relation_4 's'
#define TC_IMPL_TC_Accessibility_Relation_5 's'
#define TC_IMPL_TC_Accessibility_Relation_6 'i'
#define TC_IMPL_TC_Accessibility_Relation_7 'b'
#define TC_IMPL_TC_Accessibility_Relation_8 'i'
#define TC_IMPL_TC_Accessibility_Relation_9 'l'
#define TC_IMPL_TC_Accessibility_Relation_10 'i'
#define TC_IMPL_TC_Accessibility_Relation_11 't'
#define TC_IMPL_TC_Accessibility_Relation_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Relation_struct;
#define TC_Accessibility_Relation ((CORBA_TypeCode)&TC_Accessibility_Relation_struct)
#endif
#endif
#if !defined(_Accessibility_StateType_defined)
#define _Accessibility_StateType_defined 1
   typedef enum {
      Accessibility_STATE_INVALID,
      Accessibility_STATE_ACTIVE,
      Accessibility_STATE_ARMED,
      Accessibility_STATE_BUSY,
      Accessibility_STATE_CHECKED,
      Accessibility_STATE_COLLAPSED,
      Accessibility_STATE_DEFUNCT,
      Accessibility_STATE_EDITABLE,
      Accessibility_STATE_ENABLED,
      Accessibility_STATE_EXPANDABLE,
      Accessibility_STATE_EXPANDED,
      Accessibility_STATE_FOCUSABLE,
      Accessibility_STATE_FOCUSED,
      Accessibility_STATE_HAS_TOOLTIP,
      Accessibility_STATE_HORIZONTAL,
      Accessibility_STATE_ICONIFIED,
      Accessibility_STATE_MODAL,
      Accessibility_STATE_MULTI_LINE,
      Accessibility_STATE_MULTISELECTABLE,
      Accessibility_STATE_OPAQUE,
      Accessibility_STATE_PRESSED,
      Accessibility_STATE_RESIZABLE,
      Accessibility_STATE_SELECTABLE,
      Accessibility_STATE_SELECTED,
      Accessibility_STATE_SENSITIVE,
      Accessibility_STATE_SHOWING,
      Accessibility_STATE_SINGLE_LINE,
      Accessibility_STATE_STALE,
      Accessibility_STATE_TRANSIENT,
      Accessibility_STATE_VERTICAL,
      Accessibility_STATE_VISIBLE,
      Accessibility_STATE_MANAGES_DESCENDANTS,
      Accessibility_STATE_INDETERMINATE,
      Accessibility_STATE_LAST_DEFINED
   } Accessibility_StateType;
#if !defined(TC_IMPL_TC_Accessibility_StateType_0)
#define TC_IMPL_TC_Accessibility_StateType_0 'A'
#define TC_IMPL_TC_Accessibility_StateType_1 'c'
#define TC_IMPL_TC_Accessibility_StateType_2 'c'
#define TC_IMPL_TC_Accessibility_StateType_3 'e'
#define TC_IMPL_TC_Accessibility_StateType_4 's'
#define TC_IMPL_TC_Accessibility_StateType_5 's'
#define TC_IMPL_TC_Accessibility_StateType_6 'i'
#define TC_IMPL_TC_Accessibility_StateType_7 'b'
#define TC_IMPL_TC_Accessibility_StateType_8 'i'
#define TC_IMPL_TC_Accessibility_StateType_9 'l'
#define TC_IMPL_TC_Accessibility_StateType_10 'i'
#define TC_IMPL_TC_Accessibility_StateType_11 't'
#define TC_IMPL_TC_Accessibility_StateType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_StateType_struct;
#define TC_Accessibility_StateType ((CORBA_TypeCode)&TC_Accessibility_StateType_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Accessibility_StateType)
#define ORBIT_DECL_CORBA_sequence_Accessibility_StateType 1
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_0 'A'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_1 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_2 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_3 'e'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_4 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_5 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_6 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_7 'b'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_8 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_9 'l'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_10 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_11 't'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_StateType_12 'y'
#if !defined(_CORBA_sequence_Accessibility_StateType_defined)
#define _CORBA_sequence_Accessibility_StateType_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      Accessibility_StateType *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_Accessibility_StateType;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_0)
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_0 'A'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_1 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_2 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_3 'e'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_4 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_5 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_6 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_7 'b'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_8 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_9 'l'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_10 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_11 't'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_StateType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_Accessibility_StateType_struct;
#define TC_CORBA_sequence_Accessibility_StateType ((CORBA_TypeCode)&TC_CORBA_sequence_Accessibility_StateType_struct)
#endif
#define CORBA_sequence_Accessibility_StateType__alloc() ((CORBA_sequence_Accessibility_StateType *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_StateType))
#define CORBA_sequence_Accessibility_StateType__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_StateType,(m),(d))
#define CORBA_sequence_Accessibility_StateType_allocbuf(l) ((Accessibility_StateType*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_StateType, (l)))
#define CORBA_sequence_Accessibility_StateType_allocbuf(l) ((Accessibility_StateType*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_StateType, (l)))
#endif
#if !defined(_Accessibility_StateSeq_defined)
#define _Accessibility_StateSeq_defined 1
   typedef CORBA_sequence_Accessibility_StateType Accessibility_StateSeq;
#define Accessibility_StateSeq_marshal(x,y,z) CORBA_sequence_Accessibility_StateType_marshal((x),(y),(z))
#define Accessibility_StateSeq_demarshal(x,y,z,i) CORBA_sequence_Accessibility_StateType_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Accessibility_StateSeq_0)
#define TC_IMPL_TC_Accessibility_StateSeq_0 'A'
#define TC_IMPL_TC_Accessibility_StateSeq_1 'c'
#define TC_IMPL_TC_Accessibility_StateSeq_2 'c'
#define TC_IMPL_TC_Accessibility_StateSeq_3 'e'
#define TC_IMPL_TC_Accessibility_StateSeq_4 's'
#define TC_IMPL_TC_Accessibility_StateSeq_5 's'
#define TC_IMPL_TC_Accessibility_StateSeq_6 'i'
#define TC_IMPL_TC_Accessibility_StateSeq_7 'b'
#define TC_IMPL_TC_Accessibility_StateSeq_8 'i'
#define TC_IMPL_TC_Accessibility_StateSeq_9 'l'
#define TC_IMPL_TC_Accessibility_StateSeq_10 'i'
#define TC_IMPL_TC_Accessibility_StateSeq_11 't'
#define TC_IMPL_TC_Accessibility_StateSeq_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_StateSeq_struct;
#define TC_Accessibility_StateSeq ((CORBA_TypeCode)&TC_Accessibility_StateSeq_struct)
#endif
#define Accessibility_StateSeq__alloc() ((Accessibility_StateSeq *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_StateType))
#define Accessibility_StateSeq__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_StateType,(m),(d))
#define Accessibility_StateSeq_allocbuf(l) ((Accessibility_StateType*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_StateType, (l)))
#endif
#if !defined(ORBIT_DECL_Accessibility_StateSet) && !defined(_Accessibility_StateSet_defined)
#define ORBIT_DECL_Accessibility_StateSet 1
#define _Accessibility_StateSet_defined 1
#define Accessibility_StateSet__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_StateSet;
   extern CORBA_unsigned_long Accessibility_StateSet__classid;
#if !defined(TC_IMPL_TC_Accessibility_StateSet_0)
#define TC_IMPL_TC_Accessibility_StateSet_0 'A'
#define TC_IMPL_TC_Accessibility_StateSet_1 'c'
#define TC_IMPL_TC_Accessibility_StateSet_2 'c'
#define TC_IMPL_TC_Accessibility_StateSet_3 'e'
#define TC_IMPL_TC_Accessibility_StateSet_4 's'
#define TC_IMPL_TC_Accessibility_StateSet_5 's'
#define TC_IMPL_TC_Accessibility_StateSet_6 'i'
#define TC_IMPL_TC_Accessibility_StateSet_7 'b'
#define TC_IMPL_TC_Accessibility_StateSet_8 'i'
#define TC_IMPL_TC_Accessibility_StateSet_9 'l'
#define TC_IMPL_TC_Accessibility_StateSet_10 'i'
#define TC_IMPL_TC_Accessibility_StateSet_11 't'
#define TC_IMPL_TC_Accessibility_StateSet_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_StateSet_struct;
#define TC_Accessibility_StateSet ((CORBA_TypeCode)&TC_Accessibility_StateSet_struct)
#endif
#endif
#if !defined(_Accessibility_Role_defined)
#define _Accessibility_Role_defined 1
   typedef enum {
      Accessibility_ROLE_INVALID,
      Accessibility_ROLE_ACCELERATOR_LABEL,
      Accessibility_ROLE_ALERT,
      Accessibility_ROLE_ANIMATION,
      Accessibility_ROLE_ARROW,
      Accessibility_ROLE_CALENDAR,
      Accessibility_ROLE_CANVAS,
      Accessibility_ROLE_CHECK_BOX,
      Accessibility_ROLE_CHECK_MENU_ITEM,
      Accessibility_ROLE_COLOR_CHOOSER,
      Accessibility_ROLE_COLUMN_HEADER,
      Accessibility_ROLE_COMBO_BOX,
      Accessibility_ROLE_DATE_EDITOR,
      Accessibility_ROLE_DESKTOP_ICON,
      Accessibility_ROLE_DESKTOP_FRAME,
      Accessibility_ROLE_DIAL,
      Accessibility_ROLE_DIALOG,
      Accessibility_ROLE_DIRECTORY_PANE,
      Accessibility_ROLE_DRAWING_AREA,
      Accessibility_ROLE_FILE_CHOOSER,
      Accessibility_ROLE_FILLER,
      Accessibility_ROLE_FOCUS_TRAVERSABLE,
      Accessibility_ROLE_FONT_CHOOSER,
      Accessibility_ROLE_FRAME,
      Accessibility_ROLE_GLASS_PANE,
      Accessibility_ROLE_HTML_CONTAINER,
      Accessibility_ROLE_ICON,
      Accessibility_ROLE_IMAGE,
      Accessibility_ROLE_INTERNAL_FRAME,
      Accessibility_ROLE_LABEL,
      Accessibility_ROLE_LAYERED_PANE,
      Accessibility_ROLE_LIST,
      Accessibility_ROLE_LIST_ITEM,
      Accessibility_ROLE_MENU,
      Accessibility_ROLE_MENU_BAR,
      Accessibility_ROLE_MENU_ITEM,
      Accessibility_ROLE_OPTION_PANE,
      Accessibility_ROLE_PAGE_TAB,
      Accessibility_ROLE_PAGE_TAB_LIST,
      Accessibility_ROLE_PANEL,
      Accessibility_ROLE_PASSWORD_TEXT,
      Accessibility_ROLE_POPUP_MENU,
      Accessibility_ROLE_PROGRESS_BAR,
      Accessibility_ROLE_PUSH_BUTTON,
      Accessibility_ROLE_RADIO_BUTTON,
      Accessibility_ROLE_RADIO_MENU_ITEM,
      Accessibility_ROLE_ROOT_PANE,
      Accessibility_ROLE_ROW_HEADER,
      Accessibility_ROLE_SCROLL_BAR,
      Accessibility_ROLE_SCROLL_PANE,
      Accessibility_ROLE_SEPARATOR,
      Accessibility_ROLE_SLIDER,
      Accessibility_ROLE_SPIN_BUTTON,
      Accessibility_ROLE_SPLIT_PANE,
      Accessibility_ROLE_STATUS_BAR,
      Accessibility_ROLE_TABLE,
      Accessibility_ROLE_TABLE_CELL,
      Accessibility_ROLE_TABLE_COLUMN_HEADER,
      Accessibility_ROLE_TABLE_ROW_HEADER,
      Accessibility_ROLE_TEAROFF_MENU_ITEM,
      Accessibility_ROLE_TERMINAL,
      Accessibility_ROLE_TEXT,
      Accessibility_ROLE_TOGGLE_BUTTON,
      Accessibility_ROLE_TOOL_BAR,
      Accessibility_ROLE_TOOL_TIP,
      Accessibility_ROLE_TREE,
      Accessibility_ROLE_TREE_TABLE,
      Accessibility_ROLE_UNKNOWN,
      Accessibility_ROLE_VIEWPORT,
      Accessibility_ROLE_WINDOW,
      Accessibility_ROLE_EXTENDED,
      Accessibility_ROLE_HEADER,
      Accessibility_ROLE_FOOTER,
      Accessibility_ROLE_PARAGRAPH,
      Accessibility_ROLE_RULER,
      Accessibility_ROLE_APPLICATION,
      Accessibility_ROLE_AUTOCOMPLETE,
      Accessibility_ROLE_EDITBAR,
      Accessibility_ROLE_EMBEDDED,
      Accessibility_ROLE_LAST_DEFINED
   } Accessibility_Role;
#if !defined(TC_IMPL_TC_Accessibility_Role_0)
#define TC_IMPL_TC_Accessibility_Role_0 'A'
#define TC_IMPL_TC_Accessibility_Role_1 'c'
#define TC_IMPL_TC_Accessibility_Role_2 'c'
#define TC_IMPL_TC_Accessibility_Role_3 'e'
#define TC_IMPL_TC_Accessibility_Role_4 's'
#define TC_IMPL_TC_Accessibility_Role_5 's'
#define TC_IMPL_TC_Accessibility_Role_6 'i'
#define TC_IMPL_TC_Accessibility_Role_7 'b'
#define TC_IMPL_TC_Accessibility_Role_8 'i'
#define TC_IMPL_TC_Accessibility_Role_9 'l'
#define TC_IMPL_TC_Accessibility_Role_10 'i'
#define TC_IMPL_TC_Accessibility_Role_11 't'
#define TC_IMPL_TC_Accessibility_Role_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Role_struct;
#define TC_Accessibility_Role ((CORBA_TypeCode)&TC_Accessibility_Role_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_Object)
#define ORBIT_DECL_CORBA_sequence_CORBA_Object 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_0 'A'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_1 'c'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_2 'c'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_3 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_4 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_5 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_6 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_7 'b'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_8 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_9 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_10 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_11 't'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_12 'y'
#if !defined(_CORBA_sequence_CORBA_Object_defined)
#define _CORBA_sequence_CORBA_Object_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_Object *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_Object;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_Object_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_0 'A'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_1 'c'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_2 'c'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_3 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_4 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_5 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_6 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_7 'b'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_8 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_9 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_10 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_11 't'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_Object_struct;
#define TC_CORBA_sequence_CORBA_Object ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_Object_struct)
#endif
#define CORBA_sequence_CORBA_Object__alloc() ((CORBA_sequence_CORBA_Object *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_Object))
#define CORBA_sequence_CORBA_Object__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_Object,(m),(d))
#define CORBA_sequence_CORBA_Object_allocbuf(l) ((CORBA_Object*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_Object, (l)))
#define CORBA_sequence_CORBA_Object_allocbuf(l) ((CORBA_Object*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_Object, (l)))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Accessibility_Relation)
#define ORBIT_DECL_CORBA_sequence_Accessibility_Relation 1
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_0 'A'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_1 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_2 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_3 'e'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_4 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_5 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_6 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_7 'b'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_8 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_9 'l'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_10 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_11 't'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Relation_12 'y'
#if !defined(_CORBA_sequence_Accessibility_Relation_defined)
#define _CORBA_sequence_Accessibility_Relation_defined 1
   typedef CORBA_sequence_CORBA_Object CORBA_sequence_Accessibility_Relation;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_0)
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_0 'A'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_1 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_2 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_3 'e'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_4 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_5 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_6 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_7 'b'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_8 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_9 'l'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_10 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_11 't'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Relation_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_Accessibility_Relation_struct;
#define TC_CORBA_sequence_Accessibility_Relation ((CORBA_TypeCode)&TC_CORBA_sequence_Accessibility_Relation_struct)
#endif
#define CORBA_sequence_Accessibility_Relation__alloc CORBA_sequence_CORBA_Object__alloc
#define CORBA_sequence_Accessibility_Relation__freekids CORBA_sequence_CORBA_Object__freekids
#define CORBA_sequence_Accessibility_Relation_allocbuf CORBA_sequence_CORBA_Object_allocbuf
#define CORBA_sequence_Accessibility_Relation_marshal(x,y,z) CORBA_sequence_CORBA_Object_marshal((x),(y),(z))
#define CORBA_sequence_Accessibility_Relation_demarshal(x,y,z,i) CORBA_sequence_CORBA_Object_demarshal((x),(y),(z),(i))
#endif
#if !defined(_Accessibility_RelationSet_defined)
#define _Accessibility_RelationSet_defined 1
   typedef CORBA_sequence_Accessibility_Relation Accessibility_RelationSet;
#define Accessibility_RelationSet_marshal(x,y,z) CORBA_sequence_Accessibility_Relation_marshal((x),(y),(z))
#define Accessibility_RelationSet_demarshal(x,y,z,i) CORBA_sequence_Accessibility_Relation_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Accessibility_RelationSet_0)
#define TC_IMPL_TC_Accessibility_RelationSet_0 'A'
#define TC_IMPL_TC_Accessibility_RelationSet_1 'c'
#define TC_IMPL_TC_Accessibility_RelationSet_2 'c'
#define TC_IMPL_TC_Accessibility_RelationSet_3 'e'
#define TC_IMPL_TC_Accessibility_RelationSet_4 's'
#define TC_IMPL_TC_Accessibility_RelationSet_5 's'
#define TC_IMPL_TC_Accessibility_RelationSet_6 'i'
#define TC_IMPL_TC_Accessibility_RelationSet_7 'b'
#define TC_IMPL_TC_Accessibility_RelationSet_8 'i'
#define TC_IMPL_TC_Accessibility_RelationSet_9 'l'
#define TC_IMPL_TC_Accessibility_RelationSet_10 'i'
#define TC_IMPL_TC_Accessibility_RelationSet_11 't'
#define TC_IMPL_TC_Accessibility_RelationSet_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_RelationSet_struct;
#define TC_Accessibility_RelationSet ((CORBA_TypeCode)&TC_Accessibility_RelationSet_struct)
#endif
#define Accessibility_RelationSet__alloc() ((Accessibility_RelationSet *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_Relation))
#define Accessibility_RelationSet__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_Relation,(m),(d))
#define Accessibility_RelationSet_allocbuf(l) ((Accessibility_Relation*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_Relation, (l)))
#endif
#if !defined(_Accessibility_BoundingBox_defined)
#define _Accessibility_BoundingBox_defined 1
   typedef struct Accessibility_BoundingBox_type Accessibility_BoundingBox;
   struct Accessibility_BoundingBox_type {
      CORBA_long x;
      CORBA_long y;
      CORBA_long width;
      CORBA_long height;
   };
#if !defined(TC_IMPL_TC_Accessibility_BoundingBox_0)
#define TC_IMPL_TC_Accessibility_BoundingBox_0 'A'
#define TC_IMPL_TC_Accessibility_BoundingBox_1 'c'
#define TC_IMPL_TC_Accessibility_BoundingBox_2 'c'
#define TC_IMPL_TC_Accessibility_BoundingBox_3 'e'
#define TC_IMPL_TC_Accessibility_BoundingBox_4 's'
#define TC_IMPL_TC_Accessibility_BoundingBox_5 's'
#define TC_IMPL_TC_Accessibility_BoundingBox_6 'i'
#define TC_IMPL_TC_Accessibility_BoundingBox_7 'b'
#define TC_IMPL_TC_Accessibility_BoundingBox_8 'i'
#define TC_IMPL_TC_Accessibility_BoundingBox_9 'l'
#define TC_IMPL_TC_Accessibility_BoundingBox_10 'i'
#define TC_IMPL_TC_Accessibility_BoundingBox_11 't'
#define TC_IMPL_TC_Accessibility_BoundingBox_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_BoundingBox_struct;
#define TC_Accessibility_BoundingBox ((CORBA_TypeCode)&TC_Accessibility_BoundingBox_struct)
#endif
#define Accessibility_BoundingBox__alloc() ((Accessibility_BoundingBox *)ORBit_small_alloc (TC_Accessibility_BoundingBox))
#define Accessibility_BoundingBox__freekids(m,d) ORBit_small_freekids (TC_Accessibility_BoundingBox,(m),(d))
#endif
#if !defined(ORBIT_DECL_Accessibility_Accessible) && !defined(_Accessibility_Accessible_defined)
#define ORBIT_DECL_Accessibility_Accessible 1
#define _Accessibility_Accessible_defined 1
#define Accessibility_Accessible__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Accessible;
   extern CORBA_unsigned_long Accessibility_Accessible__classid;
#if !defined(TC_IMPL_TC_Accessibility_Accessible_0)
#define TC_IMPL_TC_Accessibility_Accessible_0 'A'
#define TC_IMPL_TC_Accessibility_Accessible_1 'c'
#define TC_IMPL_TC_Accessibility_Accessible_2 'c'
#define TC_IMPL_TC_Accessibility_Accessible_3 'e'
#define TC_IMPL_TC_Accessibility_Accessible_4 's'
#define TC_IMPL_TC_Accessibility_Accessible_5 's'
#define TC_IMPL_TC_Accessibility_Accessible_6 'i'
#define TC_IMPL_TC_Accessibility_Accessible_7 'b'
#define TC_IMPL_TC_Accessibility_Accessible_8 'i'
#define TC_IMPL_TC_Accessibility_Accessible_9 'l'
#define TC_IMPL_TC_Accessibility_Accessible_10 'i'
#define TC_IMPL_TC_Accessibility_Accessible_11 't'
#define TC_IMPL_TC_Accessibility_Accessible_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Accessible_struct;
#define TC_Accessibility_Accessible ((CORBA_TypeCode)&TC_Accessibility_Accessible_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Action) && !defined(_Accessibility_Action_defined)
#define ORBIT_DECL_Accessibility_Action 1
#define _Accessibility_Action_defined 1
#define Accessibility_Action__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Action;
   extern CORBA_unsigned_long Accessibility_Action__classid;
#if !defined(TC_IMPL_TC_Accessibility_Action_0)
#define TC_IMPL_TC_Accessibility_Action_0 'A'
#define TC_IMPL_TC_Accessibility_Action_1 'c'
#define TC_IMPL_TC_Accessibility_Action_2 'c'
#define TC_IMPL_TC_Accessibility_Action_3 'e'
#define TC_IMPL_TC_Accessibility_Action_4 's'
#define TC_IMPL_TC_Accessibility_Action_5 's'
#define TC_IMPL_TC_Accessibility_Action_6 'i'
#define TC_IMPL_TC_Accessibility_Action_7 'b'
#define TC_IMPL_TC_Accessibility_Action_8 'i'
#define TC_IMPL_TC_Accessibility_Action_9 'l'
#define TC_IMPL_TC_Accessibility_Action_10 'i'
#define TC_IMPL_TC_Accessibility_Action_11 't'
#define TC_IMPL_TC_Accessibility_Action_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Action_struct;
#define TC_Accessibility_Action ((CORBA_TypeCode)&TC_Accessibility_Action_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Accessible) && !defined(_Accessibility_Accessible_defined)
#define ORBIT_DECL_Accessibility_Accessible 1
#define _Accessibility_Accessible_defined 1
#define Accessibility_Accessible__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Accessible;
   extern CORBA_unsigned_long Accessibility_Accessible__classid;
#if !defined(TC_IMPL_TC_Accessibility_Accessible_0)
#define TC_IMPL_TC_Accessibility_Accessible_0 'A'
#define TC_IMPL_TC_Accessibility_Accessible_1 'c'
#define TC_IMPL_TC_Accessibility_Accessible_2 'c'
#define TC_IMPL_TC_Accessibility_Accessible_3 'e'
#define TC_IMPL_TC_Accessibility_Accessible_4 's'
#define TC_IMPL_TC_Accessibility_Accessible_5 's'
#define TC_IMPL_TC_Accessibility_Accessible_6 'i'
#define TC_IMPL_TC_Accessibility_Accessible_7 'b'
#define TC_IMPL_TC_Accessibility_Accessible_8 'i'
#define TC_IMPL_TC_Accessibility_Accessible_9 'l'
#define TC_IMPL_TC_Accessibility_Accessible_10 'i'
#define TC_IMPL_TC_Accessibility_Accessible_11 't'
#define TC_IMPL_TC_Accessibility_Accessible_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Accessible_struct;
#define TC_Accessibility_Accessible ((CORBA_TypeCode)&TC_Accessibility_Accessible_struct)
#endif
#endif
#if !defined(_Accessibility_Event_defined)
#define _Accessibility_Event_defined 1
   typedef struct Accessibility_Event_type Accessibility_Event;
   struct Accessibility_Event_type {
      CORBA_string type;
      Accessibility_Accessible source;
      CORBA_long detail1;
      CORBA_long detail2;
      CORBA_any any_data;
   };
#if !defined(TC_IMPL_TC_Accessibility_Event_0)
#define TC_IMPL_TC_Accessibility_Event_0 'A'
#define TC_IMPL_TC_Accessibility_Event_1 'c'
#define TC_IMPL_TC_Accessibility_Event_2 'c'
#define TC_IMPL_TC_Accessibility_Event_3 'e'
#define TC_IMPL_TC_Accessibility_Event_4 's'
#define TC_IMPL_TC_Accessibility_Event_5 's'
#define TC_IMPL_TC_Accessibility_Event_6 'i'
#define TC_IMPL_TC_Accessibility_Event_7 'b'
#define TC_IMPL_TC_Accessibility_Event_8 'i'
#define TC_IMPL_TC_Accessibility_Event_9 'l'
#define TC_IMPL_TC_Accessibility_Event_10 'i'
#define TC_IMPL_TC_Accessibility_Event_11 't'
#define TC_IMPL_TC_Accessibility_Event_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Event_struct;
#define TC_Accessibility_Event ((CORBA_TypeCode)&TC_Accessibility_Event_struct)
#endif
#define Accessibility_Event__alloc() ((Accessibility_Event *)ORBit_small_alloc (TC_Accessibility_Event))
#define Accessibility_Event__freekids(m,d) ORBit_small_freekids (TC_Accessibility_Event,(m),(d))
#endif
#if !defined(ORBIT_DECL_Accessibility_EventListener) && !defined(_Accessibility_EventListener_defined)
#define ORBIT_DECL_Accessibility_EventListener 1
#define _Accessibility_EventListener_defined 1
#define Accessibility_EventListener__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_EventListener;
   extern CORBA_unsigned_long Accessibility_EventListener__classid;
#if !defined(TC_IMPL_TC_Accessibility_EventListener_0)
#define TC_IMPL_TC_Accessibility_EventListener_0 'A'
#define TC_IMPL_TC_Accessibility_EventListener_1 'c'
#define TC_IMPL_TC_Accessibility_EventListener_2 'c'
#define TC_IMPL_TC_Accessibility_EventListener_3 'e'
#define TC_IMPL_TC_Accessibility_EventListener_4 's'
#define TC_IMPL_TC_Accessibility_EventListener_5 's'
#define TC_IMPL_TC_Accessibility_EventListener_6 'i'
#define TC_IMPL_TC_Accessibility_EventListener_7 'b'
#define TC_IMPL_TC_Accessibility_EventListener_8 'i'
#define TC_IMPL_TC_Accessibility_EventListener_9 'l'
#define TC_IMPL_TC_Accessibility_EventListener_10 'i'
#define TC_IMPL_TC_Accessibility_EventListener_11 't'
#define TC_IMPL_TC_Accessibility_EventListener_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_EventListener_struct;
#define TC_Accessibility_EventListener ((CORBA_TypeCode)&TC_Accessibility_EventListener_struct)
#endif
#endif
#if !defined(_Accessibility_ComponentLayer_defined)
#define _Accessibility_ComponentLayer_defined 1
   typedef enum {
      Accessibility_LAYER_INVALID,
      Accessibility_LAYER_BACKGROUND,
      Accessibility_LAYER_CANVAS,
      Accessibility_LAYER_WIDGET,
      Accessibility_LAYER_MDI,
      Accessibility_LAYER_POPUP,
      Accessibility_LAYER_OVERLAY,
      Accessibility_LAYER_WINDOW,
      Accessibility_LAYER_LAST_DEFINED
   } Accessibility_ComponentLayer;
#if !defined(TC_IMPL_TC_Accessibility_ComponentLayer_0)
#define TC_IMPL_TC_Accessibility_ComponentLayer_0 'A'
#define TC_IMPL_TC_Accessibility_ComponentLayer_1 'c'
#define TC_IMPL_TC_Accessibility_ComponentLayer_2 'c'
#define TC_IMPL_TC_Accessibility_ComponentLayer_3 'e'
#define TC_IMPL_TC_Accessibility_ComponentLayer_4 's'
#define TC_IMPL_TC_Accessibility_ComponentLayer_5 's'
#define TC_IMPL_TC_Accessibility_ComponentLayer_6 'i'
#define TC_IMPL_TC_Accessibility_ComponentLayer_7 'b'
#define TC_IMPL_TC_Accessibility_ComponentLayer_8 'i'
#define TC_IMPL_TC_Accessibility_ComponentLayer_9 'l'
#define TC_IMPL_TC_Accessibility_ComponentLayer_10 'i'
#define TC_IMPL_TC_Accessibility_ComponentLayer_11 't'
#define TC_IMPL_TC_Accessibility_ComponentLayer_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_ComponentLayer_struct;
#define TC_Accessibility_ComponentLayer ((CORBA_TypeCode)&TC_Accessibility_ComponentLayer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Component) && !defined(_Accessibility_Component_defined)
#define ORBIT_DECL_Accessibility_Component 1
#define _Accessibility_Component_defined 1
#define Accessibility_Component__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Component;
   extern CORBA_unsigned_long Accessibility_Component__classid;
#if !defined(TC_IMPL_TC_Accessibility_Component_0)
#define TC_IMPL_TC_Accessibility_Component_0 'A'
#define TC_IMPL_TC_Accessibility_Component_1 'c'
#define TC_IMPL_TC_Accessibility_Component_2 'c'
#define TC_IMPL_TC_Accessibility_Component_3 'e'
#define TC_IMPL_TC_Accessibility_Component_4 's'
#define TC_IMPL_TC_Accessibility_Component_5 's'
#define TC_IMPL_TC_Accessibility_Component_6 'i'
#define TC_IMPL_TC_Accessibility_Component_7 'b'
#define TC_IMPL_TC_Accessibility_Component_8 'i'
#define TC_IMPL_TC_Accessibility_Component_9 'l'
#define TC_IMPL_TC_Accessibility_Component_10 'i'
#define TC_IMPL_TC_Accessibility_Component_11 't'
#define TC_IMPL_TC_Accessibility_Component_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Component_struct;
#define TC_Accessibility_Component ((CORBA_TypeCode)&TC_Accessibility_Component_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Hyperlink) && !defined(_Accessibility_Hyperlink_defined)
#define ORBIT_DECL_Accessibility_Hyperlink 1
#define _Accessibility_Hyperlink_defined 1
#define Accessibility_Hyperlink__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Hyperlink;
   extern CORBA_unsigned_long Accessibility_Hyperlink__classid;
#if !defined(TC_IMPL_TC_Accessibility_Hyperlink_0)
#define TC_IMPL_TC_Accessibility_Hyperlink_0 'A'
#define TC_IMPL_TC_Accessibility_Hyperlink_1 'c'
#define TC_IMPL_TC_Accessibility_Hyperlink_2 'c'
#define TC_IMPL_TC_Accessibility_Hyperlink_3 'e'
#define TC_IMPL_TC_Accessibility_Hyperlink_4 's'
#define TC_IMPL_TC_Accessibility_Hyperlink_5 's'
#define TC_IMPL_TC_Accessibility_Hyperlink_6 'i'
#define TC_IMPL_TC_Accessibility_Hyperlink_7 'b'
#define TC_IMPL_TC_Accessibility_Hyperlink_8 'i'
#define TC_IMPL_TC_Accessibility_Hyperlink_9 'l'
#define TC_IMPL_TC_Accessibility_Hyperlink_10 'i'
#define TC_IMPL_TC_Accessibility_Hyperlink_11 't'
#define TC_IMPL_TC_Accessibility_Hyperlink_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Hyperlink_struct;
#define TC_Accessibility_Hyperlink ((CORBA_TypeCode)&TC_Accessibility_Hyperlink_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Image) && !defined(_Accessibility_Image_defined)
#define ORBIT_DECL_Accessibility_Image 1
#define _Accessibility_Image_defined 1
#define Accessibility_Image__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Image;
   extern CORBA_unsigned_long Accessibility_Image__classid;
#if !defined(TC_IMPL_TC_Accessibility_Image_0)
#define TC_IMPL_TC_Accessibility_Image_0 'A'
#define TC_IMPL_TC_Accessibility_Image_1 'c'
#define TC_IMPL_TC_Accessibility_Image_2 'c'
#define TC_IMPL_TC_Accessibility_Image_3 'e'
#define TC_IMPL_TC_Accessibility_Image_4 's'
#define TC_IMPL_TC_Accessibility_Image_5 's'
#define TC_IMPL_TC_Accessibility_Image_6 'i'
#define TC_IMPL_TC_Accessibility_Image_7 'b'
#define TC_IMPL_TC_Accessibility_Image_8 'i'
#define TC_IMPL_TC_Accessibility_Image_9 'l'
#define TC_IMPL_TC_Accessibility_Image_10 'i'
#define TC_IMPL_TC_Accessibility_Image_11 't'
#define TC_IMPL_TC_Accessibility_Image_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Image_struct;
#define TC_Accessibility_Image ((CORBA_TypeCode)&TC_Accessibility_Image_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Selection) && !defined(_Accessibility_Selection_defined)
#define ORBIT_DECL_Accessibility_Selection 1
#define _Accessibility_Selection_defined 1
#define Accessibility_Selection__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Selection;
   extern CORBA_unsigned_long Accessibility_Selection__classid;
#if !defined(TC_IMPL_TC_Accessibility_Selection_0)
#define TC_IMPL_TC_Accessibility_Selection_0 'A'
#define TC_IMPL_TC_Accessibility_Selection_1 'c'
#define TC_IMPL_TC_Accessibility_Selection_2 'c'
#define TC_IMPL_TC_Accessibility_Selection_3 'e'
#define TC_IMPL_TC_Accessibility_Selection_4 's'
#define TC_IMPL_TC_Accessibility_Selection_5 's'
#define TC_IMPL_TC_Accessibility_Selection_6 'i'
#define TC_IMPL_TC_Accessibility_Selection_7 'b'
#define TC_IMPL_TC_Accessibility_Selection_8 'i'
#define TC_IMPL_TC_Accessibility_Selection_9 'l'
#define TC_IMPL_TC_Accessibility_Selection_10 'i'
#define TC_IMPL_TC_Accessibility_Selection_11 't'
#define TC_IMPL_TC_Accessibility_Selection_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Selection_struct;
#define TC_Accessibility_Selection ((CORBA_TypeCode)&TC_Accessibility_Selection_struct)
#endif
#endif
#if !defined(_Bonobo_StorageInfoFields_defined)
#define _Bonobo_StorageInfoFields_defined 1
   typedef CORBA_long Bonobo_StorageInfoFields;
#define Bonobo_StorageInfoFields_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
#define Bonobo_StorageInfoFields_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Bonobo_StorageInfoFields_0)
#define TC_IMPL_TC_Bonobo_StorageInfoFields_0 'A'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_1 'c'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_2 'c'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_3 'e'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_4 's'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_5 's'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_6 'i'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_7 'b'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_8 'i'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_9 'l'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_10 'i'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_11 't'
#define TC_IMPL_TC_Bonobo_StorageInfoFields_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_StorageInfoFields_struct;
#define TC_Bonobo_StorageInfoFields ((CORBA_TypeCode)&TC_Bonobo_StorageInfoFields_struct)
#endif
#define Bonobo_StorageInfoFields__alloc() ((Bonobo_StorageInfoFields *)ORBit_small_alloc (TC_CORBA_long))
#define Bonobo_StorageInfoFields__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
#endif
#ifndef Bonobo_FIELD_CONTENT_TYPE
#define Bonobo_FIELD_CONTENT_TYPE 1
#endif				/* !Bonobo_FIELD_CONTENT_TYPE */
#ifndef Bonobo_FIELD_SIZE
#define Bonobo_FIELD_SIZE 2
#endif				/* !Bonobo_FIELD_SIZE */
#ifndef Bonobo_FIELD_TYPE
#define Bonobo_FIELD_TYPE 4
#endif				/* !Bonobo_FIELD_TYPE */
#if !defined(_Bonobo_ContentType_defined)
#define _Bonobo_ContentType_defined 1
   typedef CORBA_string Bonobo_ContentType;
#define Bonobo_ContentType_marshal(x,y,z) CORBA_string_marshal((x),(y),(z))
#define Bonobo_ContentType_demarshal(x,y,z,i) CORBA_string_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Bonobo_ContentType_0)
#define TC_IMPL_TC_Bonobo_ContentType_0 'A'
#define TC_IMPL_TC_Bonobo_ContentType_1 'c'
#define TC_IMPL_TC_Bonobo_ContentType_2 'c'
#define TC_IMPL_TC_Bonobo_ContentType_3 'e'
#define TC_IMPL_TC_Bonobo_ContentType_4 's'
#define TC_IMPL_TC_Bonobo_ContentType_5 's'
#define TC_IMPL_TC_Bonobo_ContentType_6 'i'
#define TC_IMPL_TC_Bonobo_ContentType_7 'b'
#define TC_IMPL_TC_Bonobo_ContentType_8 'i'
#define TC_IMPL_TC_Bonobo_ContentType_9 'l'
#define TC_IMPL_TC_Bonobo_ContentType_10 'i'
#define TC_IMPL_TC_Bonobo_ContentType_11 't'
#define TC_IMPL_TC_Bonobo_ContentType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_ContentType_struct;
#define TC_Bonobo_ContentType ((CORBA_TypeCode)&TC_Bonobo_ContentType_struct)
#endif
#define Bonobo_ContentType__alloc() ((Bonobo_ContentType *)ORBit_small_alloc (TC_CORBA_string))
#define Bonobo_ContentType__freekids(m,d) ORBit_small_freekids (TC_CORBA_string,(m),(d))
#endif
#if !defined(_Bonobo_StorageType_defined)
#define _Bonobo_StorageType_defined 1
   typedef enum {
      Bonobo_STORAGE_TYPE_REGULAR,
      Bonobo_STORAGE_TYPE_DIRECTORY
   } Bonobo_StorageType;
#if !defined(TC_IMPL_TC_Bonobo_StorageType_0)
#define TC_IMPL_TC_Bonobo_StorageType_0 'A'
#define TC_IMPL_TC_Bonobo_StorageType_1 'c'
#define TC_IMPL_TC_Bonobo_StorageType_2 'c'
#define TC_IMPL_TC_Bonobo_StorageType_3 'e'
#define TC_IMPL_TC_Bonobo_StorageType_4 's'
#define TC_IMPL_TC_Bonobo_StorageType_5 's'
#define TC_IMPL_TC_Bonobo_StorageType_6 'i'
#define TC_IMPL_TC_Bonobo_StorageType_7 'b'
#define TC_IMPL_TC_Bonobo_StorageType_8 'i'
#define TC_IMPL_TC_Bonobo_StorageType_9 'l'
#define TC_IMPL_TC_Bonobo_StorageType_10 'i'
#define TC_IMPL_TC_Bonobo_StorageType_11 't'
#define TC_IMPL_TC_Bonobo_StorageType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_StorageType_struct;
#define TC_Bonobo_StorageType ((CORBA_TypeCode)&TC_Bonobo_StorageType_struct)
#endif
#endif
#if !defined(_Bonobo_StorageInfo_defined)
#define _Bonobo_StorageInfo_defined 1
   typedef struct Bonobo_StorageInfo_type Bonobo_StorageInfo;
   struct Bonobo_StorageInfo_type {
      CORBA_string name;
      Bonobo_StorageType type;
      Bonobo_ContentType content_type;
      CORBA_long size;
   };
#if !defined(TC_IMPL_TC_Bonobo_StorageInfo_0)
#define TC_IMPL_TC_Bonobo_StorageInfo_0 'A'
#define TC_IMPL_TC_Bonobo_StorageInfo_1 'c'
#define TC_IMPL_TC_Bonobo_StorageInfo_2 'c'
#define TC_IMPL_TC_Bonobo_StorageInfo_3 'e'
#define TC_IMPL_TC_Bonobo_StorageInfo_4 's'
#define TC_IMPL_TC_Bonobo_StorageInfo_5 's'
#define TC_IMPL_TC_Bonobo_StorageInfo_6 'i'
#define TC_IMPL_TC_Bonobo_StorageInfo_7 'b'
#define TC_IMPL_TC_Bonobo_StorageInfo_8 'i'
#define TC_IMPL_TC_Bonobo_StorageInfo_9 'l'
#define TC_IMPL_TC_Bonobo_StorageInfo_10 'i'
#define TC_IMPL_TC_Bonobo_StorageInfo_11 't'
#define TC_IMPL_TC_Bonobo_StorageInfo_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_StorageInfo_struct;
#define TC_Bonobo_StorageInfo ((CORBA_TypeCode)&TC_Bonobo_StorageInfo_struct)
#endif
#define Bonobo_StorageInfo__alloc() ((Bonobo_StorageInfo *)ORBit_small_alloc (TC_Bonobo_StorageInfo))
#define Bonobo_StorageInfo__freekids(m,d) ORBit_small_freekids (TC_Bonobo_StorageInfo,(m),(d))
#endif
#if !defined(ORBIT_DECL_Bonobo_Stream) && !defined(_Bonobo_Stream_defined)
#define ORBIT_DECL_Bonobo_Stream 1
#define _Bonobo_Stream_defined 1
#define Bonobo_Stream__freekids CORBA_Object__freekids
   typedef CORBA_Object Bonobo_Stream;
   extern CORBA_unsigned_long Bonobo_Stream__classid;
#if !defined(TC_IMPL_TC_Bonobo_Stream_0)
#define TC_IMPL_TC_Bonobo_Stream_0 'A'
#define TC_IMPL_TC_Bonobo_Stream_1 'c'
#define TC_IMPL_TC_Bonobo_Stream_2 'c'
#define TC_IMPL_TC_Bonobo_Stream_3 'e'
#define TC_IMPL_TC_Bonobo_Stream_4 's'
#define TC_IMPL_TC_Bonobo_Stream_5 's'
#define TC_IMPL_TC_Bonobo_Stream_6 'i'
#define TC_IMPL_TC_Bonobo_Stream_7 'b'
#define TC_IMPL_TC_Bonobo_Stream_8 'i'
#define TC_IMPL_TC_Bonobo_Stream_9 'l'
#define TC_IMPL_TC_Bonobo_Stream_10 'i'
#define TC_IMPL_TC_Bonobo_Stream_11 't'
#define TC_IMPL_TC_Bonobo_Stream_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Stream_struct;
#define TC_Bonobo_Stream ((CORBA_TypeCode)&TC_Bonobo_Stream_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_octet)
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'A'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'c'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'c'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_6 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_7 'b'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_8 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_9 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_10 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_11 't'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_12 'y'
#if !defined(_CORBA_sequence_CORBA_octet_defined)
#define _CORBA_sequence_CORBA_octet_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_octet *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_octet;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_octet_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'A'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'c'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'c'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_6 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_7 'b'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_8 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_9 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_10 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_11 't'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_octet_struct;
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
#endif
#define CORBA_sequence_CORBA_octet__alloc() ((CORBA_sequence_CORBA_octet *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
#define CORBA_sequence_CORBA_octet__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
#define CORBA_sequence_CORBA_octet_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
#define CORBA_sequence_CORBA_octet_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
#endif
#if !defined(_Bonobo_Stream_iobuf_defined)
#define _Bonobo_Stream_iobuf_defined 1
   typedef CORBA_sequence_CORBA_octet Bonobo_Stream_iobuf;
#define Bonobo_Stream_iobuf_marshal(x,y,z) CORBA_sequence_CORBA_octet_marshal((x),(y),(z))
#define Bonobo_Stream_iobuf_demarshal(x,y,z,i) CORBA_sequence_CORBA_octet_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Bonobo_Stream_iobuf_0)
#define TC_IMPL_TC_Bonobo_Stream_iobuf_0 'A'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_1 'c'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_2 'c'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_3 'e'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_4 's'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_5 's'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_6 'i'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_7 'b'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_8 'i'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_9 'l'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_10 'i'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_11 't'
#define TC_IMPL_TC_Bonobo_Stream_iobuf_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Stream_iobuf_struct;
#define TC_Bonobo_Stream_iobuf ((CORBA_TypeCode)&TC_Bonobo_Stream_iobuf_struct)
#endif
#define Bonobo_Stream_iobuf__alloc() ((Bonobo_Stream_iobuf *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
#define Bonobo_Stream_iobuf__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
#define Bonobo_Stream_iobuf_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
#endif
#undef ex_Bonobo_Stream_NoPermission
#define ex_Bonobo_Stream_NoPermission "IDL:Bonobo/Stream/NoPermission:1.0"
#if !defined(_Bonobo_Stream_NoPermission_defined)
#define _Bonobo_Stream_NoPermission_defined 1
   typedef struct Bonobo_Stream_NoPermission_type Bonobo_Stream_NoPermission;
   struct Bonobo_Stream_NoPermission_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Stream_NoPermission_0)
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_0 'A'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_1 'c'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_2 'c'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_3 'e'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_4 's'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_5 's'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_6 'i'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_7 'b'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_8 'i'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_9 'l'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_10 'i'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_11 't'
#define TC_IMPL_TC_Bonobo_Stream_NoPermission_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Stream_NoPermission_struct;
#define TC_Bonobo_Stream_NoPermission ((CORBA_TypeCode)&TC_Bonobo_Stream_NoPermission_struct)
#endif
#define Bonobo_Stream_NoPermission__alloc() ((Bonobo_Stream_NoPermission *)ORBit_small_alloc (TC_Bonobo_Stream_NoPermission))
#define Bonobo_Stream_NoPermission__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Stream_NoPermission,(m),(d))
#endif
#undef ex_Bonobo_Stream_NotSupported
#define ex_Bonobo_Stream_NotSupported "IDL:Bonobo/Stream/NotSupported:1.0"
#if !defined(_Bonobo_Stream_NotSupported_defined)
#define _Bonobo_Stream_NotSupported_defined 1
   typedef struct Bonobo_Stream_NotSupported_type Bonobo_Stream_NotSupported;
   struct Bonobo_Stream_NotSupported_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Stream_NotSupported_0)
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_0 'A'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_1 'c'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_2 'c'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_3 'e'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_4 's'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_5 's'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_6 'i'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_7 'b'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_8 'i'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_9 'l'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_10 'i'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_11 't'
#define TC_IMPL_TC_Bonobo_Stream_NotSupported_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Stream_NotSupported_struct;
#define TC_Bonobo_Stream_NotSupported ((CORBA_TypeCode)&TC_Bonobo_Stream_NotSupported_struct)
#endif
#define Bonobo_Stream_NotSupported__alloc() ((Bonobo_Stream_NotSupported *)ORBit_small_alloc (TC_Bonobo_Stream_NotSupported))
#define Bonobo_Stream_NotSupported__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Stream_NotSupported,(m),(d))
#endif
#undef ex_Bonobo_Stream_IOError
#define ex_Bonobo_Stream_IOError "IDL:Bonobo/Stream/IOError:1.0"
#if !defined(_Bonobo_Stream_IOError_defined)
#define _Bonobo_Stream_IOError_defined 1
   typedef struct Bonobo_Stream_IOError_type Bonobo_Stream_IOError;
   struct Bonobo_Stream_IOError_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Stream_IOError_0)
#define TC_IMPL_TC_Bonobo_Stream_IOError_0 'A'
#define TC_IMPL_TC_Bonobo_Stream_IOError_1 'c'
#define TC_IMPL_TC_Bonobo_Stream_IOError_2 'c'
#define TC_IMPL_TC_Bonobo_Stream_IOError_3 'e'
#define TC_IMPL_TC_Bonobo_Stream_IOError_4 's'
#define TC_IMPL_TC_Bonobo_Stream_IOError_5 's'
#define TC_IMPL_TC_Bonobo_Stream_IOError_6 'i'
#define TC_IMPL_TC_Bonobo_Stream_IOError_7 'b'
#define TC_IMPL_TC_Bonobo_Stream_IOError_8 'i'
#define TC_IMPL_TC_Bonobo_Stream_IOError_9 'l'
#define TC_IMPL_TC_Bonobo_Stream_IOError_10 'i'
#define TC_IMPL_TC_Bonobo_Stream_IOError_11 't'
#define TC_IMPL_TC_Bonobo_Stream_IOError_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Stream_IOError_struct;
#define TC_Bonobo_Stream_IOError ((CORBA_TypeCode)&TC_Bonobo_Stream_IOError_struct)
#endif
#define Bonobo_Stream_IOError__alloc() ((Bonobo_Stream_IOError *)ORBit_small_alloc (TC_Bonobo_Stream_IOError))
#define Bonobo_Stream_IOError__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Stream_IOError,(m),(d))
#endif
#if !defined(_Bonobo_Stream_SeekType_defined)
#define _Bonobo_Stream_SeekType_defined 1
   typedef enum {
      Bonobo_Stream_SeekSet,
      Bonobo_Stream_SeekCur,
      Bonobo_Stream_SeekEnd
   } Bonobo_Stream_SeekType;
#if !defined(TC_IMPL_TC_Bonobo_Stream_SeekType_0)
#define TC_IMPL_TC_Bonobo_Stream_SeekType_0 'A'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_1 'c'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_2 'c'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_3 'e'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_4 's'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_5 's'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_6 'i'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_7 'b'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_8 'i'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_9 'l'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_10 'i'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_11 't'
#define TC_IMPL_TC_Bonobo_Stream_SeekType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Stream_SeekType_struct;
#define TC_Bonobo_Stream_SeekType ((CORBA_TypeCode)&TC_Bonobo_Stream_SeekType_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Bonobo_Storage) && !defined(_Bonobo_Storage_defined)
#define ORBIT_DECL_Bonobo_Storage 1
#define _Bonobo_Storage_defined 1
#define Bonobo_Storage__freekids CORBA_Object__freekids
   typedef CORBA_Object Bonobo_Storage;
   extern CORBA_unsigned_long Bonobo_Storage__classid;
#if !defined(TC_IMPL_TC_Bonobo_Storage_0)
#define TC_IMPL_TC_Bonobo_Storage_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_4 's'
#define TC_IMPL_TC_Bonobo_Storage_5 's'
#define TC_IMPL_TC_Bonobo_Storage_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_11 't'
#define TC_IMPL_TC_Bonobo_Storage_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_struct;
#define TC_Bonobo_Storage ((CORBA_TypeCode)&TC_Bonobo_Storage_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Bonobo_StorageInfo)
#define ORBIT_DECL_CORBA_sequence_Bonobo_StorageInfo 1
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_0 'A'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_1 'c'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_2 'c'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_3 'e'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_4 's'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_5 's'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_6 'i'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_7 'b'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_8 'i'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_9 'l'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_10 'i'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_11 't'
#define ORBIT_IMPL_CORBA_sequence_Bonobo_StorageInfo_12 'y'
#if !defined(_CORBA_sequence_Bonobo_StorageInfo_defined)
#define _CORBA_sequence_Bonobo_StorageInfo_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      Bonobo_StorageInfo *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_Bonobo_StorageInfo;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_0)
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_0 'A'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_1 'c'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_2 'c'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_3 'e'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_4 's'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_5 's'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_6 'i'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_7 'b'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_8 'i'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_9 'l'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_10 'i'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_11 't'
#define TC_IMPL_TC_CORBA_sequence_Bonobo_StorageInfo_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_Bonobo_StorageInfo_struct;
#define TC_CORBA_sequence_Bonobo_StorageInfo ((CORBA_TypeCode)&TC_CORBA_sequence_Bonobo_StorageInfo_struct)
#endif
#define CORBA_sequence_Bonobo_StorageInfo__alloc() ((CORBA_sequence_Bonobo_StorageInfo *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_StorageInfo))
#define CORBA_sequence_Bonobo_StorageInfo__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_StorageInfo,(m),(d))
#define CORBA_sequence_Bonobo_StorageInfo_allocbuf(l) ((Bonobo_StorageInfo*)ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_StorageInfo, (l)))
#define CORBA_sequence_Bonobo_StorageInfo_allocbuf(l) ((Bonobo_StorageInfo*)ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_StorageInfo, (l)))
#endif
#if !defined(_Bonobo_Storage_DirectoryList_defined)
#define _Bonobo_Storage_DirectoryList_defined 1
   typedef CORBA_sequence_Bonobo_StorageInfo Bonobo_Storage_DirectoryList;
#define Bonobo_Storage_DirectoryList_marshal(x,y,z) CORBA_sequence_Bonobo_StorageInfo_marshal((x),(y),(z))
#define Bonobo_Storage_DirectoryList_demarshal(x,y,z,i) CORBA_sequence_Bonobo_StorageInfo_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Bonobo_Storage_DirectoryList_0)
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_4 's'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_5 's'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_11 't'
#define TC_IMPL_TC_Bonobo_Storage_DirectoryList_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_DirectoryList_struct;
#define TC_Bonobo_Storage_DirectoryList ((CORBA_TypeCode)&TC_Bonobo_Storage_DirectoryList_struct)
#endif
#define Bonobo_Storage_DirectoryList__alloc() ((Bonobo_Storage_DirectoryList *)ORBit_small_alloc (TC_CORBA_sequence_Bonobo_StorageInfo))
#define Bonobo_Storage_DirectoryList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Bonobo_StorageInfo,(m),(d))
#define Bonobo_Storage_DirectoryList_allocbuf(l) ((Bonobo_StorageInfo*)ORBit_small_allocbuf (TC_CORBA_sequence_Bonobo_StorageInfo, (l)))
#endif
#if !defined(_Bonobo_Storage_OpenMode_defined)
#define _Bonobo_Storage_OpenMode_defined 1
   typedef CORBA_long Bonobo_Storage_OpenMode;
#define Bonobo_Storage_OpenMode_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
#define Bonobo_Storage_OpenMode_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Bonobo_Storage_OpenMode_0)
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_4 's'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_5 's'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_11 't'
#define TC_IMPL_TC_Bonobo_Storage_OpenMode_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_OpenMode_struct;
#define TC_Bonobo_Storage_OpenMode ((CORBA_TypeCode)&TC_Bonobo_Storage_OpenMode_struct)
#endif
#define Bonobo_Storage_OpenMode__alloc() ((Bonobo_Storage_OpenMode *)ORBit_small_alloc (TC_CORBA_long))
#define Bonobo_Storage_OpenMode__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
#endif
#ifndef Bonobo_Storage_READ
#define Bonobo_Storage_READ 1
#endif				/* !Bonobo_Storage_READ */
#ifndef Bonobo_Storage_WRITE
#define Bonobo_Storage_WRITE 2
#endif				/* !Bonobo_Storage_WRITE */
#ifndef Bonobo_Storage_CREATE
#define Bonobo_Storage_CREATE 4
#endif				/* !Bonobo_Storage_CREATE */
#ifndef Bonobo_Storage_FAILIFEXIST
#define Bonobo_Storage_FAILIFEXIST 8
#endif				/* !Bonobo_Storage_FAILIFEXIST */
#ifndef Bonobo_Storage_COMPRESSED
#define Bonobo_Storage_COMPRESSED 16
#endif				/* !Bonobo_Storage_COMPRESSED */
#ifndef Bonobo_Storage_TRANSACTED
#define Bonobo_Storage_TRANSACTED 32
#endif				/* !Bonobo_Storage_TRANSACTED */
#undef ex_Bonobo_Storage_IOError
#define ex_Bonobo_Storage_IOError "IDL:Bonobo/Storage/IOError:1.0"
#if !defined(_Bonobo_Storage_IOError_defined)
#define _Bonobo_Storage_IOError_defined 1
   typedef struct Bonobo_Storage_IOError_type Bonobo_Storage_IOError;
   struct Bonobo_Storage_IOError_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Storage_IOError_0)
#define TC_IMPL_TC_Bonobo_Storage_IOError_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_IOError_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_IOError_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_IOError_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_IOError_4 's'
#define TC_IMPL_TC_Bonobo_Storage_IOError_5 's'
#define TC_IMPL_TC_Bonobo_Storage_IOError_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_IOError_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_IOError_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_IOError_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_IOError_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_IOError_11 't'
#define TC_IMPL_TC_Bonobo_Storage_IOError_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_IOError_struct;
#define TC_Bonobo_Storage_IOError ((CORBA_TypeCode)&TC_Bonobo_Storage_IOError_struct)
#endif
#define Bonobo_Storage_IOError__alloc() ((Bonobo_Storage_IOError *)ORBit_small_alloc (TC_Bonobo_Storage_IOError))
#define Bonobo_Storage_IOError__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_IOError,(m),(d))
#endif
#undef ex_Bonobo_Storage_NameExists
#define ex_Bonobo_Storage_NameExists "IDL:Bonobo/Storage/NameExists:1.0"
#if !defined(_Bonobo_Storage_NameExists_defined)
#define _Bonobo_Storage_NameExists_defined 1
   typedef struct Bonobo_Storage_NameExists_type Bonobo_Storage_NameExists;
   struct Bonobo_Storage_NameExists_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Storage_NameExists_0)
#define TC_IMPL_TC_Bonobo_Storage_NameExists_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_4 's'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_5 's'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_11 't'
#define TC_IMPL_TC_Bonobo_Storage_NameExists_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_NameExists_struct;
#define TC_Bonobo_Storage_NameExists ((CORBA_TypeCode)&TC_Bonobo_Storage_NameExists_struct)
#endif
#define Bonobo_Storage_NameExists__alloc() ((Bonobo_Storage_NameExists *)ORBit_small_alloc (TC_Bonobo_Storage_NameExists))
#define Bonobo_Storage_NameExists__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NameExists,(m),(d))
#endif
#undef ex_Bonobo_Storage_NotFound
#define ex_Bonobo_Storage_NotFound "IDL:Bonobo/Storage/NotFound:1.0"
#if !defined(_Bonobo_Storage_NotFound_defined)
#define _Bonobo_Storage_NotFound_defined 1
   typedef struct Bonobo_Storage_NotFound_type Bonobo_Storage_NotFound;
   struct Bonobo_Storage_NotFound_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Storage_NotFound_0)
#define TC_IMPL_TC_Bonobo_Storage_NotFound_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_4 's'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_5 's'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_11 't'
#define TC_IMPL_TC_Bonobo_Storage_NotFound_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_NotFound_struct;
#define TC_Bonobo_Storage_NotFound ((CORBA_TypeCode)&TC_Bonobo_Storage_NotFound_struct)
#endif
#define Bonobo_Storage_NotFound__alloc() ((Bonobo_Storage_NotFound *)ORBit_small_alloc (TC_Bonobo_Storage_NotFound))
#define Bonobo_Storage_NotFound__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NotFound,(m),(d))
#endif
#undef ex_Bonobo_Storage_NoPermission
#define ex_Bonobo_Storage_NoPermission "IDL:Bonobo/Storage/NoPermission:1.0"
#if !defined(_Bonobo_Storage_NoPermission_defined)
#define _Bonobo_Storage_NoPermission_defined 1
   typedef struct Bonobo_Storage_NoPermission_type Bonobo_Storage_NoPermission;
   struct Bonobo_Storage_NoPermission_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Storage_NoPermission_0)
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_4 's'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_5 's'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_11 't'
#define TC_IMPL_TC_Bonobo_Storage_NoPermission_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_NoPermission_struct;
#define TC_Bonobo_Storage_NoPermission ((CORBA_TypeCode)&TC_Bonobo_Storage_NoPermission_struct)
#endif
#define Bonobo_Storage_NoPermission__alloc() ((Bonobo_Storage_NoPermission *)ORBit_small_alloc (TC_Bonobo_Storage_NoPermission))
#define Bonobo_Storage_NoPermission__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NoPermission,(m),(d))
#endif
#undef ex_Bonobo_Storage_NotSupported
#define ex_Bonobo_Storage_NotSupported "IDL:Bonobo/Storage/NotSupported:1.0"
#if !defined(_Bonobo_Storage_NotSupported_defined)
#define _Bonobo_Storage_NotSupported_defined 1
   typedef struct Bonobo_Storage_NotSupported_type Bonobo_Storage_NotSupported;
   struct Bonobo_Storage_NotSupported_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Storage_NotSupported_0)
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_4 's'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_5 's'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_11 't'
#define TC_IMPL_TC_Bonobo_Storage_NotSupported_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_NotSupported_struct;
#define TC_Bonobo_Storage_NotSupported ((CORBA_TypeCode)&TC_Bonobo_Storage_NotSupported_struct)
#endif
#define Bonobo_Storage_NotSupported__alloc() ((Bonobo_Storage_NotSupported *)ORBit_small_alloc (TC_Bonobo_Storage_NotSupported))
#define Bonobo_Storage_NotSupported__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NotSupported,(m),(d))
#endif
#undef ex_Bonobo_Storage_NotStream
#define ex_Bonobo_Storage_NotStream "IDL:Bonobo/Storage/NotStream:1.0"
#if !defined(_Bonobo_Storage_NotStream_defined)
#define _Bonobo_Storage_NotStream_defined 1
   typedef struct Bonobo_Storage_NotStream_type Bonobo_Storage_NotStream;
   struct Bonobo_Storage_NotStream_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Storage_NotStream_0)
#define TC_IMPL_TC_Bonobo_Storage_NotStream_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_4 's'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_5 's'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_11 't'
#define TC_IMPL_TC_Bonobo_Storage_NotStream_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_NotStream_struct;
#define TC_Bonobo_Storage_NotStream ((CORBA_TypeCode)&TC_Bonobo_Storage_NotStream_struct)
#endif
#define Bonobo_Storage_NotStream__alloc() ((Bonobo_Storage_NotStream *)ORBit_small_alloc (TC_Bonobo_Storage_NotStream))
#define Bonobo_Storage_NotStream__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NotStream,(m),(d))
#endif
#undef ex_Bonobo_Storage_NotStorage
#define ex_Bonobo_Storage_NotStorage "IDL:Bonobo/Storage/NotStorage:1.0"
#if !defined(_Bonobo_Storage_NotStorage_defined)
#define _Bonobo_Storage_NotStorage_defined 1
   typedef struct Bonobo_Storage_NotStorage_type Bonobo_Storage_NotStorage;
   struct Bonobo_Storage_NotStorage_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Storage_NotStorage_0)
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_4 's'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_5 's'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_11 't'
#define TC_IMPL_TC_Bonobo_Storage_NotStorage_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_NotStorage_struct;
#define TC_Bonobo_Storage_NotStorage ((CORBA_TypeCode)&TC_Bonobo_Storage_NotStorage_struct)
#endif
#define Bonobo_Storage_NotStorage__alloc() ((Bonobo_Storage_NotStorage *)ORBit_small_alloc (TC_Bonobo_Storage_NotStorage))
#define Bonobo_Storage_NotStorage__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NotStorage,(m),(d))
#endif
#undef ex_Bonobo_Storage_NotEmpty
#define ex_Bonobo_Storage_NotEmpty "IDL:Bonobo/Storage/NotEmpty:1.0"
#if !defined(_Bonobo_Storage_NotEmpty_defined)
#define _Bonobo_Storage_NotEmpty_defined 1
   typedef struct Bonobo_Storage_NotEmpty_type Bonobo_Storage_NotEmpty;
   struct Bonobo_Storage_NotEmpty_type {
      int dummy;
   };
#if !defined(TC_IMPL_TC_Bonobo_Storage_NotEmpty_0)
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_0 'A'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_1 'c'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_2 'c'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_3 'e'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_4 's'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_5 's'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_6 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_7 'b'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_8 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_9 'l'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_10 'i'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_11 't'
#define TC_IMPL_TC_Bonobo_Storage_NotEmpty_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Bonobo_Storage_NotEmpty_struct;
#define TC_Bonobo_Storage_NotEmpty ((CORBA_TypeCode)&TC_Bonobo_Storage_NotEmpty_struct)
#endif
#define Bonobo_Storage_NotEmpty__alloc() ((Bonobo_Storage_NotEmpty *)ORBit_small_alloc (TC_Bonobo_Storage_NotEmpty))
#define Bonobo_Storage_NotEmpty__freekids(m,d) ORBit_small_freekids (TC_Bonobo_Storage_NotEmpty,(m),(d))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'A'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'c'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'c'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_6 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_7 'b'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_8 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_9 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_10 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_11 't'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_12 'y'
#if !defined(_CORBA_sequence_CORBA_string_defined)
#define _CORBA_sequence_CORBA_string_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_string *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_string;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'A'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'c'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'c'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_6 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_7 'b'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_8 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_9 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_10 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_11 't'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(_Accessibility_StringSeq_defined)
#define _Accessibility_StringSeq_defined 1
   typedef CORBA_sequence_CORBA_string Accessibility_StringSeq;
#define Accessibility_StringSeq_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
#define Accessibility_StringSeq_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Accessibility_StringSeq_0)
#define TC_IMPL_TC_Accessibility_StringSeq_0 'A'
#define TC_IMPL_TC_Accessibility_StringSeq_1 'c'
#define TC_IMPL_TC_Accessibility_StringSeq_2 'c'
#define TC_IMPL_TC_Accessibility_StringSeq_3 'e'
#define TC_IMPL_TC_Accessibility_StringSeq_4 's'
#define TC_IMPL_TC_Accessibility_StringSeq_5 's'
#define TC_IMPL_TC_Accessibility_StringSeq_6 'i'
#define TC_IMPL_TC_Accessibility_StringSeq_7 'b'
#define TC_IMPL_TC_Accessibility_StringSeq_8 'i'
#define TC_IMPL_TC_Accessibility_StringSeq_9 'l'
#define TC_IMPL_TC_Accessibility_StringSeq_10 'i'
#define TC_IMPL_TC_Accessibility_StringSeq_11 't'
#define TC_IMPL_TC_Accessibility_StringSeq_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_StringSeq_struct;
#define TC_Accessibility_StringSeq ((CORBA_TypeCode)&TC_Accessibility_StringSeq_struct)
#endif
#define Accessibility_StringSeq__alloc() ((Accessibility_StringSeq *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define Accessibility_StringSeq__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define Accessibility_StringSeq_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(ORBIT_DECL_Accessibility_StreamableContent) && !defined(_Accessibility_StreamableContent_defined)
#define ORBIT_DECL_Accessibility_StreamableContent 1
#define _Accessibility_StreamableContent_defined 1
#define Accessibility_StreamableContent__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_StreamableContent;
   extern CORBA_unsigned_long Accessibility_StreamableContent__classid;
#if !defined(TC_IMPL_TC_Accessibility_StreamableContent_0)
#define TC_IMPL_TC_Accessibility_StreamableContent_0 'A'
#define TC_IMPL_TC_Accessibility_StreamableContent_1 'c'
#define TC_IMPL_TC_Accessibility_StreamableContent_2 'c'
#define TC_IMPL_TC_Accessibility_StreamableContent_3 'e'
#define TC_IMPL_TC_Accessibility_StreamableContent_4 's'
#define TC_IMPL_TC_Accessibility_StreamableContent_5 's'
#define TC_IMPL_TC_Accessibility_StreamableContent_6 'i'
#define TC_IMPL_TC_Accessibility_StreamableContent_7 'b'
#define TC_IMPL_TC_Accessibility_StreamableContent_8 'i'
#define TC_IMPL_TC_Accessibility_StreamableContent_9 'l'
#define TC_IMPL_TC_Accessibility_StreamableContent_10 'i'
#define TC_IMPL_TC_Accessibility_StreamableContent_11 't'
#define TC_IMPL_TC_Accessibility_StreamableContent_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_StreamableContent_struct;
#define TC_Accessibility_StreamableContent ((CORBA_TypeCode)&TC_Accessibility_StreamableContent_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_long)
#define ORBIT_DECL_CORBA_sequence_CORBA_long 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_0 'A'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_1 'c'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_2 'c'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_3 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_4 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_5 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_6 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_7 'b'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_8 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_9 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_10 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_11 't'
#define ORBIT_IMPL_CORBA_sequence_CORBA_long_12 'y'
#if !defined(_CORBA_sequence_CORBA_long_defined)
#define _CORBA_sequence_CORBA_long_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_long *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_long;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_long_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_0 'A'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_1 'c'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_2 'c'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_3 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_4 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_5 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_6 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_7 'b'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_8 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_9 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_10 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_11 't'
#define TC_IMPL_TC_CORBA_sequence_CORBA_long_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_long_struct;
#define TC_CORBA_sequence_CORBA_long ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_long_struct)
#endif
#define CORBA_sequence_CORBA_long__alloc() ((CORBA_sequence_CORBA_long *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_long))
#define CORBA_sequence_CORBA_long__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_long,(m),(d))
#define CORBA_sequence_CORBA_long_allocbuf(l) ((CORBA_long*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_long, (l)))
#define CORBA_sequence_CORBA_long_allocbuf(l) ((CORBA_long*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_long, (l)))
#endif
#if !defined(_Accessibility_LongSeq_defined)
#define _Accessibility_LongSeq_defined 1
   typedef CORBA_sequence_CORBA_long Accessibility_LongSeq;
#define Accessibility_LongSeq_marshal(x,y,z) CORBA_sequence_CORBA_long_marshal((x),(y),(z))
#define Accessibility_LongSeq_demarshal(x,y,z,i) CORBA_sequence_CORBA_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Accessibility_LongSeq_0)
#define TC_IMPL_TC_Accessibility_LongSeq_0 'A'
#define TC_IMPL_TC_Accessibility_LongSeq_1 'c'
#define TC_IMPL_TC_Accessibility_LongSeq_2 'c'
#define TC_IMPL_TC_Accessibility_LongSeq_3 'e'
#define TC_IMPL_TC_Accessibility_LongSeq_4 's'
#define TC_IMPL_TC_Accessibility_LongSeq_5 's'
#define TC_IMPL_TC_Accessibility_LongSeq_6 'i'
#define TC_IMPL_TC_Accessibility_LongSeq_7 'b'
#define TC_IMPL_TC_Accessibility_LongSeq_8 'i'
#define TC_IMPL_TC_Accessibility_LongSeq_9 'l'
#define TC_IMPL_TC_Accessibility_LongSeq_10 'i'
#define TC_IMPL_TC_Accessibility_LongSeq_11 't'
#define TC_IMPL_TC_Accessibility_LongSeq_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_LongSeq_struct;
#define TC_Accessibility_LongSeq ((CORBA_TypeCode)&TC_Accessibility_LongSeq_struct)
#endif
#define Accessibility_LongSeq__alloc() ((Accessibility_LongSeq *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_long))
#define Accessibility_LongSeq__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_long,(m),(d))
#define Accessibility_LongSeq_allocbuf(l) ((CORBA_long*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_long, (l)))
#endif
#if !defined(ORBIT_DECL_Accessibility_Table) && !defined(_Accessibility_Table_defined)
#define ORBIT_DECL_Accessibility_Table 1
#define _Accessibility_Table_defined 1
#define Accessibility_Table__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Table;
   extern CORBA_unsigned_long Accessibility_Table__classid;
#if !defined(TC_IMPL_TC_Accessibility_Table_0)
#define TC_IMPL_TC_Accessibility_Table_0 'A'
#define TC_IMPL_TC_Accessibility_Table_1 'c'
#define TC_IMPL_TC_Accessibility_Table_2 'c'
#define TC_IMPL_TC_Accessibility_Table_3 'e'
#define TC_IMPL_TC_Accessibility_Table_4 's'
#define TC_IMPL_TC_Accessibility_Table_5 's'
#define TC_IMPL_TC_Accessibility_Table_6 'i'
#define TC_IMPL_TC_Accessibility_Table_7 'b'
#define TC_IMPL_TC_Accessibility_Table_8 'i'
#define TC_IMPL_TC_Accessibility_Table_9 'l'
#define TC_IMPL_TC_Accessibility_Table_10 'i'
#define TC_IMPL_TC_Accessibility_Table_11 't'
#define TC_IMPL_TC_Accessibility_Table_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Table_struct;
#define TC_Accessibility_Table ((CORBA_TypeCode)&TC_Accessibility_Table_struct)
#endif
#endif
#if !defined(_Accessibility_TEXT_BOUNDARY_TYPE_defined)
#define _Accessibility_TEXT_BOUNDARY_TYPE_defined 1
   typedef enum {
      Accessibility_TEXT_BOUNDARY_CHAR,
      Accessibility_TEXT_BOUNDARY_WORD_START,
      Accessibility_TEXT_BOUNDARY_WORD_END,
      Accessibility_TEXT_BOUNDARY_SENTENCE_START,
      Accessibility_TEXT_BOUNDARY_SENTENCE_END,
      Accessibility_TEXT_BOUNDARY_LINE_START,
      Accessibility_TEXT_BOUNDARY_LINE_END
   } Accessibility_TEXT_BOUNDARY_TYPE;
#if !defined(TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_0)
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_0 'A'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_1 'c'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_2 'c'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_3 'e'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_4 's'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_5 's'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_6 'i'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_7 'b'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_8 'i'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_9 'l'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_10 'i'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_11 't'
#define TC_IMPL_TC_Accessibility_TEXT_BOUNDARY_TYPE_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_TEXT_BOUNDARY_TYPE_struct;
#define TC_Accessibility_TEXT_BOUNDARY_TYPE ((CORBA_TypeCode)&TC_Accessibility_TEXT_BOUNDARY_TYPE_struct)
#endif
#endif
#if !defined(_Accessibility_TEXT_CLIP_TYPE_defined)
#define _Accessibility_TEXT_CLIP_TYPE_defined 1
   typedef enum {
      Accessibility_TEXT_CLIP_NONE,
      Accessibility_TEXT_CLIP_MIN,
      Accessibility_TEXT_CLIP_MAX,
      Accessibility_TEXT_CLIP_BOTH
   } Accessibility_TEXT_CLIP_TYPE;
#if !defined(TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_0)
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_0 'A'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_1 'c'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_2 'c'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_3 'e'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_4 's'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_5 's'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_6 'i'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_7 'b'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_8 'i'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_9 'l'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_10 'i'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_11 't'
#define TC_IMPL_TC_Accessibility_TEXT_CLIP_TYPE_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_TEXT_CLIP_TYPE_struct;
#define TC_Accessibility_TEXT_CLIP_TYPE ((CORBA_TypeCode)&TC_Accessibility_TEXT_CLIP_TYPE_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Text) && !defined(_Accessibility_Text_defined)
#define ORBIT_DECL_Accessibility_Text 1
#define _Accessibility_Text_defined 1
#define Accessibility_Text__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Text;
   extern CORBA_unsigned_long Accessibility_Text__classid;
#if !defined(TC_IMPL_TC_Accessibility_Text_0)
#define TC_IMPL_TC_Accessibility_Text_0 'A'
#define TC_IMPL_TC_Accessibility_Text_1 'c'
#define TC_IMPL_TC_Accessibility_Text_2 'c'
#define TC_IMPL_TC_Accessibility_Text_3 'e'
#define TC_IMPL_TC_Accessibility_Text_4 's'
#define TC_IMPL_TC_Accessibility_Text_5 's'
#define TC_IMPL_TC_Accessibility_Text_6 'i'
#define TC_IMPL_TC_Accessibility_Text_7 'b'
#define TC_IMPL_TC_Accessibility_Text_8 'i'
#define TC_IMPL_TC_Accessibility_Text_9 'l'
#define TC_IMPL_TC_Accessibility_Text_10 'i'
#define TC_IMPL_TC_Accessibility_Text_11 't'
#define TC_IMPL_TC_Accessibility_Text_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Text_struct;
#define TC_Accessibility_Text ((CORBA_TypeCode)&TC_Accessibility_Text_struct)
#endif
#endif
#if !defined(_Accessibility_Text_Range_defined)
#define _Accessibility_Text_Range_defined 1
   typedef struct Accessibility_Text_Range_type Accessibility_Text_Range;
   struct Accessibility_Text_Range_type {
      CORBA_long startOffset;
      CORBA_long endOffset;
      CORBA_string content;
      CORBA_any data;
   };
#if !defined(TC_IMPL_TC_Accessibility_Text_Range_0)
#define TC_IMPL_TC_Accessibility_Text_Range_0 'A'
#define TC_IMPL_TC_Accessibility_Text_Range_1 'c'
#define TC_IMPL_TC_Accessibility_Text_Range_2 'c'
#define TC_IMPL_TC_Accessibility_Text_Range_3 'e'
#define TC_IMPL_TC_Accessibility_Text_Range_4 's'
#define TC_IMPL_TC_Accessibility_Text_Range_5 's'
#define TC_IMPL_TC_Accessibility_Text_Range_6 'i'
#define TC_IMPL_TC_Accessibility_Text_Range_7 'b'
#define TC_IMPL_TC_Accessibility_Text_Range_8 'i'
#define TC_IMPL_TC_Accessibility_Text_Range_9 'l'
#define TC_IMPL_TC_Accessibility_Text_Range_10 'i'
#define TC_IMPL_TC_Accessibility_Text_Range_11 't'
#define TC_IMPL_TC_Accessibility_Text_Range_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Text_Range_struct;
#define TC_Accessibility_Text_Range ((CORBA_TypeCode)&TC_Accessibility_Text_Range_struct)
#endif
#define Accessibility_Text_Range__alloc() ((Accessibility_Text_Range *)ORBit_small_alloc (TC_Accessibility_Text_Range))
#define Accessibility_Text_Range__freekids(m,d) ORBit_small_freekids (TC_Accessibility_Text_Range,(m),(d))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Accessibility_Text_Range)
#define ORBIT_DECL_CORBA_sequence_Accessibility_Text_Range 1
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_0 'A'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_1 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_2 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_3 'e'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_4 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_5 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_6 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_7 'b'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_8 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_9 'l'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_10 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_11 't'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Text_Range_12 'y'
#if !defined(_CORBA_sequence_Accessibility_Text_Range_defined)
#define _CORBA_sequence_Accessibility_Text_Range_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      Accessibility_Text_Range *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_Accessibility_Text_Range;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_0)
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_0 'A'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_1 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_2 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_3 'e'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_4 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_5 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_6 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_7 'b'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_8 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_9 'l'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_10 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_11 't'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Text_Range_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_Accessibility_Text_Range_struct;
#define TC_CORBA_sequence_Accessibility_Text_Range ((CORBA_TypeCode)&TC_CORBA_sequence_Accessibility_Text_Range_struct)
#endif
#define CORBA_sequence_Accessibility_Text_Range__alloc() ((CORBA_sequence_Accessibility_Text_Range *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_Text_Range))
#define CORBA_sequence_Accessibility_Text_Range__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_Text_Range,(m),(d))
#define CORBA_sequence_Accessibility_Text_Range_allocbuf(l) ((Accessibility_Text_Range*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_Text_Range, (l)))
#define CORBA_sequence_Accessibility_Text_Range_allocbuf(l) ((Accessibility_Text_Range*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_Text_Range, (l)))
#endif
#if !defined(_Accessibility_Text_RangeList_defined)
#define _Accessibility_Text_RangeList_defined 1
   typedef CORBA_sequence_Accessibility_Text_Range Accessibility_Text_RangeList;
#define Accessibility_Text_RangeList_marshal(x,y,z) CORBA_sequence_Accessibility_Text_Range_marshal((x),(y),(z))
#define Accessibility_Text_RangeList_demarshal(x,y,z,i) CORBA_sequence_Accessibility_Text_Range_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Accessibility_Text_RangeList_0)
#define TC_IMPL_TC_Accessibility_Text_RangeList_0 'A'
#define TC_IMPL_TC_Accessibility_Text_RangeList_1 'c'
#define TC_IMPL_TC_Accessibility_Text_RangeList_2 'c'
#define TC_IMPL_TC_Accessibility_Text_RangeList_3 'e'
#define TC_IMPL_TC_Accessibility_Text_RangeList_4 's'
#define TC_IMPL_TC_Accessibility_Text_RangeList_5 's'
#define TC_IMPL_TC_Accessibility_Text_RangeList_6 'i'
#define TC_IMPL_TC_Accessibility_Text_RangeList_7 'b'
#define TC_IMPL_TC_Accessibility_Text_RangeList_8 'i'
#define TC_IMPL_TC_Accessibility_Text_RangeList_9 'l'
#define TC_IMPL_TC_Accessibility_Text_RangeList_10 'i'
#define TC_IMPL_TC_Accessibility_Text_RangeList_11 't'
#define TC_IMPL_TC_Accessibility_Text_RangeList_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Text_RangeList_struct;
#define TC_Accessibility_Text_RangeList ((CORBA_TypeCode)&TC_Accessibility_Text_RangeList_struct)
#endif
#define Accessibility_Text_RangeList__alloc() ((Accessibility_Text_RangeList *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_Text_Range))
#define Accessibility_Text_RangeList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_Text_Range,(m),(d))
#define Accessibility_Text_RangeList_allocbuf(l) ((Accessibility_Text_Range*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_Text_Range, (l)))
#endif
#if !defined(ORBIT_DECL_Accessibility_Value) && !defined(_Accessibility_Value_defined)
#define ORBIT_DECL_Accessibility_Value 1
#define _Accessibility_Value_defined 1
#define Accessibility_Value__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Value;
   extern CORBA_unsigned_long Accessibility_Value__classid;
#if !defined(TC_IMPL_TC_Accessibility_Value_0)
#define TC_IMPL_TC_Accessibility_Value_0 'A'
#define TC_IMPL_TC_Accessibility_Value_1 'c'
#define TC_IMPL_TC_Accessibility_Value_2 'c'
#define TC_IMPL_TC_Accessibility_Value_3 'e'
#define TC_IMPL_TC_Accessibility_Value_4 's'
#define TC_IMPL_TC_Accessibility_Value_5 's'
#define TC_IMPL_TC_Accessibility_Value_6 'i'
#define TC_IMPL_TC_Accessibility_Value_7 'b'
#define TC_IMPL_TC_Accessibility_Value_8 'i'
#define TC_IMPL_TC_Accessibility_Value_9 'l'
#define TC_IMPL_TC_Accessibility_Value_10 'i'
#define TC_IMPL_TC_Accessibility_Value_11 't'
#define TC_IMPL_TC_Accessibility_Value_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Value_struct;
#define TC_Accessibility_Value ((CORBA_TypeCode)&TC_Accessibility_Value_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_EditableText) && !defined(_Accessibility_EditableText_defined)
#define ORBIT_DECL_Accessibility_EditableText 1
#define _Accessibility_EditableText_defined 1
#define Accessibility_EditableText__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_EditableText;
   extern CORBA_unsigned_long Accessibility_EditableText__classid;
#if !defined(TC_IMPL_TC_Accessibility_EditableText_0)
#define TC_IMPL_TC_Accessibility_EditableText_0 'A'
#define TC_IMPL_TC_Accessibility_EditableText_1 'c'
#define TC_IMPL_TC_Accessibility_EditableText_2 'c'
#define TC_IMPL_TC_Accessibility_EditableText_3 'e'
#define TC_IMPL_TC_Accessibility_EditableText_4 's'
#define TC_IMPL_TC_Accessibility_EditableText_5 's'
#define TC_IMPL_TC_Accessibility_EditableText_6 'i'
#define TC_IMPL_TC_Accessibility_EditableText_7 'b'
#define TC_IMPL_TC_Accessibility_EditableText_8 'i'
#define TC_IMPL_TC_Accessibility_EditableText_9 'l'
#define TC_IMPL_TC_Accessibility_EditableText_10 'i'
#define TC_IMPL_TC_Accessibility_EditableText_11 't'
#define TC_IMPL_TC_Accessibility_EditableText_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_EditableText_struct;
#define TC_Accessibility_EditableText ((CORBA_TypeCode)&TC_Accessibility_EditableText_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Hypertext) && !defined(_Accessibility_Hypertext_defined)
#define ORBIT_DECL_Accessibility_Hypertext 1
#define _Accessibility_Hypertext_defined 1
#define Accessibility_Hypertext__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Hypertext;
   extern CORBA_unsigned_long Accessibility_Hypertext__classid;
#if !defined(TC_IMPL_TC_Accessibility_Hypertext_0)
#define TC_IMPL_TC_Accessibility_Hypertext_0 'A'
#define TC_IMPL_TC_Accessibility_Hypertext_1 'c'
#define TC_IMPL_TC_Accessibility_Hypertext_2 'c'
#define TC_IMPL_TC_Accessibility_Hypertext_3 'e'
#define TC_IMPL_TC_Accessibility_Hypertext_4 's'
#define TC_IMPL_TC_Accessibility_Hypertext_5 's'
#define TC_IMPL_TC_Accessibility_Hypertext_6 'i'
#define TC_IMPL_TC_Accessibility_Hypertext_7 'b'
#define TC_IMPL_TC_Accessibility_Hypertext_8 'i'
#define TC_IMPL_TC_Accessibility_Hypertext_9 'l'
#define TC_IMPL_TC_Accessibility_Hypertext_10 'i'
#define TC_IMPL_TC_Accessibility_Hypertext_11 't'
#define TC_IMPL_TC_Accessibility_Hypertext_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Hypertext_struct;
#define TC_Accessibility_Hypertext ((CORBA_TypeCode)&TC_Accessibility_Hypertext_struct)
#endif
#endif
#if !defined(_Accessibility_LOCALE_TYPE_defined)
#define _Accessibility_LOCALE_TYPE_defined 1
   typedef enum {
      Accessibility_LOCALE_TYPE_MESSAGES,
      Accessibility_LOCALE_TYPE_COLLATE,
      Accessibility_LOCALE_TYPE_CTYPE,
      Accessibility_LOCALE_TYPE_MONETARY,
      Accessibility_LOCALE_TYPE_NUMERIC,
      Accessibility_LOCALE_TYPE_TIME
   } Accessibility_LOCALE_TYPE;
#if !defined(TC_IMPL_TC_Accessibility_LOCALE_TYPE_0)
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_0 'A'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_1 'c'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_2 'c'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_3 'e'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_4 's'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_5 's'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_6 'i'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_7 'b'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_8 'i'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_9 'l'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_10 'i'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_11 't'
#define TC_IMPL_TC_Accessibility_LOCALE_TYPE_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_LOCALE_TYPE_struct;
#define TC_Accessibility_LOCALE_TYPE ((CORBA_TypeCode)&TC_Accessibility_LOCALE_TYPE_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Application) && !defined(_Accessibility_Application_defined)
#define ORBIT_DECL_Accessibility_Application 1
#define _Accessibility_Application_defined 1
#define Accessibility_Application__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Application;
   extern CORBA_unsigned_long Accessibility_Application__classid;
#if !defined(TC_IMPL_TC_Accessibility_Application_0)
#define TC_IMPL_TC_Accessibility_Application_0 'A'
#define TC_IMPL_TC_Accessibility_Application_1 'c'
#define TC_IMPL_TC_Accessibility_Application_2 'c'
#define TC_IMPL_TC_Accessibility_Application_3 'e'
#define TC_IMPL_TC_Accessibility_Application_4 's'
#define TC_IMPL_TC_Accessibility_Application_5 's'
#define TC_IMPL_TC_Accessibility_Application_6 'i'
#define TC_IMPL_TC_Accessibility_Application_7 'b'
#define TC_IMPL_TC_Accessibility_Application_8 'i'
#define TC_IMPL_TC_Accessibility_Application_9 'l'
#define TC_IMPL_TC_Accessibility_Application_10 'i'
#define TC_IMPL_TC_Accessibility_Application_11 't'
#define TC_IMPL_TC_Accessibility_Application_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Application_struct;
#define TC_Accessibility_Application ((CORBA_TypeCode)&TC_Accessibility_Application_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Desktop) && !defined(_Accessibility_Desktop_defined)
#define ORBIT_DECL_Accessibility_Desktop 1
#define _Accessibility_Desktop_defined 1
#define Accessibility_Desktop__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Desktop;
   extern CORBA_unsigned_long Accessibility_Desktop__classid;
#if !defined(TC_IMPL_TC_Accessibility_Desktop_0)
#define TC_IMPL_TC_Accessibility_Desktop_0 'A'
#define TC_IMPL_TC_Accessibility_Desktop_1 'c'
#define TC_IMPL_TC_Accessibility_Desktop_2 'c'
#define TC_IMPL_TC_Accessibility_Desktop_3 'e'
#define TC_IMPL_TC_Accessibility_Desktop_4 's'
#define TC_IMPL_TC_Accessibility_Desktop_5 's'
#define TC_IMPL_TC_Accessibility_Desktop_6 'i'
#define TC_IMPL_TC_Accessibility_Desktop_7 'b'
#define TC_IMPL_TC_Accessibility_Desktop_8 'i'
#define TC_IMPL_TC_Accessibility_Desktop_9 'l'
#define TC_IMPL_TC_Accessibility_Desktop_10 'i'
#define TC_IMPL_TC_Accessibility_Desktop_11 't'
#define TC_IMPL_TC_Accessibility_Desktop_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Desktop_struct;
#define TC_Accessibility_Desktop ((CORBA_TypeCode)&TC_Accessibility_Desktop_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_Object)
#define ORBIT_DECL_CORBA_sequence_CORBA_Object 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_0 'A'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_1 'c'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_2 'c'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_3 'e'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_4 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_5 's'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_6 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_7 'b'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_8 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_9 'l'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_10 'i'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_11 't'
#define ORBIT_IMPL_CORBA_sequence_CORBA_Object_12 'y'
#if !defined(_CORBA_sequence_CORBA_Object_defined)
#define _CORBA_sequence_CORBA_Object_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      CORBA_Object *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_CORBA_Object;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_Object_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_0 'A'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_1 'c'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_2 'c'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_3 'e'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_4 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_5 's'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_6 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_7 'b'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_8 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_9 'l'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_10 'i'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_11 't'
#define TC_IMPL_TC_CORBA_sequence_CORBA_Object_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_Object_struct;
#define TC_CORBA_sequence_CORBA_Object ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_Object_struct)
#endif
#define CORBA_sequence_CORBA_Object__alloc() ((CORBA_sequence_CORBA_Object *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_Object))
#define CORBA_sequence_CORBA_Object__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_Object,(m),(d))
#define CORBA_sequence_CORBA_Object_allocbuf(l) ((CORBA_Object*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_Object, (l)))
#define CORBA_sequence_CORBA_Object_allocbuf(l) ((CORBA_Object*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_Object, (l)))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Accessibility_Desktop)
#define ORBIT_DECL_CORBA_sequence_Accessibility_Desktop 1
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_0 'A'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_1 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_2 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_3 'e'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_4 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_5 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_6 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_7 'b'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_8 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_9 'l'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_10 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_11 't'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_Desktop_12 'y'
#if !defined(_CORBA_sequence_Accessibility_Desktop_defined)
#define _CORBA_sequence_Accessibility_Desktop_defined 1
   typedef CORBA_sequence_CORBA_Object CORBA_sequence_Accessibility_Desktop;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_0)
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_0 'A'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_1 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_2 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_3 'e'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_4 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_5 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_6 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_7 'b'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_8 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_9 'l'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_10 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_11 't'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_Desktop_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_Accessibility_Desktop_struct;
#define TC_CORBA_sequence_Accessibility_Desktop ((CORBA_TypeCode)&TC_CORBA_sequence_Accessibility_Desktop_struct)
#endif
#define CORBA_sequence_Accessibility_Desktop__alloc CORBA_sequence_CORBA_Object__alloc
#define CORBA_sequence_Accessibility_Desktop__freekids CORBA_sequence_CORBA_Object__freekids
#define CORBA_sequence_Accessibility_Desktop_allocbuf CORBA_sequence_CORBA_Object_allocbuf
#define CORBA_sequence_Accessibility_Desktop_marshal(x,y,z) CORBA_sequence_CORBA_Object_marshal((x),(y),(z))
#define CORBA_sequence_Accessibility_Desktop_demarshal(x,y,z,i) CORBA_sequence_CORBA_Object_demarshal((x),(y),(z),(i))
#endif
#if !defined(_Accessibility_DesktopSeq_defined)
#define _Accessibility_DesktopSeq_defined 1
   typedef CORBA_sequence_Accessibility_Desktop Accessibility_DesktopSeq;
#define Accessibility_DesktopSeq_marshal(x,y,z) CORBA_sequence_Accessibility_Desktop_marshal((x),(y),(z))
#define Accessibility_DesktopSeq_demarshal(x,y,z,i) CORBA_sequence_Accessibility_Desktop_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Accessibility_DesktopSeq_0)
#define TC_IMPL_TC_Accessibility_DesktopSeq_0 'A'
#define TC_IMPL_TC_Accessibility_DesktopSeq_1 'c'
#define TC_IMPL_TC_Accessibility_DesktopSeq_2 'c'
#define TC_IMPL_TC_Accessibility_DesktopSeq_3 'e'
#define TC_IMPL_TC_Accessibility_DesktopSeq_4 's'
#define TC_IMPL_TC_Accessibility_DesktopSeq_5 's'
#define TC_IMPL_TC_Accessibility_DesktopSeq_6 'i'
#define TC_IMPL_TC_Accessibility_DesktopSeq_7 'b'
#define TC_IMPL_TC_Accessibility_DesktopSeq_8 'i'
#define TC_IMPL_TC_Accessibility_DesktopSeq_9 'l'
#define TC_IMPL_TC_Accessibility_DesktopSeq_10 'i'
#define TC_IMPL_TC_Accessibility_DesktopSeq_11 't'
#define TC_IMPL_TC_Accessibility_DesktopSeq_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_DesktopSeq_struct;
#define TC_Accessibility_DesktopSeq ((CORBA_TypeCode)&TC_Accessibility_DesktopSeq_struct)
#endif
#define Accessibility_DesktopSeq__alloc() ((Accessibility_DesktopSeq *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_Desktop))
#define Accessibility_DesktopSeq__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_Desktop,(m),(d))
#define Accessibility_DesktopSeq_allocbuf(l) ((Accessibility_Desktop*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_Desktop, (l)))
#endif
#if !defined(ORBIT_DECL_Accessibility_DeviceEventController) && !defined(_Accessibility_DeviceEventController_defined)
#define ORBIT_DECL_Accessibility_DeviceEventController 1
#define _Accessibility_DeviceEventController_defined 1
#define Accessibility_DeviceEventController__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_DeviceEventController;
   extern CORBA_unsigned_long Accessibility_DeviceEventController__classid;
#if !defined(TC_IMPL_TC_Accessibility_DeviceEventController_0)
#define TC_IMPL_TC_Accessibility_DeviceEventController_0 'A'
#define TC_IMPL_TC_Accessibility_DeviceEventController_1 'c'
#define TC_IMPL_TC_Accessibility_DeviceEventController_2 'c'
#define TC_IMPL_TC_Accessibility_DeviceEventController_3 'e'
#define TC_IMPL_TC_Accessibility_DeviceEventController_4 's'
#define TC_IMPL_TC_Accessibility_DeviceEventController_5 's'
#define TC_IMPL_TC_Accessibility_DeviceEventController_6 'i'
#define TC_IMPL_TC_Accessibility_DeviceEventController_7 'b'
#define TC_IMPL_TC_Accessibility_DeviceEventController_8 'i'
#define TC_IMPL_TC_Accessibility_DeviceEventController_9 'l'
#define TC_IMPL_TC_Accessibility_DeviceEventController_10 'i'
#define TC_IMPL_TC_Accessibility_DeviceEventController_11 't'
#define TC_IMPL_TC_Accessibility_DeviceEventController_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_DeviceEventController_struct;
#define TC_Accessibility_DeviceEventController ((CORBA_TypeCode)&TC_Accessibility_DeviceEventController_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_Registry) && !defined(_Accessibility_Registry_defined)
#define ORBIT_DECL_Accessibility_Registry 1
#define _Accessibility_Registry_defined 1
#define Accessibility_Registry__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_Registry;
   extern CORBA_unsigned_long Accessibility_Registry__classid;
#if !defined(TC_IMPL_TC_Accessibility_Registry_0)
#define TC_IMPL_TC_Accessibility_Registry_0 'A'
#define TC_IMPL_TC_Accessibility_Registry_1 'c'
#define TC_IMPL_TC_Accessibility_Registry_2 'c'
#define TC_IMPL_TC_Accessibility_Registry_3 'e'
#define TC_IMPL_TC_Accessibility_Registry_4 's'
#define TC_IMPL_TC_Accessibility_Registry_5 's'
#define TC_IMPL_TC_Accessibility_Registry_6 'i'
#define TC_IMPL_TC_Accessibility_Registry_7 'b'
#define TC_IMPL_TC_Accessibility_Registry_8 'i'
#define TC_IMPL_TC_Accessibility_Registry_9 'l'
#define TC_IMPL_TC_Accessibility_Registry_10 'i'
#define TC_IMPL_TC_Accessibility_Registry_11 't'
#define TC_IMPL_TC_Accessibility_Registry_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_Registry_struct;
#define TC_Accessibility_Registry ((CORBA_TypeCode)&TC_Accessibility_Registry_struct)
#endif
#endif
#if !defined(_Accessibility_KeyEventType_defined)
#define _Accessibility_KeyEventType_defined 1
   typedef enum {
      Accessibility_KEY_PRESSED,
      Accessibility_KEY_RELEASED
   } Accessibility_KeyEventType;
#if !defined(TC_IMPL_TC_Accessibility_KeyEventType_0)
#define TC_IMPL_TC_Accessibility_KeyEventType_0 'A'
#define TC_IMPL_TC_Accessibility_KeyEventType_1 'c'
#define TC_IMPL_TC_Accessibility_KeyEventType_2 'c'
#define TC_IMPL_TC_Accessibility_KeyEventType_3 'e'
#define TC_IMPL_TC_Accessibility_KeyEventType_4 's'
#define TC_IMPL_TC_Accessibility_KeyEventType_5 's'
#define TC_IMPL_TC_Accessibility_KeyEventType_6 'i'
#define TC_IMPL_TC_Accessibility_KeyEventType_7 'b'
#define TC_IMPL_TC_Accessibility_KeyEventType_8 'i'
#define TC_IMPL_TC_Accessibility_KeyEventType_9 'l'
#define TC_IMPL_TC_Accessibility_KeyEventType_10 'i'
#define TC_IMPL_TC_Accessibility_KeyEventType_11 't'
#define TC_IMPL_TC_Accessibility_KeyEventType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_KeyEventType_struct;
#define TC_Accessibility_KeyEventType ((CORBA_TypeCode)&TC_Accessibility_KeyEventType_struct)
#endif
#endif
#if !defined(_Accessibility_EventType_defined)
#define _Accessibility_EventType_defined 1
   typedef enum {
      Accessibility_KEY_PRESSED_EVENT,
      Accessibility_KEY_RELEASED_EVENT,
      Accessibility_BUTTON_PRESSED_EVENT,
      Accessibility_BUTTON_RELEASED_EVENT
   } Accessibility_EventType;
#if !defined(TC_IMPL_TC_Accessibility_EventType_0)
#define TC_IMPL_TC_Accessibility_EventType_0 'A'
#define TC_IMPL_TC_Accessibility_EventType_1 'c'
#define TC_IMPL_TC_Accessibility_EventType_2 'c'
#define TC_IMPL_TC_Accessibility_EventType_3 'e'
#define TC_IMPL_TC_Accessibility_EventType_4 's'
#define TC_IMPL_TC_Accessibility_EventType_5 's'
#define TC_IMPL_TC_Accessibility_EventType_6 'i'
#define TC_IMPL_TC_Accessibility_EventType_7 'b'
#define TC_IMPL_TC_Accessibility_EventType_8 'i'
#define TC_IMPL_TC_Accessibility_EventType_9 'l'
#define TC_IMPL_TC_Accessibility_EventType_10 'i'
#define TC_IMPL_TC_Accessibility_EventType_11 't'
#define TC_IMPL_TC_Accessibility_EventType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_EventType_struct;
#define TC_Accessibility_EventType ((CORBA_TypeCode)&TC_Accessibility_EventType_struct)
#endif
#endif
#if !defined(_Accessibility_KeySynthType_defined)
#define _Accessibility_KeySynthType_defined 1
   typedef enum {
      Accessibility_KEY_PRESS,
      Accessibility_KEY_RELEASE,
      Accessibility_KEY_PRESSRELEASE,
      Accessibility_KEY_SYM,
      Accessibility_KEY_STRING
   } Accessibility_KeySynthType;
#if !defined(TC_IMPL_TC_Accessibility_KeySynthType_0)
#define TC_IMPL_TC_Accessibility_KeySynthType_0 'A'
#define TC_IMPL_TC_Accessibility_KeySynthType_1 'c'
#define TC_IMPL_TC_Accessibility_KeySynthType_2 'c'
#define TC_IMPL_TC_Accessibility_KeySynthType_3 'e'
#define TC_IMPL_TC_Accessibility_KeySynthType_4 's'
#define TC_IMPL_TC_Accessibility_KeySynthType_5 's'
#define TC_IMPL_TC_Accessibility_KeySynthType_6 'i'
#define TC_IMPL_TC_Accessibility_KeySynthType_7 'b'
#define TC_IMPL_TC_Accessibility_KeySynthType_8 'i'
#define TC_IMPL_TC_Accessibility_KeySynthType_9 'l'
#define TC_IMPL_TC_Accessibility_KeySynthType_10 'i'
#define TC_IMPL_TC_Accessibility_KeySynthType_11 't'
#define TC_IMPL_TC_Accessibility_KeySynthType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_KeySynthType_struct;
#define TC_Accessibility_KeySynthType ((CORBA_TypeCode)&TC_Accessibility_KeySynthType_struct)
#endif
#endif
#if !defined(_Accessibility_ModifierType_defined)
#define _Accessibility_ModifierType_defined 1
   typedef enum {
      Accessibility_MODIFIER_SHIFT,
      Accessibility_MODIFIER_SHIFTLOCK,
      Accessibility_MODIFIER_CONTROL,
      Accessibility_MODIFIER_ALT,
      Accessibility_MODIFIER_META,
      Accessibility_MODIFIER_META2,
      Accessibility_MODIFIER_META3,
      Accessibility_MODIFIER_NUMLOCK
   } Accessibility_ModifierType;
#if !defined(TC_IMPL_TC_Accessibility_ModifierType_0)
#define TC_IMPL_TC_Accessibility_ModifierType_0 'A'
#define TC_IMPL_TC_Accessibility_ModifierType_1 'c'
#define TC_IMPL_TC_Accessibility_ModifierType_2 'c'
#define TC_IMPL_TC_Accessibility_ModifierType_3 'e'
#define TC_IMPL_TC_Accessibility_ModifierType_4 's'
#define TC_IMPL_TC_Accessibility_ModifierType_5 's'
#define TC_IMPL_TC_Accessibility_ModifierType_6 'i'
#define TC_IMPL_TC_Accessibility_ModifierType_7 'b'
#define TC_IMPL_TC_Accessibility_ModifierType_8 'i'
#define TC_IMPL_TC_Accessibility_ModifierType_9 'l'
#define TC_IMPL_TC_Accessibility_ModifierType_10 'i'
#define TC_IMPL_TC_Accessibility_ModifierType_11 't'
#define TC_IMPL_TC_Accessibility_ModifierType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_ModifierType_struct;
#define TC_Accessibility_ModifierType ((CORBA_TypeCode)&TC_Accessibility_ModifierType_struct)
#endif
#endif
#if !defined(_Accessibility_EventListenerMode_defined)
#define _Accessibility_EventListenerMode_defined 1
   typedef struct Accessibility_EventListenerMode_type Accessibility_EventListenerMode;
   struct Accessibility_EventListenerMode_type {
      CORBA_boolean synchronous;
      CORBA_boolean preemptive;
      CORBA_boolean global;
   };
#if !defined(TC_IMPL_TC_Accessibility_EventListenerMode_0)
#define TC_IMPL_TC_Accessibility_EventListenerMode_0 'A'
#define TC_IMPL_TC_Accessibility_EventListenerMode_1 'c'
#define TC_IMPL_TC_Accessibility_EventListenerMode_2 'c'
#define TC_IMPL_TC_Accessibility_EventListenerMode_3 'e'
#define TC_IMPL_TC_Accessibility_EventListenerMode_4 's'
#define TC_IMPL_TC_Accessibility_EventListenerMode_5 's'
#define TC_IMPL_TC_Accessibility_EventListenerMode_6 'i'
#define TC_IMPL_TC_Accessibility_EventListenerMode_7 'b'
#define TC_IMPL_TC_Accessibility_EventListenerMode_8 'i'
#define TC_IMPL_TC_Accessibility_EventListenerMode_9 'l'
#define TC_IMPL_TC_Accessibility_EventListenerMode_10 'i'
#define TC_IMPL_TC_Accessibility_EventListenerMode_11 't'
#define TC_IMPL_TC_Accessibility_EventListenerMode_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_EventListenerMode_struct;
#define TC_Accessibility_EventListenerMode ((CORBA_TypeCode)&TC_Accessibility_EventListenerMode_struct)
#endif
#define Accessibility_EventListenerMode__alloc() ((Accessibility_EventListenerMode *)ORBit_small_alloc (TC_Accessibility_EventListenerMode))
#define Accessibility_EventListenerMode__freekids(m,d) ORBit_small_freekids (TC_Accessibility_EventListenerMode,(m),(d))
#endif
#if !defined(_Accessibility_ControllerEventMask_defined)
#define _Accessibility_ControllerEventMask_defined 1
   typedef CORBA_unsigned_long Accessibility_ControllerEventMask;
#define Accessibility_ControllerEventMask_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
#define Accessibility_ControllerEventMask_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Accessibility_ControllerEventMask_0)
#define TC_IMPL_TC_Accessibility_ControllerEventMask_0 'A'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_1 'c'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_2 'c'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_3 'e'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_4 's'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_5 's'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_6 'i'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_7 'b'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_8 'i'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_9 'l'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_10 'i'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_11 't'
#define TC_IMPL_TC_Accessibility_ControllerEventMask_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_ControllerEventMask_struct;
#define TC_Accessibility_ControllerEventMask ((CORBA_TypeCode)&TC_Accessibility_ControllerEventMask_struct)
#endif
#define Accessibility_ControllerEventMask__alloc() ((Accessibility_ControllerEventMask *)ORBit_small_alloc (TC_CORBA_unsigned_long))
#define Accessibility_ControllerEventMask__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
#endif
#if !defined(_Accessibility_DeviceEvent_defined)
#define _Accessibility_DeviceEvent_defined 1
   typedef struct Accessibility_DeviceEvent_type Accessibility_DeviceEvent;
   struct Accessibility_DeviceEvent_type {
      Accessibility_EventType type;
      CORBA_long id;
      CORBA_short hw_code;
      CORBA_unsigned_short modifiers;
      CORBA_unsigned_long timestamp;
      CORBA_string event_string;
      CORBA_boolean is_text;
   };
#if !defined(TC_IMPL_TC_Accessibility_DeviceEvent_0)
#define TC_IMPL_TC_Accessibility_DeviceEvent_0 'A'
#define TC_IMPL_TC_Accessibility_DeviceEvent_1 'c'
#define TC_IMPL_TC_Accessibility_DeviceEvent_2 'c'
#define TC_IMPL_TC_Accessibility_DeviceEvent_3 'e'
#define TC_IMPL_TC_Accessibility_DeviceEvent_4 's'
#define TC_IMPL_TC_Accessibility_DeviceEvent_5 's'
#define TC_IMPL_TC_Accessibility_DeviceEvent_6 'i'
#define TC_IMPL_TC_Accessibility_DeviceEvent_7 'b'
#define TC_IMPL_TC_Accessibility_DeviceEvent_8 'i'
#define TC_IMPL_TC_Accessibility_DeviceEvent_9 'l'
#define TC_IMPL_TC_Accessibility_DeviceEvent_10 'i'
#define TC_IMPL_TC_Accessibility_DeviceEvent_11 't'
#define TC_IMPL_TC_Accessibility_DeviceEvent_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_DeviceEvent_struct;
#define TC_Accessibility_DeviceEvent ((CORBA_TypeCode)&TC_Accessibility_DeviceEvent_struct)
#endif
#define Accessibility_DeviceEvent__alloc() ((Accessibility_DeviceEvent *)ORBit_small_alloc (TC_Accessibility_DeviceEvent))
#define Accessibility_DeviceEvent__freekids(m,d) ORBit_small_freekids (TC_Accessibility_DeviceEvent,(m),(d))
#endif
#if !defined(_Accessibility_KeyDefinition_defined)
#define _Accessibility_KeyDefinition_defined 1
   typedef struct Accessibility_KeyDefinition_type Accessibility_KeyDefinition;
   struct Accessibility_KeyDefinition_type {
      CORBA_long keycode;
      CORBA_long keysym;
      CORBA_string keystring;
      CORBA_long unused;
   };
#if !defined(TC_IMPL_TC_Accessibility_KeyDefinition_0)
#define TC_IMPL_TC_Accessibility_KeyDefinition_0 'A'
#define TC_IMPL_TC_Accessibility_KeyDefinition_1 'c'
#define TC_IMPL_TC_Accessibility_KeyDefinition_2 'c'
#define TC_IMPL_TC_Accessibility_KeyDefinition_3 'e'
#define TC_IMPL_TC_Accessibility_KeyDefinition_4 's'
#define TC_IMPL_TC_Accessibility_KeyDefinition_5 's'
#define TC_IMPL_TC_Accessibility_KeyDefinition_6 'i'
#define TC_IMPL_TC_Accessibility_KeyDefinition_7 'b'
#define TC_IMPL_TC_Accessibility_KeyDefinition_8 'i'
#define TC_IMPL_TC_Accessibility_KeyDefinition_9 'l'
#define TC_IMPL_TC_Accessibility_KeyDefinition_10 'i'
#define TC_IMPL_TC_Accessibility_KeyDefinition_11 't'
#define TC_IMPL_TC_Accessibility_KeyDefinition_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_KeyDefinition_struct;
#define TC_Accessibility_KeyDefinition ((CORBA_TypeCode)&TC_Accessibility_KeyDefinition_struct)
#endif
#define Accessibility_KeyDefinition__alloc() ((Accessibility_KeyDefinition *)ORBit_small_alloc (TC_Accessibility_KeyDefinition))
#define Accessibility_KeyDefinition__freekids(m,d) ORBit_small_freekids (TC_Accessibility_KeyDefinition,(m),(d))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Accessibility_KeyDefinition)
#define ORBIT_DECL_CORBA_sequence_Accessibility_KeyDefinition 1
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_0 'A'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_1 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_2 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_3 'e'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_4 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_5 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_6 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_7 'b'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_8 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_9 'l'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_10 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_11 't'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_KeyDefinition_12 'y'
#if !defined(_CORBA_sequence_Accessibility_KeyDefinition_defined)
#define _CORBA_sequence_Accessibility_KeyDefinition_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      Accessibility_KeyDefinition *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_Accessibility_KeyDefinition;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_0)
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_0 'A'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_1 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_2 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_3 'e'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_4 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_5 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_6 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_7 'b'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_8 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_9 'l'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_10 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_11 't'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_KeyDefinition_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_Accessibility_KeyDefinition_struct;
#define TC_CORBA_sequence_Accessibility_KeyDefinition ((CORBA_TypeCode)&TC_CORBA_sequence_Accessibility_KeyDefinition_struct)
#endif
#define CORBA_sequence_Accessibility_KeyDefinition__alloc() ((CORBA_sequence_Accessibility_KeyDefinition *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_KeyDefinition))
#define CORBA_sequence_Accessibility_KeyDefinition__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_KeyDefinition,(m),(d))
#define CORBA_sequence_Accessibility_KeyDefinition_allocbuf(l) ((Accessibility_KeyDefinition*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_KeyDefinition, (l)))
#define CORBA_sequence_Accessibility_KeyDefinition_allocbuf(l) ((Accessibility_KeyDefinition*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_KeyDefinition, (l)))
#endif
#if !defined(_Accessibility_KeySet_defined)
#define _Accessibility_KeySet_defined 1
   typedef CORBA_sequence_Accessibility_KeyDefinition Accessibility_KeySet;
#define Accessibility_KeySet_marshal(x,y,z) CORBA_sequence_Accessibility_KeyDefinition_marshal((x),(y),(z))
#define Accessibility_KeySet_demarshal(x,y,z,i) CORBA_sequence_Accessibility_KeyDefinition_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Accessibility_KeySet_0)
#define TC_IMPL_TC_Accessibility_KeySet_0 'A'
#define TC_IMPL_TC_Accessibility_KeySet_1 'c'
#define TC_IMPL_TC_Accessibility_KeySet_2 'c'
#define TC_IMPL_TC_Accessibility_KeySet_3 'e'
#define TC_IMPL_TC_Accessibility_KeySet_4 's'
#define TC_IMPL_TC_Accessibility_KeySet_5 's'
#define TC_IMPL_TC_Accessibility_KeySet_6 'i'
#define TC_IMPL_TC_Accessibility_KeySet_7 'b'
#define TC_IMPL_TC_Accessibility_KeySet_8 'i'
#define TC_IMPL_TC_Accessibility_KeySet_9 'l'
#define TC_IMPL_TC_Accessibility_KeySet_10 'i'
#define TC_IMPL_TC_Accessibility_KeySet_11 't'
#define TC_IMPL_TC_Accessibility_KeySet_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_KeySet_struct;
#define TC_Accessibility_KeySet ((CORBA_TypeCode)&TC_Accessibility_KeySet_struct)
#endif
#define Accessibility_KeySet__alloc() ((Accessibility_KeySet *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_KeyDefinition))
#define Accessibility_KeySet__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_KeyDefinition,(m),(d))
#define Accessibility_KeySet_allocbuf(l) ((Accessibility_KeyDefinition*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_KeyDefinition, (l)))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Accessibility_EventType)
#define ORBIT_DECL_CORBA_sequence_Accessibility_EventType 1
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_0 'A'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_1 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_2 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_3 'e'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_4 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_5 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_6 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_7 'b'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_8 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_9 'l'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_10 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_11 't'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_12 'y'
#if !defined(_CORBA_sequence_Accessibility_EventType_defined)
#define _CORBA_sequence_Accessibility_EventType_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      Accessibility_EventType *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_Accessibility_EventType;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_0)
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_0 'A'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_1 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_2 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_3 'e'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_4 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_5 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_6 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_7 'b'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_8 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_9 'l'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_10 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_11 't'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_Accessibility_EventType_struct;
#define TC_CORBA_sequence_Accessibility_EventType ((CORBA_TypeCode)&TC_CORBA_sequence_Accessibility_EventType_struct)
#endif
#define CORBA_sequence_Accessibility_EventType__alloc() ((CORBA_sequence_Accessibility_EventType *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_EventType))
#define CORBA_sequence_Accessibility_EventType__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_EventType,(m),(d))
#define CORBA_sequence_Accessibility_EventType_allocbuf(l) ((Accessibility_EventType*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_EventType, (l)))
#define CORBA_sequence_Accessibility_EventType_allocbuf(l) ((Accessibility_EventType*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_EventType, (l)))
#endif
#if !defined(_Accessibility_KeyEventTypeSeq_defined)
#define _Accessibility_KeyEventTypeSeq_defined 1
   typedef CORBA_sequence_Accessibility_EventType Accessibility_KeyEventTypeSeq;
#define Accessibility_KeyEventTypeSeq_marshal(x,y,z) CORBA_sequence_Accessibility_EventType_marshal((x),(y),(z))
#define Accessibility_KeyEventTypeSeq_demarshal(x,y,z,i) CORBA_sequence_Accessibility_EventType_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Accessibility_KeyEventTypeSeq_0)
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_0 'A'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_1 'c'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_2 'c'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_3 'e'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_4 's'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_5 's'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_6 'i'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_7 'b'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_8 'i'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_9 'l'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_10 'i'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_11 't'
#define TC_IMPL_TC_Accessibility_KeyEventTypeSeq_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_KeyEventTypeSeq_struct;
#define TC_Accessibility_KeyEventTypeSeq ((CORBA_TypeCode)&TC_Accessibility_KeyEventTypeSeq_struct)
#endif
#define Accessibility_KeyEventTypeSeq__alloc() ((Accessibility_KeyEventTypeSeq *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_EventType))
#define Accessibility_KeyEventTypeSeq__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_EventType,(m),(d))
#define Accessibility_KeyEventTypeSeq_allocbuf(l) ((Accessibility_EventType*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_EventType, (l)))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_Accessibility_EventType)
#define ORBIT_DECL_CORBA_sequence_Accessibility_EventType 1
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_0 'A'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_1 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_2 'c'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_3 'e'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_4 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_5 's'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_6 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_7 'b'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_8 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_9 'l'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_10 'i'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_11 't'
#define ORBIT_IMPL_CORBA_sequence_Accessibility_EventType_12 'y'
#if !defined(_CORBA_sequence_Accessibility_EventType_defined)
#define _CORBA_sequence_Accessibility_EventType_defined 1
   typedef struct {
      CORBA_unsigned_long _maximum,
       _length;
      Accessibility_EventType *_buffer;
      CORBA_boolean _release;
   } CORBA_sequence_Accessibility_EventType;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_0)
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_0 'A'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_1 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_2 'c'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_3 'e'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_4 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_5 's'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_6 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_7 'b'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_8 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_9 'l'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_10 'i'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_11 't'
#define TC_IMPL_TC_CORBA_sequence_Accessibility_EventType_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_CORBA_sequence_Accessibility_EventType_struct;
#define TC_CORBA_sequence_Accessibility_EventType ((CORBA_TypeCode)&TC_CORBA_sequence_Accessibility_EventType_struct)
#endif
#define CORBA_sequence_Accessibility_EventType__alloc() ((CORBA_sequence_Accessibility_EventType *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_EventType))
#define CORBA_sequence_Accessibility_EventType__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_EventType,(m),(d))
#define CORBA_sequence_Accessibility_EventType_allocbuf(l) ((Accessibility_EventType*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_EventType, (l)))
#define CORBA_sequence_Accessibility_EventType_allocbuf(l) ((Accessibility_EventType*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_EventType, (l)))
#endif
#if !defined(_Accessibility_EventTypeSeq_defined)
#define _Accessibility_EventTypeSeq_defined 1
   typedef CORBA_sequence_Accessibility_EventType Accessibility_EventTypeSeq;
#define Accessibility_EventTypeSeq_marshal(x,y,z) CORBA_sequence_Accessibility_EventType_marshal((x),(y),(z))
#define Accessibility_EventTypeSeq_demarshal(x,y,z,i) CORBA_sequence_Accessibility_EventType_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Accessibility_EventTypeSeq_0)
#define TC_IMPL_TC_Accessibility_EventTypeSeq_0 'A'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_1 'c'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_2 'c'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_3 'e'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_4 's'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_5 's'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_6 'i'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_7 'b'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_8 'i'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_9 'l'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_10 'i'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_11 't'
#define TC_IMPL_TC_Accessibility_EventTypeSeq_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_EventTypeSeq_struct;
#define TC_Accessibility_EventTypeSeq ((CORBA_TypeCode)&TC_Accessibility_EventTypeSeq_struct)
#endif
#define Accessibility_EventTypeSeq__alloc() ((Accessibility_EventTypeSeq *)ORBit_small_alloc (TC_CORBA_sequence_Accessibility_EventType))
#define Accessibility_EventTypeSeq__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Accessibility_EventType,(m),(d))
#define Accessibility_EventTypeSeq_allocbuf(l) ((Accessibility_EventType*)ORBit_small_allocbuf (TC_CORBA_sequence_Accessibility_EventType, (l)))
#endif
#if !defined(ORBIT_DECL_Accessibility_DeviceEventListener) && !defined(_Accessibility_DeviceEventListener_defined)
#define ORBIT_DECL_Accessibility_DeviceEventListener 1
#define _Accessibility_DeviceEventListener_defined 1
#define Accessibility_DeviceEventListener__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_DeviceEventListener;
   extern CORBA_unsigned_long Accessibility_DeviceEventListener__classid;
#if !defined(TC_IMPL_TC_Accessibility_DeviceEventListener_0)
#define TC_IMPL_TC_Accessibility_DeviceEventListener_0 'A'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_1 'c'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_2 'c'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_3 'e'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_4 's'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_5 's'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_6 'i'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_7 'b'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_8 'i'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_9 'l'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_10 'i'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_11 't'
#define TC_IMPL_TC_Accessibility_DeviceEventListener_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_DeviceEventListener_struct;
#define TC_Accessibility_DeviceEventListener ((CORBA_TypeCode)&TC_Accessibility_DeviceEventListener_struct)
#endif
#endif
#if !defined(ORBIT_DECL_Accessibility_DeviceEventController) && !defined(_Accessibility_DeviceEventController_defined)
#define ORBIT_DECL_Accessibility_DeviceEventController 1
#define _Accessibility_DeviceEventController_defined 1
#define Accessibility_DeviceEventController__freekids CORBA_Object__freekids
   typedef CORBA_Object Accessibility_DeviceEventController;
   extern CORBA_unsigned_long Accessibility_DeviceEventController__classid;
#if !defined(TC_IMPL_TC_Accessibility_DeviceEventController_0)
#define TC_IMPL_TC_Accessibility_DeviceEventController_0 'A'
#define TC_IMPL_TC_Accessibility_DeviceEventController_1 'c'
#define TC_IMPL_TC_Accessibility_DeviceEventController_2 'c'
#define TC_IMPL_TC_Accessibility_DeviceEventController_3 'e'
#define TC_IMPL_TC_Accessibility_DeviceEventController_4 's'
#define TC_IMPL_TC_Accessibility_DeviceEventController_5 's'
#define TC_IMPL_TC_Accessibility_DeviceEventController_6 'i'
#define TC_IMPL_TC_Accessibility_DeviceEventController_7 'b'
#define TC_IMPL_TC_Accessibility_DeviceEventController_8 'i'
#define TC_IMPL_TC_Accessibility_DeviceEventController_9 'l'
#define TC_IMPL_TC_Accessibility_DeviceEventController_10 'i'
#define TC_IMPL_TC_Accessibility_DeviceEventController_11 't'
#define TC_IMPL_TC_Accessibility_DeviceEventController_12 'y'
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   const struct CORBA_TypeCode_struct TC_Accessibility_DeviceEventController_struct;
#define TC_Accessibility_DeviceEventController ((CORBA_TypeCode)&TC_Accessibility_DeviceEventController_struct)
#endif
#endif
   /** POA structures **/
#ifndef _defined_POA_Accessibility_Relation
#define _defined_POA_Accessibility_Relation 1
   typedef struct {
      void *_private;
       Accessibility_RelationType(*getRelationType) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_string(*getRelationTypeName) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_short(*getNTargets) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_Object(*getTarget) (PortableServer_Servant _servant, const CORBA_short index, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Relation__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Relation__epv *Accessibility_Relation_epv;
   } POA_Accessibility_Relation__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Relation__vepv *vepv;
   } POA_Accessibility_Relation;
   extern void POA_Accessibility_Relation__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Relation__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Relation */
#ifndef _defined_POA_Accessibility_StateSet
#define _defined_POA_Accessibility_StateSet 1
   typedef struct {
      void *_private;
       CORBA_boolean(*contains) (PortableServer_Servant _servant, const Accessibility_StateType state, CORBA_Environment * ev);
      void (*add) (PortableServer_Servant _servant, const Accessibility_StateType state, CORBA_Environment * ev);
      void (*remove) (PortableServer_Servant _servant, const Accessibility_StateType state, CORBA_Environment * ev);
       CORBA_boolean(*equals) (PortableServer_Servant _servant, const Accessibility_StateSet stateSet, CORBA_Environment * ev);
       Accessibility_StateSet(*compare) (PortableServer_Servant _servant, const Accessibility_StateSet compareState, CORBA_Environment * ev);
       CORBA_boolean(*isEmpty) (PortableServer_Servant _servant, CORBA_Environment * ev);
      Accessibility_StateSeq *(*getStates) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_StateSet__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_StateSet__epv *Accessibility_StateSet_epv;
   } POA_Accessibility_StateSet__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_StateSet__vepv *vepv;
   } POA_Accessibility_StateSet;
   extern void POA_Accessibility_StateSet__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_StateSet__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_StateSet */
#ifndef _defined_POA_Accessibility_Accessible
#define _defined_POA_Accessibility_Accessible 1
   typedef struct {
      void *_private;
       CORBA_string(*_get_name) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*_set_name) (PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment * ev);
       CORBA_string(*_get_description) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*_set_description) (PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment * ev);
       Accessibility_Accessible(*_get_parent) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_long(*_get_childCount) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_boolean(*isEqual) (PortableServer_Servant _servant, const Accessibility_Accessible obj, CORBA_Environment * ev);
       Accessibility_Accessible(*getChildAtIndex) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev);
       CORBA_long(*getIndexInParent) (PortableServer_Servant _servant, CORBA_Environment * ev);
      Accessibility_RelationSet *(*getRelationSet) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_Role(*getRole) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_string(*getRoleName) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_string(*getLocalizedRoleName) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_StateSet(*getState) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Accessible__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Accessible__epv *Accessibility_Accessible_epv;
   } POA_Accessibility_Accessible__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Accessible__vepv *vepv;
   } POA_Accessibility_Accessible;
   extern void POA_Accessibility_Accessible__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Accessible__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Accessible */
#ifndef _defined_POA_Accessibility_Action
#define _defined_POA_Accessibility_Action 1
   typedef struct {
      void *_private;
       CORBA_long(*_get_nActions) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_string(*getDescription) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev);
       CORBA_string(*getName) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev);
       CORBA_boolean(*doAction) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev);
       CORBA_string(*getKeyBinding) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Action__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Action__epv *Accessibility_Action_epv;
   } POA_Accessibility_Action__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Action__vepv *vepv;
   } POA_Accessibility_Action;
   extern void POA_Accessibility_Action__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Action__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Action */
#ifndef _defined_POA_Accessibility_EventListener
#define _defined_POA_Accessibility_EventListener 1
   typedef struct {
      void *_private;
      void (*notifyEvent) (PortableServer_Servant _servant, const Accessibility_Event * e, CORBA_Environment * ev);
      void (*unImplemented_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4_) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_EventListener__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_EventListener__epv *Accessibility_EventListener_epv;
   } POA_Accessibility_EventListener__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_EventListener__vepv *vepv;
   } POA_Accessibility_EventListener;
   extern void POA_Accessibility_EventListener__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_EventListener__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_EventListener */
#ifndef _defined_POA_Accessibility_Component
#define _defined_POA_Accessibility_Component 1
   typedef struct {
      void *_private;
       CORBA_boolean(*contains) (PortableServer_Servant _servant, const CORBA_long x, const CORBA_long y, const CORBA_short coord_type, CORBA_Environment * ev);
       Accessibility_Accessible(*getAccessibleAtPoint) (PortableServer_Servant _servant, const CORBA_long x, const CORBA_long y, const CORBA_short coord_type, CORBA_Environment * ev);
       Accessibility_BoundingBox(*getExtents) (PortableServer_Servant _servant, const CORBA_short coord_type, CORBA_Environment * ev);
      void (*getPosition) (PortableServer_Servant _servant, CORBA_long * x, CORBA_long * y, const CORBA_short coord_type, CORBA_Environment * ev);
      void (*getSize) (PortableServer_Servant _servant, CORBA_long * width, CORBA_long * height, CORBA_Environment * ev);
       Accessibility_ComponentLayer(*getLayer) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_short(*getMDIZOrder) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_boolean(*grabFocus) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*registerFocusHandler) (PortableServer_Servant _servant, const Accessibility_EventListener handler, CORBA_Environment * ev);
      void (*deregisterFocusHandler) (PortableServer_Servant _servant, const Accessibility_EventListener handler, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Component__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Component__epv *Accessibility_Component_epv;
   } POA_Accessibility_Component__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Component__vepv *vepv;
   } POA_Accessibility_Component;
   extern void POA_Accessibility_Component__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Component__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Component */
#ifndef _defined_POA_Accessibility_Hyperlink
#define _defined_POA_Accessibility_Hyperlink 1
   typedef struct {
      void *_private;
       CORBA_short(*_get_nAnchors) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_long(*_get_startIndex) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_long(*_get_endIndex) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_Accessible(*getObject) (PortableServer_Servant _servant, const CORBA_long i, CORBA_Environment * ev);
       CORBA_string(*getURI) (PortableServer_Servant _servant, const CORBA_long i, CORBA_Environment * ev);
       CORBA_boolean(*isValid) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Hyperlink__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Hyperlink__epv *Accessibility_Hyperlink_epv;
   } POA_Accessibility_Hyperlink__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Hyperlink__vepv *vepv;
   } POA_Accessibility_Hyperlink;
   extern void POA_Accessibility_Hyperlink__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Hyperlink__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Hyperlink */
#ifndef _defined_POA_Accessibility_Image
#define _defined_POA_Accessibility_Image 1
   typedef struct {
      void *_private;
       CORBA_string(*_get_imageDescription) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_BoundingBox(*getImageExtents) (PortableServer_Servant _servant, const CORBA_short coordType, CORBA_Environment * ev);
      void (*getImagePosition) (PortableServer_Servant _servant, CORBA_long * x, CORBA_long * y, const CORBA_short coordType, CORBA_Environment * ev);
      void (*getImageSize) (PortableServer_Servant _servant, CORBA_long * width, CORBA_long * height, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Image__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Image__epv *Accessibility_Image_epv;
   } POA_Accessibility_Image__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Image__vepv *vepv;
   } POA_Accessibility_Image;
   extern void POA_Accessibility_Image__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Image__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Image */
#ifndef _defined_POA_Accessibility_Selection
#define _defined_POA_Accessibility_Selection 1
   typedef struct {
      void *_private;
       CORBA_long(*_get_nSelectedChildren) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_Accessible(*getSelectedChild) (PortableServer_Servant _servant, const CORBA_long selectedChildIndex, CORBA_Environment * ev);
       CORBA_boolean(*selectChild) (PortableServer_Servant _servant, const CORBA_long childIndex, CORBA_Environment * ev);
       CORBA_boolean(*deselectSelectedChild) (PortableServer_Servant _servant, const CORBA_long selectedChildIndex, CORBA_Environment * ev);
       CORBA_boolean(*isChildSelected) (PortableServer_Servant _servant, const CORBA_long childIndex, CORBA_Environment * ev);
       CORBA_boolean(*selectAll) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_boolean(*clearSelection) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Selection__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Selection__epv *Accessibility_Selection_epv;
   } POA_Accessibility_Selection__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Selection__vepv *vepv;
   } POA_Accessibility_Selection;
   extern void POA_Accessibility_Selection__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Selection__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Selection */
#ifndef _defined_POA_Bonobo_Stream
#define _defined_POA_Bonobo_Stream 1
   typedef struct {
      void *_private;
      Bonobo_StorageInfo *(*getInfo) (PortableServer_Servant _servant, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev);
      void (*setInfo) (PortableServer_Servant _servant, const Bonobo_StorageInfo * info, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev);
      void (*read) (PortableServer_Servant _servant, const CORBA_long count, Bonobo_Stream_iobuf ** buffer, CORBA_Environment * ev);
      void (*write) (PortableServer_Servant _servant, const Bonobo_Stream_iobuf * buffer, CORBA_Environment * ev);
       CORBA_long(*seek) (PortableServer_Servant _servant, const CORBA_long offset, const Bonobo_Stream_SeekType whence, CORBA_Environment * ev);
      void (*truncate) (PortableServer_Servant _servant, const CORBA_long length, CORBA_Environment * ev);
      void (*commit) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*revert) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented1) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Bonobo_Stream__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Stream__epv *Bonobo_Stream_epv;
   } POA_Bonobo_Stream__vepv;
   typedef struct {
      void *_private;
      POA_Bonobo_Stream__vepv *vepv;
   } POA_Bonobo_Stream;
   extern void POA_Bonobo_Stream__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Bonobo_Stream__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Bonobo_Stream */
#ifndef _defined_POA_Bonobo_Storage
#define _defined_POA_Bonobo_Storage 1
   typedef struct {
      void *_private;
      Bonobo_StorageInfo *(*getInfo) (PortableServer_Servant _servant, const CORBA_char * path, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev);
      void (*setInfo) (PortableServer_Servant _servant, const CORBA_char * path, const Bonobo_StorageInfo * info, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev);
       Bonobo_Stream(*openStream) (PortableServer_Servant _servant, const CORBA_char * path, const Bonobo_Storage_OpenMode mode, CORBA_Environment * ev);
       Bonobo_Storage(*openStorage) (PortableServer_Servant _servant, const CORBA_char * path, const Bonobo_Storage_OpenMode mode, CORBA_Environment * ev);
      void (*copyTo) (PortableServer_Servant _servant, const Bonobo_Storage target, CORBA_Environment * ev);
      Bonobo_Storage_DirectoryList *(*listContents) (PortableServer_Servant _servant, const CORBA_char * path, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev);
      void (*erase) (PortableServer_Servant _servant, const CORBA_char * path, CORBA_Environment * ev);
      void (*rename) (PortableServer_Servant _servant, const CORBA_char * path_name, const CORBA_char * new_path_name, CORBA_Environment * ev);
      void (*commit) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*revert) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented1) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Bonobo_Storage__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Bonobo_Storage__epv *Bonobo_Storage_epv;
   } POA_Bonobo_Storage__vepv;
   typedef struct {
      void *_private;
      POA_Bonobo_Storage__vepv *vepv;
   } POA_Bonobo_Storage;
   extern void POA_Bonobo_Storage__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Bonobo_Storage__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Bonobo_Storage */
#ifndef _defined_POA_Accessibility_StreamableContent
#define _defined_POA_Accessibility_StreamableContent 1
   typedef struct {
      void *_private;
      Accessibility_StringSeq *(*getContentTypes) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Bonobo_Stream(*getContent) (PortableServer_Servant _servant, const CORBA_char * contentType, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_StreamableContent__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Accessibility_StreamableContent__epv *Accessibility_StreamableContent_epv;
   } POA_Accessibility_StreamableContent__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_StreamableContent__vepv *vepv;
   } POA_Accessibility_StreamableContent;
   extern void POA_Accessibility_StreamableContent__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_StreamableContent__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_StreamableConten
				 * t */
#ifndef _defined_POA_Accessibility_Table
#define _defined_POA_Accessibility_Table 1
   typedef struct {
      void *_private;
       CORBA_long(*_get_nRows) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_long(*_get_nColumns) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_Accessible(*_get_caption) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_Accessible(*_get_summary) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_long(*_get_nSelectedRows) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_long(*_get_nSelectedColumns) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_Accessible(*getAccessibleAt) (PortableServer_Servant _servant, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev);
       CORBA_long(*getIndexAt) (PortableServer_Servant _servant, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev);
       CORBA_long(*getRowAtIndex) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev);
       CORBA_long(*getColumnAtIndex) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev);
       CORBA_string(*getRowDescription) (PortableServer_Servant _servant, const CORBA_long row, CORBA_Environment * ev);
       CORBA_string(*getColumnDescription) (PortableServer_Servant _servant, const CORBA_long column, CORBA_Environment * ev);
       CORBA_long(*getRowExtentAt) (PortableServer_Servant _servant, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev);
       CORBA_long(*getColumnExtentAt) (PortableServer_Servant _servant, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev);
       Accessibility_Accessible(*getRowHeader) (PortableServer_Servant _servant, const CORBA_long row, CORBA_Environment * ev);
       Accessibility_Accessible(*getColumnHeader) (PortableServer_Servant _servant, const CORBA_long column, CORBA_Environment * ev);
      Accessibility_LongSeq *(*getSelectedRows) (PortableServer_Servant _servant, CORBA_Environment * ev);
      Accessibility_LongSeq *(*getSelectedColumns) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_boolean(*isRowSelected) (PortableServer_Servant _servant, const CORBA_long row, CORBA_Environment * ev);
       CORBA_boolean(*isColumnSelected) (PortableServer_Servant _servant, const CORBA_long column, CORBA_Environment * ev);
       CORBA_boolean(*isSelected) (PortableServer_Servant _servant, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev);
       CORBA_boolean(*addRowSelection) (PortableServer_Servant _servant, const CORBA_long row, CORBA_Environment * ev);
       CORBA_boolean(*addColumnSelection) (PortableServer_Servant _servant, const CORBA_long column, CORBA_Environment * ev);
       CORBA_boolean(*removeRowSelection) (PortableServer_Servant _servant, const CORBA_long row, CORBA_Environment * ev);
       CORBA_boolean(*removeColumnSelection) (PortableServer_Servant _servant, const CORBA_long column, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented5) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented6) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented7) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented8) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Table__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Table__epv *Accessibility_Table_epv;
   } POA_Accessibility_Table__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Table__vepv *vepv;
   } POA_Accessibility_Table;
   extern void POA_Accessibility_Table__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Table__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Table */
#ifndef _defined_POA_Accessibility_Text
#define _defined_POA_Accessibility_Text 1
   typedef struct {
      void *_private;
       CORBA_long(*_get_characterCount) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_long(*_get_caretOffset) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_string(*getText) (PortableServer_Servant _servant, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_Environment * ev);
       CORBA_boolean(*setCaretOffset) (PortableServer_Servant _servant, const CORBA_long offset, CORBA_Environment * ev);
       CORBA_string(*getTextBeforeOffset) (PortableServer_Servant _servant, const CORBA_long offset, const Accessibility_TEXT_BOUNDARY_TYPE type, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev);
       CORBA_string(*getTextAtOffset) (PortableServer_Servant _servant, const CORBA_long offset, const Accessibility_TEXT_BOUNDARY_TYPE type, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev);
       CORBA_string(*getTextAfterOffset) (PortableServer_Servant _servant, const CORBA_long offset, const Accessibility_TEXT_BOUNDARY_TYPE type, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev);
       CORBA_unsigned_long(*getCharacterAtOffset) (PortableServer_Servant _servant, const CORBA_long offset, CORBA_Environment * ev);
       CORBA_string(*getAttributes) (PortableServer_Servant _servant, const CORBA_long offset, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev);
       CORBA_string(*getDefaultAttributes) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*getCharacterExtents) (PortableServer_Servant _servant, const CORBA_long offset, CORBA_long * x, CORBA_long * y, CORBA_long * width, CORBA_long * height, const CORBA_short coordType, CORBA_Environment * ev);
       CORBA_long(*getOffsetAtPoint) (PortableServer_Servant _servant, const CORBA_long x, const CORBA_long y, const CORBA_short coordType, CORBA_Environment * ev);
       CORBA_long(*getNSelections) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*getSelection) (PortableServer_Servant _servant, const CORBA_long selectionNum, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev);
       CORBA_boolean(*addSelection) (PortableServer_Servant _servant, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_Environment * ev);
       CORBA_boolean(*removeSelection) (PortableServer_Servant _servant, const CORBA_long selectionNum, CORBA_Environment * ev);
       CORBA_boolean(*setSelection) (PortableServer_Servant _servant, const CORBA_long selectionNum, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_Environment * ev);
      void (*getRangeExtents) (PortableServer_Servant _servant, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_long * x, CORBA_long * y, CORBA_long * width, CORBA_long * height, const CORBA_short coordType, CORBA_Environment * ev);
      Accessibility_Text_RangeList *(*getBoundedRanges) (PortableServer_Servant _servant, const CORBA_long x, const CORBA_long y, const CORBA_long width, const CORBA_long height, const CORBA_short coordType, const Accessibility_TEXT_CLIP_TYPE xClipType, const Accessibility_TEXT_CLIP_TYPE yClipType, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Text__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Text__epv *Accessibility_Text_epv;
   } POA_Accessibility_Text__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Text__vepv *vepv;
   } POA_Accessibility_Text;
   extern void POA_Accessibility_Text__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Text__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Text */
#ifndef _defined_POA_Accessibility_Value
#define _defined_POA_Accessibility_Value 1
   typedef struct {
      void *_private;
       CORBA_double(*_get_minimumValue) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_double(*_get_maximumValue) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_double(*_get_minimumIncrement) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_double(*_get_currentValue) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*_set_currentValue) (PortableServer_Servant _servant, const CORBA_double value, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Value__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Value__epv *Accessibility_Value_epv;
   } POA_Accessibility_Value__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Value__vepv *vepv;
   } POA_Accessibility_Value;
   extern void POA_Accessibility_Value__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Value__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Value */
#ifndef _defined_POA_Accessibility_EditableText
#define _defined_POA_Accessibility_EditableText 1
   typedef struct {
      void *_private;
       CORBA_boolean(*setTextContents) (PortableServer_Servant _servant, const CORBA_char * newContents, CORBA_Environment * ev);
       CORBA_boolean(*insertText) (PortableServer_Servant _servant, const CORBA_long position, const CORBA_char * text, const CORBA_long length, CORBA_Environment * ev);
       CORBA_boolean(*setAttributes) (PortableServer_Servant _servant, const CORBA_char * attributes, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev);
      void (*copyText) (PortableServer_Servant _servant, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev);
       CORBA_boolean(*cutText) (PortableServer_Servant _servant, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev);
       CORBA_boolean(*deleteText) (PortableServer_Servant _servant, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev);
       CORBA_boolean(*pasteText) (PortableServer_Servant _servant, const CORBA_long position, CORBA_Environment * ev);
      void (*unImplemented5) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented6) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented9) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented10) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented11) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented12) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_EditableText__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Text__epv *Accessibility_Text_epv;
      POA_Accessibility_EditableText__epv *Accessibility_EditableText_epv;
   } POA_Accessibility_EditableText__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_EditableText__vepv *vepv;
   } POA_Accessibility_EditableText;
   extern void POA_Accessibility_EditableText__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_EditableText__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_EditableText */
#ifndef _defined_POA_Accessibility_Hypertext
#define _defined_POA_Accessibility_Hypertext 1
   typedef struct {
      void *_private;
       CORBA_long(*getNLinks) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_Hyperlink(*getLink) (PortableServer_Servant _servant, const CORBA_long linkIndex, CORBA_Environment * ev);
       CORBA_long(*getLinkIndex) (PortableServer_Servant _servant, const CORBA_long characterIndex, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Hypertext__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Hypertext__epv *Accessibility_Hypertext_epv;
   } POA_Accessibility_Hypertext__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Hypertext__vepv *vepv;
   } POA_Accessibility_Hypertext;
   extern void POA_Accessibility_Hypertext__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Hypertext__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Hypertext */
#ifndef _defined_POA_Accessibility_Application
#define _defined_POA_Accessibility_Application 1
   typedef struct {
      void *_private;
       CORBA_string(*_get_toolkitName) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_string(*_get_version) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_long(*_get_id) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*_set_id) (PortableServer_Servant _servant, const CORBA_long value, CORBA_Environment * ev);
      void (*registerToolkitEventListener) (PortableServer_Servant _servant, const Accessibility_EventListener listener, const CORBA_char * eventName, CORBA_Environment * ev);
      void (*registerObjectEventListener) (PortableServer_Servant _servant, const Accessibility_EventListener listener, const CORBA_char * eventName, CORBA_Environment * ev);
       CORBA_boolean(*pause) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_boolean(*resume) (PortableServer_Servant _servant, CORBA_Environment * ev);
       CORBA_string(*getLocale) (PortableServer_Servant _servant, const Accessibility_LOCALE_TYPE lctype, CORBA_Environment * ev);
      void (*unImplemented_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3_) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Application__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Accessible__epv *Accessibility_Accessible_epv;
      POA_Accessibility_Application__epv *Accessibility_Application_epv;
   } POA_Accessibility_Application__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Application__vepv *vepv;
   } POA_Accessibility_Application;
   extern void POA_Accessibility_Application__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Application__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Application */
#ifndef _defined_POA_Accessibility_Desktop
#define _defined_POA_Accessibility_Desktop 1
   typedef struct {
      void *_private;
      void (*unImplemented_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4_) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Desktop__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_Accessible__epv *Accessibility_Accessible_epv;
      POA_Accessibility_Desktop__epv *Accessibility_Desktop_epv;
   } POA_Accessibility_Desktop__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Desktop__vepv *vepv;
   } POA_Accessibility_Desktop;
   extern void POA_Accessibility_Desktop__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Desktop__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Desktop */
#ifndef _defined_POA_Accessibility_Registry
#define _defined_POA_Accessibility_Registry 1
   typedef struct {
      void *_private;
      void (*registerApplication) (PortableServer_Servant _servant, const Accessibility_Application application, CORBA_Environment * ev);
      void (*deregisterApplication) (PortableServer_Servant _servant, const Accessibility_Application application, CORBA_Environment * ev);
      void (*registerGlobalEventListener) (PortableServer_Servant _servant, const Accessibility_EventListener listener, const CORBA_char * eventName, CORBA_Environment * ev);
      void (*deregisterGlobalEventListenerAll) (PortableServer_Servant _servant, const Accessibility_EventListener listener, CORBA_Environment * ev);
      void (*deregisterGlobalEventListener) (PortableServer_Servant _servant, const Accessibility_EventListener listener, const CORBA_char * event_name, CORBA_Environment * ev);
       CORBA_short(*getDesktopCount) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_Desktop(*getDesktop) (PortableServer_Servant _servant, const CORBA_short n, CORBA_Environment * ev);
      Accessibility_DesktopSeq *(*getDesktopList) (PortableServer_Servant _servant, CORBA_Environment * ev);
       Accessibility_DeviceEventController(*getDeviceEventController) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented5) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented6) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_Registry__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_EventListener__epv *Accessibility_EventListener_epv;
      POA_Accessibility_Registry__epv *Accessibility_Registry_epv;
   } POA_Accessibility_Registry__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_Registry__vepv *vepv;
   } POA_Accessibility_Registry;
   extern void POA_Accessibility_Registry__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_Registry__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_Registry */
#ifndef _defined_POA_Accessibility_DeviceEventListener
#define _defined_POA_Accessibility_DeviceEventListener 1
   typedef struct {
      void *_private;
       CORBA_boolean(*notifyEvent) (PortableServer_Servant _servant, const Accessibility_DeviceEvent * event, CORBA_Environment * ev);
      void (*unImplemented__) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented_2_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented_3_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented_4_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented_5_) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented_6_) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_DeviceEventListener__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_DeviceEventListener__epv *Accessibility_DeviceEventListener_epv;
   } POA_Accessibility_DeviceEventListener__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_DeviceEventListener__vepv *vepv;
   } POA_Accessibility_DeviceEventListener;
   extern void POA_Accessibility_DeviceEventListener__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_DeviceEventListener__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_DeviceEventListe
				 * ner */
#ifndef _defined_POA_Accessibility_DeviceEventController
#define _defined_POA_Accessibility_DeviceEventController 1
   typedef struct {
      void *_private;
       CORBA_boolean(*registerKeystrokeListener) (PortableServer_Servant _servant, const Accessibility_DeviceEventListener listener, const Accessibility_KeySet * keys, const Accessibility_ControllerEventMask mask, const Accessibility_KeyEventTypeSeq * type, const Accessibility_EventListenerMode * mode, CORBA_Environment * ev);
      void (*deregisterKeystrokeListener) (PortableServer_Servant _servant, const Accessibility_DeviceEventListener listener, const Accessibility_KeySet * keys, const Accessibility_ControllerEventMask mask, const Accessibility_KeyEventTypeSeq * type, CORBA_Environment * ev);
       CORBA_boolean(*registerDeviceEventListener) (PortableServer_Servant _servant, const Accessibility_DeviceEventListener listener, const Accessibility_EventTypeSeq * typeseq, CORBA_Environment * ev);
      void (*deregisterDeviceEventListener) (PortableServer_Servant _servant, const Accessibility_DeviceEventListener listener, const Accessibility_EventTypeSeq * typeseq, CORBA_Environment * ev);
       CORBA_boolean(*notifyListenersSync) (PortableServer_Servant _servant, const Accessibility_DeviceEvent * event, CORBA_Environment * ev);
      void (*notifyListenersAsync) (PortableServer_Servant _servant, const Accessibility_DeviceEvent * event, CORBA_Environment * ev);
      void (*generateKeyboardEvent) (PortableServer_Servant _servant, const CORBA_long keycode, const CORBA_char * keystring, const Accessibility_KeySynthType type, CORBA_Environment * ev);
      void (*generateMouseEvent) (PortableServer_Servant _servant, const CORBA_long x, const CORBA_long y, const CORBA_char * eventName, CORBA_Environment * ev);
      void (*unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev);
      void (*unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev);
   } POA_Accessibility_DeviceEventController__epv;
   typedef struct {
      PortableServer_ServantBase__epv *_base_epv;
      POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
      POA_Accessibility_DeviceEventController__epv *Accessibility_DeviceEventController_epv;
   } POA_Accessibility_DeviceEventController__vepv;
   typedef struct {
      void *_private;
      POA_Accessibility_DeviceEventController__vepv *vepv;
   } POA_Accessibility_DeviceEventController;
   extern void POA_Accessibility_DeviceEventController__init(PortableServer_Servant servant, CORBA_Environment * ev);
   extern void POA_Accessibility_DeviceEventController__fini(PortableServer_Servant servant, CORBA_Environment * ev);
#endif				/* _defined_POA_Accessibility_DeviceEventContr
				 * oller */
   /** skel prototypes **/
   void _ORBIT_skel_small_Accessibility_Relation_getRelationType(POA_Accessibility_Relation * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_RelationType(*_impl_getRelationType) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Relation_getRelationTypeName(POA_Accessibility_Relation * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getRelationTypeName) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Relation_getNTargets(POA_Accessibility_Relation * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_short(*_impl_getNTargets) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Relation_getTarget(POA_Accessibility_Relation * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_Object(*_impl_getTarget) (PortableServer_Servant _servant, const CORBA_short index, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Relation_unImplemented(POA_Accessibility_Relation * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Relation_unImplemented2(POA_Accessibility_Relation * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Relation_unImplemented3(POA_Accessibility_Relation * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Relation_unImplemented4(POA_Accessibility_Relation * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_contains(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_contains) (PortableServer_Servant _servant, const Accessibility_StateType state, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_add(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_add) (PortableServer_Servant _servant, const Accessibility_StateType state, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_remove(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_remove) (PortableServer_Servant _servant, const Accessibility_StateType state, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_equals(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_equals) (PortableServer_Servant _servant, const Accessibility_StateSet stateSet, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_compare(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_StateSet(*_impl_compare) (PortableServer_Servant _servant, const Accessibility_StateSet compareState, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_isEmpty(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_isEmpty) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_getStates(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_StateSeq * (*_impl_getStates) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_unImplemented(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_unImplemented2(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_unImplemented3(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StateSet_unImplemented4(POA_Accessibility_StateSet * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible__get_name(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl__get_name) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible__set_name(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl__set_name) (PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible__get_description(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl__get_description) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible__set_description(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl__set_description) (PortableServer_Servant _servant, const CORBA_char * value, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible__get_parent(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Accessible(*_impl__get_parent) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible__get_childCount(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_childCount) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_isEqual(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_isEqual) (PortableServer_Servant _servant, const Accessibility_Accessible obj, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_getChildAtIndex(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Accessible(*_impl_getChildAtIndex) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_getIndexInParent(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_getIndexInParent) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_getRelationSet(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_RelationSet * (*_impl_getRelationSet) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_getRole(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Role(*_impl_getRole) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_getRoleName(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getRoleName) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_getLocalizedRoleName(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getLocalizedRoleName) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_getState(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_StateSet(*_impl_getState) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_unImplemented(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_unImplemented2(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Accessible_unImplemented3(POA_Accessibility_Accessible * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Action__get_nActions(POA_Accessibility_Action * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_nActions) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Action_getDescription(POA_Accessibility_Action * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getDescription) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Action_getName(POA_Accessibility_Action * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getName) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Action_doAction(POA_Accessibility_Action * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_doAction) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Action_getKeyBinding(POA_Accessibility_Action * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getKeyBinding) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Action_unImplemented(POA_Accessibility_Action * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Action_unImplemented2(POA_Accessibility_Action * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Action_unImplemented3(POA_Accessibility_Action * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Action_unImplemented4(POA_Accessibility_Action * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EventListener_notifyEvent(POA_Accessibility_EventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_notifyEvent) (PortableServer_Servant _servant, const Accessibility_Event * e, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EventListener_unImplemented_(POA_Accessibility_EventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EventListener_unImplemented2_(POA_Accessibility_EventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EventListener_unImplemented3_(POA_Accessibility_EventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EventListener_unImplemented4_(POA_Accessibility_EventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_contains(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_contains) (PortableServer_Servant _servant, const CORBA_long x, const CORBA_long y, const CORBA_short coord_type, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_getAccessibleAtPoint(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Accessible(*_impl_getAccessibleAtPoint) (PortableServer_Servant _servant, const CORBA_long x, const CORBA_long y, const CORBA_short coord_type, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_getExtents(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_BoundingBox(*_impl_getExtents) (PortableServer_Servant _servant, const CORBA_short coord_type, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_getPosition(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_getPosition) (PortableServer_Servant _servant, CORBA_long * x, CORBA_long * y, const CORBA_short coord_type, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_getSize(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_getSize) (PortableServer_Servant _servant, CORBA_long * width, CORBA_long * height, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_getLayer(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_ComponentLayer(*_impl_getLayer) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_getMDIZOrder(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_short(*_impl_getMDIZOrder) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_grabFocus(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_grabFocus) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_registerFocusHandler(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_registerFocusHandler) (PortableServer_Servant _servant, const Accessibility_EventListener handler, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_deregisterFocusHandler(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_deregisterFocusHandler) (PortableServer_Servant _servant, const Accessibility_EventListener handler, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_unImplemented(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_unImplemented2(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_unImplemented3(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Component_unImplemented4(POA_Accessibility_Component * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hyperlink__get_nAnchors(POA_Accessibility_Hyperlink * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_short(*_impl__get_nAnchors) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hyperlink__get_startIndex(POA_Accessibility_Hyperlink * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_startIndex) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hyperlink__get_endIndex(POA_Accessibility_Hyperlink * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_endIndex) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hyperlink_getObject(POA_Accessibility_Hyperlink * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Accessible(*_impl_getObject) (PortableServer_Servant _servant, const CORBA_long i, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hyperlink_getURI(POA_Accessibility_Hyperlink * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getURI) (PortableServer_Servant _servant, const CORBA_long i, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hyperlink_isValid(POA_Accessibility_Hyperlink * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_isValid) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hyperlink_unImplemented(POA_Accessibility_Hyperlink * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hyperlink_unImplemented2(POA_Accessibility_Hyperlink * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hyperlink_unImplemented3(POA_Accessibility_Hyperlink * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hyperlink_unImplemented4(POA_Accessibility_Hyperlink * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Image__get_imageDescription(POA_Accessibility_Image * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl__get_imageDescription) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Image_getImageExtents(POA_Accessibility_Image * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_BoundingBox(*_impl_getImageExtents) (PortableServer_Servant _servant, const CORBA_short coordType, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Image_getImagePosition(POA_Accessibility_Image * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_getImagePosition) (PortableServer_Servant _servant, CORBA_long * x, CORBA_long * y, const CORBA_short coordType, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Image_getImageSize(POA_Accessibility_Image * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_getImageSize) (PortableServer_Servant _servant, CORBA_long * width, CORBA_long * height, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Image_unImplemented(POA_Accessibility_Image * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Image_unImplemented2(POA_Accessibility_Image * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Image_unImplemented3(POA_Accessibility_Image * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Image_unImplemented4(POA_Accessibility_Image * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection__get_nSelectedChildren(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_nSelectedChildren) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection_getSelectedChild(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Accessible(*_impl_getSelectedChild) (PortableServer_Servant _servant, const CORBA_long selectedChildIndex, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection_selectChild(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_selectChild) (PortableServer_Servant _servant, const CORBA_long childIndex, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection_deselectSelectedChild(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_deselectSelectedChild) (PortableServer_Servant _servant, const CORBA_long selectedChildIndex, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection_isChildSelected(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_isChildSelected) (PortableServer_Servant _servant, const CORBA_long childIndex, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection_selectAll(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_selectAll) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection_clearSelection(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_clearSelection) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection_unImplemented(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection_unImplemented2(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection_unImplemented3(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Selection_unImplemented4(POA_Accessibility_Selection * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Stream_getInfo(POA_Bonobo_Stream * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_StorageInfo * (*_impl_getInfo) (PortableServer_Servant _servant, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Stream_setInfo(POA_Bonobo_Stream * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_setInfo) (PortableServer_Servant _servant, const Bonobo_StorageInfo * info, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Stream_read(POA_Bonobo_Stream * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_read) (PortableServer_Servant _servant, const CORBA_long count, Bonobo_Stream_iobuf ** buffer, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Stream_write(POA_Bonobo_Stream * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_write) (PortableServer_Servant _servant, const Bonobo_Stream_iobuf * buffer, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Stream_seek(POA_Bonobo_Stream * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_seek) (PortableServer_Servant _servant, const CORBA_long offset, const Bonobo_Stream_SeekType whence, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Stream_truncate(POA_Bonobo_Stream * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_truncate) (PortableServer_Servant _servant, const CORBA_long length, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Stream_commit(POA_Bonobo_Stream * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_commit) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Stream_revert(POA_Bonobo_Stream * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_revert) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Stream_unImplemented1(POA_Bonobo_Stream * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented1) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Stream_unImplemented2(POA_Bonobo_Stream * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_getInfo(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_StorageInfo * (*_impl_getInfo) (PortableServer_Servant _servant, const CORBA_char * path, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_setInfo(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_setInfo) (PortableServer_Servant _servant, const CORBA_char * path, const Bonobo_StorageInfo * info, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_openStream(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_Stream(*_impl_openStream) (PortableServer_Servant _servant, const CORBA_char * path, const Bonobo_Storage_OpenMode mode, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_openStorage(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_Storage(*_impl_openStorage) (PortableServer_Servant _servant, const CORBA_char * path, const Bonobo_Storage_OpenMode mode, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_copyTo(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_copyTo) (PortableServer_Servant _servant, const Bonobo_Storage target, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_listContents(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_Storage_DirectoryList * (*_impl_listContents) (PortableServer_Servant _servant, const CORBA_char * path, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_erase(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_erase) (PortableServer_Servant _servant, const CORBA_char * path, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_rename(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_rename) (PortableServer_Servant _servant, const CORBA_char * path_name, const CORBA_char * new_path_name, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_commit(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_commit) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_revert(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_revert) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_unImplemented1(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented1) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Bonobo_Storage_unImplemented2(POA_Bonobo_Storage * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StreamableContent_getContentTypes(POA_Accessibility_StreamableContent * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_StringSeq * (*_impl_getContentTypes) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StreamableContent_getContent(POA_Accessibility_StreamableContent * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Bonobo_Stream(*_impl_getContent) (PortableServer_Servant _servant, const CORBA_char * contentType, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StreamableContent_unImplemented(POA_Accessibility_StreamableContent * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StreamableContent_unImplemented2(POA_Accessibility_StreamableContent * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StreamableContent_unImplemented3(POA_Accessibility_StreamableContent * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_StreamableContent_unImplemented4(POA_Accessibility_StreamableContent * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table__get_nRows(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_nRows) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table__get_nColumns(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_nColumns) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table__get_caption(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Accessible(*_impl__get_caption) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table__get_summary(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Accessible(*_impl__get_summary) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table__get_nSelectedRows(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_nSelectedRows) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table__get_nSelectedColumns(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_nSelectedColumns) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getAccessibleAt(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Accessible(*_impl_getAccessibleAt) (PortableServer_Servant _servant, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getIndexAt(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_getIndexAt) (PortableServer_Servant _servant, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getRowAtIndex(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_getRowAtIndex) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getColumnAtIndex(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_getColumnAtIndex) (PortableServer_Servant _servant, const CORBA_long index, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getRowDescription(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getRowDescription) (PortableServer_Servant _servant, const CORBA_long row, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getColumnDescription(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getColumnDescription) (PortableServer_Servant _servant, const CORBA_long column, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getRowExtentAt(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_getRowExtentAt) (PortableServer_Servant _servant, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getColumnExtentAt(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_getColumnExtentAt) (PortableServer_Servant _servant, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getRowHeader(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Accessible(*_impl_getRowHeader) (PortableServer_Servant _servant, const CORBA_long row, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getColumnHeader(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Accessible(*_impl_getColumnHeader) (PortableServer_Servant _servant, const CORBA_long column, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getSelectedRows(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_LongSeq * (*_impl_getSelectedRows) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_getSelectedColumns(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_LongSeq * (*_impl_getSelectedColumns) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_isRowSelected(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_isRowSelected) (PortableServer_Servant _servant, const CORBA_long row, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_isColumnSelected(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_isColumnSelected) (PortableServer_Servant _servant, const CORBA_long column, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_isSelected(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_isSelected) (PortableServer_Servant _servant, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_addRowSelection(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_addRowSelection) (PortableServer_Servant _servant, const CORBA_long row, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_addColumnSelection(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_addColumnSelection) (PortableServer_Servant _servant, const CORBA_long column, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_removeRowSelection(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_removeRowSelection) (PortableServer_Servant _servant, const CORBA_long row, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_removeColumnSelection(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_removeColumnSelection) (PortableServer_Servant _servant, const CORBA_long column, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_unImplemented(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_unImplemented2(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_unImplemented3(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_unImplemented4(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_unImplemented5(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented5) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_unImplemented6(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented6) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_unImplemented7(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented7) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Table_unImplemented8(POA_Accessibility_Table * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented8) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text__get_characterCount(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_characterCount) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text__get_caretOffset(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_caretOffset) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getText(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getText) (PortableServer_Servant _servant, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_setCaretOffset(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_setCaretOffset) (PortableServer_Servant _servant, const CORBA_long offset, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getTextBeforeOffset(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getTextBeforeOffset) (PortableServer_Servant _servant, const CORBA_long offset, const Accessibility_TEXT_BOUNDARY_TYPE type, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getTextAtOffset(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getTextAtOffset) (PortableServer_Servant _servant, const CORBA_long offset, const Accessibility_TEXT_BOUNDARY_TYPE type, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getTextAfterOffset(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getTextAfterOffset) (PortableServer_Servant _servant, const CORBA_long offset, const Accessibility_TEXT_BOUNDARY_TYPE type, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getCharacterAtOffset(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_unsigned_long(*_impl_getCharacterAtOffset) (PortableServer_Servant _servant, const CORBA_long offset, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getAttributes(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getAttributes) (PortableServer_Servant _servant, const CORBA_long offset, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getDefaultAttributes(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getDefaultAttributes) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getCharacterExtents(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_getCharacterExtents) (PortableServer_Servant _servant, const CORBA_long offset, CORBA_long * x, CORBA_long * y, CORBA_long * width, CORBA_long * height, const CORBA_short coordType, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getOffsetAtPoint(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_getOffsetAtPoint) (PortableServer_Servant _servant, const CORBA_long x, const CORBA_long y, const CORBA_short coordType, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getNSelections(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_getNSelections) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getSelection(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_getSelection) (PortableServer_Servant _servant, const CORBA_long selectionNum, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_addSelection(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_addSelection) (PortableServer_Servant _servant, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_removeSelection(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_removeSelection) (PortableServer_Servant _servant, const CORBA_long selectionNum, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_setSelection(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_setSelection) (PortableServer_Servant _servant, const CORBA_long selectionNum, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getRangeExtents(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_getRangeExtents) (PortableServer_Servant _servant, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_long * x, CORBA_long * y, CORBA_long * width, CORBA_long * height, const CORBA_short coordType, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_getBoundedRanges(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Text_RangeList * (*_impl_getBoundedRanges) (PortableServer_Servant _servant, const CORBA_long x, const CORBA_long y, const CORBA_long width, const CORBA_long height, const CORBA_short coordType, const Accessibility_TEXT_CLIP_TYPE xClipType, const Accessibility_TEXT_CLIP_TYPE yClipType, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_unImplemented(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_unImplemented2(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Text_unImplemented3(POA_Accessibility_Text * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Value__get_minimumValue(POA_Accessibility_Value * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_double(*_impl__get_minimumValue) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Value__get_maximumValue(POA_Accessibility_Value * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_double(*_impl__get_maximumValue) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Value__get_minimumIncrement(POA_Accessibility_Value * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_double(*_impl__get_minimumIncrement) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Value__get_currentValue(POA_Accessibility_Value * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_double(*_impl__get_currentValue) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Value__set_currentValue(POA_Accessibility_Value * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl__set_currentValue) (PortableServer_Servant _servant, const CORBA_double value, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Value_unImplemented(POA_Accessibility_Value * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Value_unImplemented2(POA_Accessibility_Value * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Value_unImplemented3(POA_Accessibility_Value * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Value_unImplemented4(POA_Accessibility_Value * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_setTextContents(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_setTextContents) (PortableServer_Servant _servant, const CORBA_char * newContents, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_insertText(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_insertText) (PortableServer_Servant _servant, const CORBA_long position, const CORBA_char * text, const CORBA_long length, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_setAttributes(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_setAttributes) (PortableServer_Servant _servant, const CORBA_char * attributes, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_copyText(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_copyText) (PortableServer_Servant _servant, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_cutText(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_cutText) (PortableServer_Servant _servant, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_deleteText(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_deleteText) (PortableServer_Servant _servant, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_pasteText(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_pasteText) (PortableServer_Servant _servant, const CORBA_long position, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_unImplemented5(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented5) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_unImplemented6(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented6) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_unImplemented9(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented9) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_unImplemented10(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented10) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_unImplemented11(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented11) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_EditableText_unImplemented12(POA_Accessibility_EditableText * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented12) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hypertext_getNLinks(POA_Accessibility_Hypertext * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_getNLinks) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hypertext_getLink(POA_Accessibility_Hypertext * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Hyperlink(*_impl_getLink) (PortableServer_Servant _servant, const CORBA_long linkIndex, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hypertext_getLinkIndex(POA_Accessibility_Hypertext * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl_getLinkIndex) (PortableServer_Servant _servant, const CORBA_long characterIndex, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hypertext_unImplemented(POA_Accessibility_Hypertext * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hypertext_unImplemented2(POA_Accessibility_Hypertext * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hypertext_unImplemented3(POA_Accessibility_Hypertext * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Hypertext_unImplemented4(POA_Accessibility_Hypertext * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application__get_toolkitName(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl__get_toolkitName) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application__get_version(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl__get_version) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application__get_id(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_long(*_impl__get_id) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application__set_id(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl__set_id) (PortableServer_Servant _servant, const CORBA_long value, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application_registerToolkitEventListener(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_registerToolkitEventListener) (PortableServer_Servant _servant, const Accessibility_EventListener listener, const CORBA_char * eventName, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application_registerObjectEventListener(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_registerObjectEventListener) (PortableServer_Servant _servant, const Accessibility_EventListener listener, const CORBA_char * eventName, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application_pause(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_pause) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application_resume(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_resume) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application_getLocale(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_string(*_impl_getLocale) (PortableServer_Servant _servant, const Accessibility_LOCALE_TYPE lctype, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application_unImplemented_(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application_unImplemented2_(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Application_unImplemented3_(POA_Accessibility_Application * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Desktop_unImplemented_(POA_Accessibility_Desktop * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Desktop_unImplemented2_(POA_Accessibility_Desktop * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Desktop_unImplemented3_(POA_Accessibility_Desktop * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Desktop_unImplemented4_(POA_Accessibility_Desktop * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_registerApplication(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_registerApplication) (PortableServer_Servant _servant, const Accessibility_Application application, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_deregisterApplication(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_deregisterApplication) (PortableServer_Servant _servant, const Accessibility_Application application, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_registerGlobalEventListener(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_registerGlobalEventListener) (PortableServer_Servant _servant, const Accessibility_EventListener listener, const CORBA_char * eventName, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_deregisterGlobalEventListenerAll(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_deregisterGlobalEventListenerAll) (PortableServer_Servant _servant, const Accessibility_EventListener listener, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_deregisterGlobalEventListener(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_deregisterGlobalEventListener) (PortableServer_Servant _servant, const Accessibility_EventListener listener, const CORBA_char * event_name, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_getDesktopCount(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_short(*_impl_getDesktopCount) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_getDesktop(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_Desktop(*_impl_getDesktop) (PortableServer_Servant _servant, const CORBA_short n, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_getDesktopList(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_DesktopSeq * (*_impl_getDesktopList) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_getDeviceEventController(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, Accessibility_DeviceEventController(*_impl_getDeviceEventController) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_unImplemented(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_unImplemented2(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_unImplemented3(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_unImplemented4(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_unImplemented5(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented5) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_Registry_unImplemented6(POA_Accessibility_Registry * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented6) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventListener_notifyEvent(POA_Accessibility_DeviceEventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_notifyEvent) (PortableServer_Servant _servant, const Accessibility_DeviceEvent * event, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventListener_unImplemented__(POA_Accessibility_DeviceEventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented__) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventListener_unImplemented_2_(POA_Accessibility_DeviceEventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented_2_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventListener_unImplemented_3_(POA_Accessibility_DeviceEventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented_3_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventListener_unImplemented_4_(POA_Accessibility_DeviceEventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented_4_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventListener_unImplemented_5_(POA_Accessibility_DeviceEventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented_5_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventListener_unImplemented_6_(POA_Accessibility_DeviceEventListener * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented_6_) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_registerKeystrokeListener(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_registerKeystrokeListener) (PortableServer_Servant _servant, const Accessibility_DeviceEventListener listener, const Accessibility_KeySet * keys, const Accessibility_ControllerEventMask mask, const Accessibility_KeyEventTypeSeq * type, const Accessibility_EventListenerMode * mode, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_deregisterKeystrokeListener(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_deregisterKeystrokeListener) (PortableServer_Servant _servant, const Accessibility_DeviceEventListener listener, const Accessibility_KeySet * keys, const Accessibility_ControllerEventMask mask, const Accessibility_KeyEventTypeSeq * type, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_registerDeviceEventListener(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_registerDeviceEventListener) (PortableServer_Servant _servant, const Accessibility_DeviceEventListener listener, const Accessibility_EventTypeSeq * typeseq, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_deregisterDeviceEventListener(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_deregisterDeviceEventListener) (PortableServer_Servant _servant, const Accessibility_DeviceEventListener listener, const Accessibility_EventTypeSeq * typeseq, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_notifyListenersSync(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, CORBA_boolean(*_impl_notifyListenersSync) (PortableServer_Servant _servant, const Accessibility_DeviceEvent * event, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_notifyListenersAsync(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_notifyListenersAsync) (PortableServer_Servant _servant, const Accessibility_DeviceEvent * event, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_generateKeyboardEvent(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_generateKeyboardEvent) (PortableServer_Servant _servant, const CORBA_long keycode, const CORBA_char * keystring, const Accessibility_KeySynthType type, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_generateMouseEvent(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_generateMouseEvent) (PortableServer_Servant _servant, const CORBA_long x, const CORBA_long y, const CORBA_char * eventName, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_unImplemented(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_unImplemented2(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented2) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_unImplemented3(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented3) (PortableServer_Servant _servant, CORBA_Environment * ev));
   void _ORBIT_skel_small_Accessibility_DeviceEventController_unImplemented4(POA_Accessibility_DeviceEventController * _ORBIT_servant, gpointer _ORBIT_retval, gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev, void (*_impl_unImplemented4) (PortableServer_Servant _servant, CORBA_Environment * ev));
   /** stub prototypes **/
#define Accessibility_Relation_ref Bonobo_Unknown_ref
#define Accessibility_Relation_unref Bonobo_Unknown_unref
#define Accessibility_Relation_queryInterface Bonobo_Unknown_queryInterface
   Accessibility_RelationType Accessibility_Relation_getRelationType(Accessibility_Relation _obj, CORBA_Environment * ev);
   CORBA_string Accessibility_Relation_getRelationTypeName(Accessibility_Relation _obj, CORBA_Environment * ev);
   CORBA_short Accessibility_Relation_getNTargets(Accessibility_Relation _obj, CORBA_Environment * ev);
   CORBA_Object Accessibility_Relation_getTarget(Accessibility_Relation _obj, const CORBA_short index, CORBA_Environment * ev);
   void Accessibility_Relation_unImplemented(Accessibility_Relation _obj, CORBA_Environment * ev);
   void Accessibility_Relation_unImplemented2(Accessibility_Relation _obj, CORBA_Environment * ev);
   void Accessibility_Relation_unImplemented3(Accessibility_Relation _obj, CORBA_Environment * ev);
   void Accessibility_Relation_unImplemented4(Accessibility_Relation _obj, CORBA_Environment * ev);
#define Accessibility_StateSet_ref Bonobo_Unknown_ref
#define Accessibility_StateSet_unref Bonobo_Unknown_unref
#define Accessibility_StateSet_queryInterface Bonobo_Unknown_queryInterface
   CORBA_boolean Accessibility_StateSet_contains(Accessibility_StateSet _obj, const Accessibility_StateType state, CORBA_Environment * ev);
   void Accessibility_StateSet_add(Accessibility_StateSet _obj, const Accessibility_StateType state, CORBA_Environment * ev);
   void Accessibility_StateSet_remove(Accessibility_StateSet _obj, const Accessibility_StateType state, CORBA_Environment * ev);
   CORBA_boolean Accessibility_StateSet_equals(Accessibility_StateSet _obj, const Accessibility_StateSet stateSet, CORBA_Environment * ev);
   Accessibility_StateSet Accessibility_StateSet_compare(Accessibility_StateSet _obj, const Accessibility_StateSet compareState, CORBA_Environment * ev);
   CORBA_boolean Accessibility_StateSet_isEmpty(Accessibility_StateSet _obj, CORBA_Environment * ev);
   Accessibility_StateSeq *Accessibility_StateSet_getStates(Accessibility_StateSet _obj, CORBA_Environment * ev);
   void Accessibility_StateSet_unImplemented(Accessibility_StateSet _obj, CORBA_Environment * ev);
   void Accessibility_StateSet_unImplemented2(Accessibility_StateSet _obj, CORBA_Environment * ev);
   void Accessibility_StateSet_unImplemented3(Accessibility_StateSet _obj, CORBA_Environment * ev);
   void Accessibility_StateSet_unImplemented4(Accessibility_StateSet _obj, CORBA_Environment * ev);
#define Accessibility_Accessible_ref Bonobo_Unknown_ref
#define Accessibility_Accessible_unref Bonobo_Unknown_unref
#define Accessibility_Accessible_queryInterface Bonobo_Unknown_queryInterface
   CORBA_string Accessibility_Accessible__get_name(Accessibility_Accessible _obj, CORBA_Environment * ev);
   void Accessibility_Accessible__set_name(Accessibility_Accessible _obj, const CORBA_char * value, CORBA_Environment * ev);
   CORBA_string Accessibility_Accessible__get_description(Accessibility_Accessible _obj, CORBA_Environment * ev);
   void Accessibility_Accessible__set_description(Accessibility_Accessible _obj, const CORBA_char * value, CORBA_Environment * ev);
   Accessibility_Accessible Accessibility_Accessible__get_parent(Accessibility_Accessible _obj, CORBA_Environment * ev);
   CORBA_long Accessibility_Accessible__get_childCount(Accessibility_Accessible _obj, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Accessible_isEqual(Accessibility_Accessible _obj, const Accessibility_Accessible obj, CORBA_Environment * ev);
   Accessibility_Accessible Accessibility_Accessible_getChildAtIndex(Accessibility_Accessible _obj, const CORBA_long index, CORBA_Environment * ev);
   CORBA_long Accessibility_Accessible_getIndexInParent(Accessibility_Accessible _obj, CORBA_Environment * ev);
   Accessibility_RelationSet *Accessibility_Accessible_getRelationSet(Accessibility_Accessible _obj, CORBA_Environment * ev);
   Accessibility_Role Accessibility_Accessible_getRole(Accessibility_Accessible _obj, CORBA_Environment * ev);
   CORBA_string Accessibility_Accessible_getRoleName(Accessibility_Accessible _obj, CORBA_Environment * ev);
   CORBA_string Accessibility_Accessible_getLocalizedRoleName(Accessibility_Accessible _obj, CORBA_Environment * ev);
   Accessibility_StateSet Accessibility_Accessible_getState(Accessibility_Accessible _obj, CORBA_Environment * ev);
   void Accessibility_Accessible_unImplemented(Accessibility_Accessible _obj, CORBA_Environment * ev);
   void Accessibility_Accessible_unImplemented2(Accessibility_Accessible _obj, CORBA_Environment * ev);
   void Accessibility_Accessible_unImplemented3(Accessibility_Accessible _obj, CORBA_Environment * ev);
#define Accessibility_Action_ref Bonobo_Unknown_ref
#define Accessibility_Action_unref Bonobo_Unknown_unref
#define Accessibility_Action_queryInterface Bonobo_Unknown_queryInterface
   CORBA_long Accessibility_Action__get_nActions(Accessibility_Action _obj, CORBA_Environment * ev);
   CORBA_string Accessibility_Action_getDescription(Accessibility_Action _obj, const CORBA_long index, CORBA_Environment * ev);
   CORBA_string Accessibility_Action_getName(Accessibility_Action _obj, const CORBA_long index, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Action_doAction(Accessibility_Action _obj, const CORBA_long index, CORBA_Environment * ev);
   CORBA_string Accessibility_Action_getKeyBinding(Accessibility_Action _obj, const CORBA_long index, CORBA_Environment * ev);
   void Accessibility_Action_unImplemented(Accessibility_Action _obj, CORBA_Environment * ev);
   void Accessibility_Action_unImplemented2(Accessibility_Action _obj, CORBA_Environment * ev);
   void Accessibility_Action_unImplemented3(Accessibility_Action _obj, CORBA_Environment * ev);
   void Accessibility_Action_unImplemented4(Accessibility_Action _obj, CORBA_Environment * ev);
#define Accessibility_EventListener_ref Bonobo_Unknown_ref
#define Accessibility_EventListener_unref Bonobo_Unknown_unref
#define Accessibility_EventListener_queryInterface Bonobo_Unknown_queryInterface
   void Accessibility_EventListener_notifyEvent(Accessibility_EventListener _obj, const Accessibility_Event * e, CORBA_Environment * ev);
   void Accessibility_EventListener_unImplemented_(Accessibility_EventListener _obj, CORBA_Environment * ev);
   void Accessibility_EventListener_unImplemented2_(Accessibility_EventListener _obj, CORBA_Environment * ev);
   void Accessibility_EventListener_unImplemented3_(Accessibility_EventListener _obj, CORBA_Environment * ev);
   void Accessibility_EventListener_unImplemented4_(Accessibility_EventListener _obj, CORBA_Environment * ev);
#define Accessibility_Component_ref Bonobo_Unknown_ref
#define Accessibility_Component_unref Bonobo_Unknown_unref
#define Accessibility_Component_queryInterface Bonobo_Unknown_queryInterface
   CORBA_boolean Accessibility_Component_contains(Accessibility_Component _obj, const CORBA_long x, const CORBA_long y, const CORBA_short coord_type, CORBA_Environment * ev);
   Accessibility_Accessible Accessibility_Component_getAccessibleAtPoint(Accessibility_Component _obj, const CORBA_long x, const CORBA_long y, const CORBA_short coord_type, CORBA_Environment * ev);
   Accessibility_BoundingBox Accessibility_Component_getExtents(Accessibility_Component _obj, const CORBA_short coord_type, CORBA_Environment * ev);
   void Accessibility_Component_getPosition(Accessibility_Component _obj, CORBA_long * x, CORBA_long * y, const CORBA_short coord_type, CORBA_Environment * ev);
   void Accessibility_Component_getSize(Accessibility_Component _obj, CORBA_long * width, CORBA_long * height, CORBA_Environment * ev);
   Accessibility_ComponentLayer Accessibility_Component_getLayer(Accessibility_Component _obj, CORBA_Environment * ev);
   CORBA_short Accessibility_Component_getMDIZOrder(Accessibility_Component _obj, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Component_grabFocus(Accessibility_Component _obj, CORBA_Environment * ev);
   void Accessibility_Component_registerFocusHandler(Accessibility_Component _obj, const Accessibility_EventListener handler, CORBA_Environment * ev);
   void Accessibility_Component_deregisterFocusHandler(Accessibility_Component _obj, const Accessibility_EventListener handler, CORBA_Environment * ev);
   void Accessibility_Component_unImplemented(Accessibility_Component _obj, CORBA_Environment * ev);
   void Accessibility_Component_unImplemented2(Accessibility_Component _obj, CORBA_Environment * ev);
   void Accessibility_Component_unImplemented3(Accessibility_Component _obj, CORBA_Environment * ev);
   void Accessibility_Component_unImplemented4(Accessibility_Component _obj, CORBA_Environment * ev);
#define Accessibility_Hyperlink_ref Bonobo_Unknown_ref
#define Accessibility_Hyperlink_unref Bonobo_Unknown_unref
#define Accessibility_Hyperlink_queryInterface Bonobo_Unknown_queryInterface
   CORBA_short Accessibility_Hyperlink__get_nAnchors(Accessibility_Hyperlink _obj, CORBA_Environment * ev);
   CORBA_long Accessibility_Hyperlink__get_startIndex(Accessibility_Hyperlink _obj, CORBA_Environment * ev);
   CORBA_long Accessibility_Hyperlink__get_endIndex(Accessibility_Hyperlink _obj, CORBA_Environment * ev);
   Accessibility_Accessible Accessibility_Hyperlink_getObject(Accessibility_Hyperlink _obj, const CORBA_long i, CORBA_Environment * ev);
   CORBA_string Accessibility_Hyperlink_getURI(Accessibility_Hyperlink _obj, const CORBA_long i, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Hyperlink_isValid(Accessibility_Hyperlink _obj, CORBA_Environment * ev);
   void Accessibility_Hyperlink_unImplemented(Accessibility_Hyperlink _obj, CORBA_Environment * ev);
   void Accessibility_Hyperlink_unImplemented2(Accessibility_Hyperlink _obj, CORBA_Environment * ev);
   void Accessibility_Hyperlink_unImplemented3(Accessibility_Hyperlink _obj, CORBA_Environment * ev);
   void Accessibility_Hyperlink_unImplemented4(Accessibility_Hyperlink _obj, CORBA_Environment * ev);
#define Accessibility_Image_ref Bonobo_Unknown_ref
#define Accessibility_Image_unref Bonobo_Unknown_unref
#define Accessibility_Image_queryInterface Bonobo_Unknown_queryInterface
   CORBA_string Accessibility_Image__get_imageDescription(Accessibility_Image _obj, CORBA_Environment * ev);
   Accessibility_BoundingBox Accessibility_Image_getImageExtents(Accessibility_Image _obj, const CORBA_short coordType, CORBA_Environment * ev);
   void Accessibility_Image_getImagePosition(Accessibility_Image _obj, CORBA_long * x, CORBA_long * y, const CORBA_short coordType, CORBA_Environment * ev);
   void Accessibility_Image_getImageSize(Accessibility_Image _obj, CORBA_long * width, CORBA_long * height, CORBA_Environment * ev);
   void Accessibility_Image_unImplemented(Accessibility_Image _obj, CORBA_Environment * ev);
   void Accessibility_Image_unImplemented2(Accessibility_Image _obj, CORBA_Environment * ev);
   void Accessibility_Image_unImplemented3(Accessibility_Image _obj, CORBA_Environment * ev);
   void Accessibility_Image_unImplemented4(Accessibility_Image _obj, CORBA_Environment * ev);
#define Accessibility_Selection_ref Bonobo_Unknown_ref
#define Accessibility_Selection_unref Bonobo_Unknown_unref
#define Accessibility_Selection_queryInterface Bonobo_Unknown_queryInterface
   CORBA_long Accessibility_Selection__get_nSelectedChildren(Accessibility_Selection _obj, CORBA_Environment * ev);
   Accessibility_Accessible Accessibility_Selection_getSelectedChild(Accessibility_Selection _obj, const CORBA_long selectedChildIndex, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Selection_selectChild(Accessibility_Selection _obj, const CORBA_long childIndex, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Selection_deselectSelectedChild(Accessibility_Selection _obj, const CORBA_long selectedChildIndex, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Selection_isChildSelected(Accessibility_Selection _obj, const CORBA_long childIndex, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Selection_selectAll(Accessibility_Selection _obj, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Selection_clearSelection(Accessibility_Selection _obj, CORBA_Environment * ev);
   void Accessibility_Selection_unImplemented(Accessibility_Selection _obj, CORBA_Environment * ev);
   void Accessibility_Selection_unImplemented2(Accessibility_Selection _obj, CORBA_Environment * ev);
   void Accessibility_Selection_unImplemented3(Accessibility_Selection _obj, CORBA_Environment * ev);
   void Accessibility_Selection_unImplemented4(Accessibility_Selection _obj, CORBA_Environment * ev);
#define Bonobo_Stream_ref Bonobo_Unknown_ref
#define Bonobo_Stream_unref Bonobo_Unknown_unref
#define Bonobo_Stream_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_StorageInfo *Bonobo_Stream_getInfo(Bonobo_Stream _obj, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev);
   void Bonobo_Stream_setInfo(Bonobo_Stream _obj, const Bonobo_StorageInfo * info, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev);
   void Bonobo_Stream_read(Bonobo_Stream _obj, const CORBA_long count, Bonobo_Stream_iobuf ** buffer, CORBA_Environment * ev);
   void Bonobo_Stream_write(Bonobo_Stream _obj, const Bonobo_Stream_iobuf * buffer, CORBA_Environment * ev);
   CORBA_long Bonobo_Stream_seek(Bonobo_Stream _obj, const CORBA_long offset, const Bonobo_Stream_SeekType whence, CORBA_Environment * ev);
   void Bonobo_Stream_truncate(Bonobo_Stream _obj, const CORBA_long length, CORBA_Environment * ev);
   void Bonobo_Stream_commit(Bonobo_Stream _obj, CORBA_Environment * ev);
   void Bonobo_Stream_revert(Bonobo_Stream _obj, CORBA_Environment * ev);
   void Bonobo_Stream_unImplemented1(Bonobo_Stream _obj, CORBA_Environment * ev);
   void Bonobo_Stream_unImplemented2(Bonobo_Stream _obj, CORBA_Environment * ev);
#define Bonobo_Storage_ref Bonobo_Unknown_ref
#define Bonobo_Storage_unref Bonobo_Unknown_unref
#define Bonobo_Storage_queryInterface Bonobo_Unknown_queryInterface
   Bonobo_StorageInfo *Bonobo_Storage_getInfo(Bonobo_Storage _obj, const CORBA_char * path, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev);
   void Bonobo_Storage_setInfo(Bonobo_Storage _obj, const CORBA_char * path, const Bonobo_StorageInfo * info, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev);
   Bonobo_Stream Bonobo_Storage_openStream(Bonobo_Storage _obj, const CORBA_char * path, const Bonobo_Storage_OpenMode mode, CORBA_Environment * ev);
   Bonobo_Storage Bonobo_Storage_openStorage(Bonobo_Storage _obj, const CORBA_char * path, const Bonobo_Storage_OpenMode mode, CORBA_Environment * ev);
   void Bonobo_Storage_copyTo(Bonobo_Storage _obj, const Bonobo_Storage target, CORBA_Environment * ev);
   Bonobo_Storage_DirectoryList *Bonobo_Storage_listContents(Bonobo_Storage _obj, const CORBA_char * path, const Bonobo_StorageInfoFields mask, CORBA_Environment * ev);
   void Bonobo_Storage_erase(Bonobo_Storage _obj, const CORBA_char * path, CORBA_Environment * ev);
   void Bonobo_Storage_rename(Bonobo_Storage _obj, const CORBA_char * path_name, const CORBA_char * new_path_name, CORBA_Environment * ev);
   void Bonobo_Storage_commit(Bonobo_Storage _obj, CORBA_Environment * ev);
   void Bonobo_Storage_revert(Bonobo_Storage _obj, CORBA_Environment * ev);
   void Bonobo_Storage_unImplemented1(Bonobo_Storage _obj, CORBA_Environment * ev);
   void Bonobo_Storage_unImplemented2(Bonobo_Storage _obj, CORBA_Environment * ev);
   Accessibility_StringSeq *Accessibility_StreamableContent_getContentTypes(Accessibility_StreamableContent _obj, CORBA_Environment * ev);
   Bonobo_Stream Accessibility_StreamableContent_getContent(Accessibility_StreamableContent _obj, const CORBA_char * contentType, CORBA_Environment * ev);
   void Accessibility_StreamableContent_unImplemented(Accessibility_StreamableContent _obj, CORBA_Environment * ev);
   void Accessibility_StreamableContent_unImplemented2(Accessibility_StreamableContent _obj, CORBA_Environment * ev);
   void Accessibility_StreamableContent_unImplemented3(Accessibility_StreamableContent _obj, CORBA_Environment * ev);
   void Accessibility_StreamableContent_unImplemented4(Accessibility_StreamableContent _obj, CORBA_Environment * ev);
#define Accessibility_Table_ref Bonobo_Unknown_ref
#define Accessibility_Table_unref Bonobo_Unknown_unref
#define Accessibility_Table_queryInterface Bonobo_Unknown_queryInterface
   CORBA_long Accessibility_Table__get_nRows(Accessibility_Table _obj, CORBA_Environment * ev);
   CORBA_long Accessibility_Table__get_nColumns(Accessibility_Table _obj, CORBA_Environment * ev);
   Accessibility_Accessible Accessibility_Table__get_caption(Accessibility_Table _obj, CORBA_Environment * ev);
   Accessibility_Accessible Accessibility_Table__get_summary(Accessibility_Table _obj, CORBA_Environment * ev);
   CORBA_long Accessibility_Table__get_nSelectedRows(Accessibility_Table _obj, CORBA_Environment * ev);
   CORBA_long Accessibility_Table__get_nSelectedColumns(Accessibility_Table _obj, CORBA_Environment * ev);
   Accessibility_Accessible Accessibility_Table_getAccessibleAt(Accessibility_Table _obj, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev);
   CORBA_long Accessibility_Table_getIndexAt(Accessibility_Table _obj, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev);
   CORBA_long Accessibility_Table_getRowAtIndex(Accessibility_Table _obj, const CORBA_long index, CORBA_Environment * ev);
   CORBA_long Accessibility_Table_getColumnAtIndex(Accessibility_Table _obj, const CORBA_long index, CORBA_Environment * ev);
   CORBA_string Accessibility_Table_getRowDescription(Accessibility_Table _obj, const CORBA_long row, CORBA_Environment * ev);
   CORBA_string Accessibility_Table_getColumnDescription(Accessibility_Table _obj, const CORBA_long column, CORBA_Environment * ev);
   CORBA_long Accessibility_Table_getRowExtentAt(Accessibility_Table _obj, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev);
   CORBA_long Accessibility_Table_getColumnExtentAt(Accessibility_Table _obj, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev);
   Accessibility_Accessible Accessibility_Table_getRowHeader(Accessibility_Table _obj, const CORBA_long row, CORBA_Environment * ev);
   Accessibility_Accessible Accessibility_Table_getColumnHeader(Accessibility_Table _obj, const CORBA_long column, CORBA_Environment * ev);
   Accessibility_LongSeq *Accessibility_Table_getSelectedRows(Accessibility_Table _obj, CORBA_Environment * ev);
   Accessibility_LongSeq *Accessibility_Table_getSelectedColumns(Accessibility_Table _obj, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Table_isRowSelected(Accessibility_Table _obj, const CORBA_long row, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Table_isColumnSelected(Accessibility_Table _obj, const CORBA_long column, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Table_isSelected(Accessibility_Table _obj, const CORBA_long row, const CORBA_long column, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Table_addRowSelection(Accessibility_Table _obj, const CORBA_long row, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Table_addColumnSelection(Accessibility_Table _obj, const CORBA_long column, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Table_removeRowSelection(Accessibility_Table _obj, const CORBA_long row, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Table_removeColumnSelection(Accessibility_Table _obj, const CORBA_long column, CORBA_Environment * ev);
   void Accessibility_Table_unImplemented(Accessibility_Table _obj, CORBA_Environment * ev);
   void Accessibility_Table_unImplemented2(Accessibility_Table _obj, CORBA_Environment * ev);
   void Accessibility_Table_unImplemented3(Accessibility_Table _obj, CORBA_Environment * ev);
   void Accessibility_Table_unImplemented4(Accessibility_Table _obj, CORBA_Environment * ev);
   void Accessibility_Table_unImplemented5(Accessibility_Table _obj, CORBA_Environment * ev);
   void Accessibility_Table_unImplemented6(Accessibility_Table _obj, CORBA_Environment * ev);
   void Accessibility_Table_unImplemented7(Accessibility_Table _obj, CORBA_Environment * ev);
   void Accessibility_Table_unImplemented8(Accessibility_Table _obj, CORBA_Environment * ev);
#define Accessibility_Text_ref Bonobo_Unknown_ref
#define Accessibility_Text_unref Bonobo_Unknown_unref
#define Accessibility_Text_queryInterface Bonobo_Unknown_queryInterface
   CORBA_long Accessibility_Text__get_characterCount(Accessibility_Text _obj, CORBA_Environment * ev);
   CORBA_long Accessibility_Text__get_caretOffset(Accessibility_Text _obj, CORBA_Environment * ev);
   CORBA_string Accessibility_Text_getText(Accessibility_Text _obj, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Text_setCaretOffset(Accessibility_Text _obj, const CORBA_long offset, CORBA_Environment * ev);
   CORBA_string Accessibility_Text_getTextBeforeOffset(Accessibility_Text _obj, const CORBA_long offset, const Accessibility_TEXT_BOUNDARY_TYPE type, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev);
   CORBA_string Accessibility_Text_getTextAtOffset(Accessibility_Text _obj, const CORBA_long offset, const Accessibility_TEXT_BOUNDARY_TYPE type, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev);
   CORBA_string Accessibility_Text_getTextAfterOffset(Accessibility_Text _obj, const CORBA_long offset, const Accessibility_TEXT_BOUNDARY_TYPE type, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev);
   CORBA_unsigned_long Accessibility_Text_getCharacterAtOffset(Accessibility_Text _obj, const CORBA_long offset, CORBA_Environment * ev);
   CORBA_string Accessibility_Text_getAttributes(Accessibility_Text _obj, const CORBA_long offset, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev);
   CORBA_string Accessibility_Text_getDefaultAttributes(Accessibility_Text _obj, CORBA_Environment * ev);
   void Accessibility_Text_getCharacterExtents(Accessibility_Text _obj, const CORBA_long offset, CORBA_long * x, CORBA_long * y, CORBA_long * width, CORBA_long * height, const CORBA_short coordType, CORBA_Environment * ev);
   CORBA_long Accessibility_Text_getOffsetAtPoint(Accessibility_Text _obj, const CORBA_long x, const CORBA_long y, const CORBA_short coordType, CORBA_Environment * ev);
   CORBA_long Accessibility_Text_getNSelections(Accessibility_Text _obj, CORBA_Environment * ev);
   void Accessibility_Text_getSelection(Accessibility_Text _obj, const CORBA_long selectionNum, CORBA_long * startOffset, CORBA_long * endOffset, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Text_addSelection(Accessibility_Text _obj, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Text_removeSelection(Accessibility_Text _obj, const CORBA_long selectionNum, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Text_setSelection(Accessibility_Text _obj, const CORBA_long selectionNum, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_Environment * ev);
   void Accessibility_Text_getRangeExtents(Accessibility_Text _obj, const CORBA_long startOffset, const CORBA_long endOffset, CORBA_long * x, CORBA_long * y, CORBA_long * width, CORBA_long * height, const CORBA_short coordType, CORBA_Environment * ev);
   Accessibility_Text_RangeList *Accessibility_Text_getBoundedRanges(Accessibility_Text _obj, const CORBA_long x, const CORBA_long y, const CORBA_long width, const CORBA_long height, const CORBA_short coordType, const Accessibility_TEXT_CLIP_TYPE xClipType, const Accessibility_TEXT_CLIP_TYPE yClipType, CORBA_Environment * ev);
   void Accessibility_Text_unImplemented(Accessibility_Text _obj, CORBA_Environment * ev);
   void Accessibility_Text_unImplemented2(Accessibility_Text _obj, CORBA_Environment * ev);
   void Accessibility_Text_unImplemented3(Accessibility_Text _obj, CORBA_Environment * ev);
#define Accessibility_Value_ref Bonobo_Unknown_ref
#define Accessibility_Value_unref Bonobo_Unknown_unref
#define Accessibility_Value_queryInterface Bonobo_Unknown_queryInterface
   CORBA_double Accessibility_Value__get_minimumValue(Accessibility_Value _obj, CORBA_Environment * ev);
   CORBA_double Accessibility_Value__get_maximumValue(Accessibility_Value _obj, CORBA_Environment * ev);
   CORBA_double Accessibility_Value__get_minimumIncrement(Accessibility_Value _obj, CORBA_Environment * ev);
   CORBA_double Accessibility_Value__get_currentValue(Accessibility_Value _obj, CORBA_Environment * ev);
   void Accessibility_Value__set_currentValue(Accessibility_Value _obj, const CORBA_double value, CORBA_Environment * ev);
   void Accessibility_Value_unImplemented(Accessibility_Value _obj, CORBA_Environment * ev);
   void Accessibility_Value_unImplemented2(Accessibility_Value _obj, CORBA_Environment * ev);
   void Accessibility_Value_unImplemented3(Accessibility_Value _obj, CORBA_Environment * ev);
   void Accessibility_Value_unImplemented4(Accessibility_Value _obj, CORBA_Environment * ev);
#define Accessibility_EditableText_ref Bonobo_Unknown_ref
#define Accessibility_EditableText_unref Bonobo_Unknown_unref
#define Accessibility_EditableText_queryInterface Bonobo_Unknown_queryInterface
#define Accessibility_EditableText__get_characterCount Accessibility_Text__get_characterCount
#define Accessibility_EditableText__get_caretOffset Accessibility_Text__get_caretOffset
#define Accessibility_EditableText_getText Accessibility_Text_getText
#define Accessibility_EditableText_setCaretOffset Accessibility_Text_setCaretOffset
#define Accessibility_EditableText_getTextBeforeOffset Accessibility_Text_getTextBeforeOffset
#define Accessibility_EditableText_getTextAtOffset Accessibility_Text_getTextAtOffset
#define Accessibility_EditableText_getTextAfterOffset Accessibility_Text_getTextAfterOffset
#define Accessibility_EditableText_getCharacterAtOffset Accessibility_Text_getCharacterAtOffset
#define Accessibility_EditableText_getAttributes Accessibility_Text_getAttributes
#define Accessibility_EditableText_getDefaultAttributes Accessibility_Text_getDefaultAttributes
#define Accessibility_EditableText_getCharacterExtents Accessibility_Text_getCharacterExtents
#define Accessibility_EditableText_getOffsetAtPoint Accessibility_Text_getOffsetAtPoint
#define Accessibility_EditableText_getNSelections Accessibility_Text_getNSelections
#define Accessibility_EditableText_getSelection Accessibility_Text_getSelection
#define Accessibility_EditableText_addSelection Accessibility_Text_addSelection
#define Accessibility_EditableText_removeSelection Accessibility_Text_removeSelection
#define Accessibility_EditableText_setSelection Accessibility_Text_setSelection
#define Accessibility_EditableText_getRangeExtents Accessibility_Text_getRangeExtents
#define Accessibility_EditableText_getBoundedRanges Accessibility_Text_getBoundedRanges
#define Accessibility_EditableText_unImplemented Accessibility_Text_unImplemented
#define Accessibility_EditableText_unImplemented2 Accessibility_Text_unImplemented2
#define Accessibility_EditableText_unImplemented3 Accessibility_Text_unImplemented3
   CORBA_boolean Accessibility_EditableText_setTextContents(Accessibility_EditableText _obj, const CORBA_char * newContents, CORBA_Environment * ev);
   CORBA_boolean Accessibility_EditableText_insertText(Accessibility_EditableText _obj, const CORBA_long position, const CORBA_char * text, const CORBA_long length, CORBA_Environment * ev);
   CORBA_boolean Accessibility_EditableText_setAttributes(Accessibility_EditableText _obj, const CORBA_char * attributes, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev);
   void Accessibility_EditableText_copyText(Accessibility_EditableText _obj, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev);
   CORBA_boolean Accessibility_EditableText_cutText(Accessibility_EditableText _obj, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev);
   CORBA_boolean Accessibility_EditableText_deleteText(Accessibility_EditableText _obj, const CORBA_long startPos, const CORBA_long endPos, CORBA_Environment * ev);
   CORBA_boolean Accessibility_EditableText_pasteText(Accessibility_EditableText _obj, const CORBA_long position, CORBA_Environment * ev);
   void Accessibility_EditableText_unImplemented5(Accessibility_EditableText _obj, CORBA_Environment * ev);
   void Accessibility_EditableText_unImplemented6(Accessibility_EditableText _obj, CORBA_Environment * ev);
   void Accessibility_EditableText_unImplemented9(Accessibility_EditableText _obj, CORBA_Environment * ev);
   void Accessibility_EditableText_unImplemented10(Accessibility_EditableText _obj, CORBA_Environment * ev);
   void Accessibility_EditableText_unImplemented11(Accessibility_EditableText _obj, CORBA_Environment * ev);
   void Accessibility_EditableText_unImplemented12(Accessibility_EditableText _obj, CORBA_Environment * ev);
#define Accessibility_Hypertext_ref Bonobo_Unknown_ref
#define Accessibility_Hypertext_unref Bonobo_Unknown_unref
#define Accessibility_Hypertext_queryInterface Bonobo_Unknown_queryInterface
   CORBA_long Accessibility_Hypertext_getNLinks(Accessibility_Hypertext _obj, CORBA_Environment * ev);
   Accessibility_Hyperlink Accessibility_Hypertext_getLink(Accessibility_Hypertext _obj, const CORBA_long linkIndex, CORBA_Environment * ev);
   CORBA_long Accessibility_Hypertext_getLinkIndex(Accessibility_Hypertext _obj, const CORBA_long characterIndex, CORBA_Environment * ev);
   void Accessibility_Hypertext_unImplemented(Accessibility_Hypertext _obj, CORBA_Environment * ev);
   void Accessibility_Hypertext_unImplemented2(Accessibility_Hypertext _obj, CORBA_Environment * ev);
   void Accessibility_Hypertext_unImplemented3(Accessibility_Hypertext _obj, CORBA_Environment * ev);
   void Accessibility_Hypertext_unImplemented4(Accessibility_Hypertext _obj, CORBA_Environment * ev);
#define Accessibility_Application_ref Bonobo_Unknown_ref
#define Accessibility_Application_unref Bonobo_Unknown_unref
#define Accessibility_Application_queryInterface Bonobo_Unknown_queryInterface
#define Accessibility_Application__get_name Accessibility_Accessible__get_name
#define Accessibility_Application__set_name Accessibility_Accessible__set_name
#define Accessibility_Application__get_description Accessibility_Accessible__get_description
#define Accessibility_Application__set_description Accessibility_Accessible__set_description
#define Accessibility_Application__get_parent Accessibility_Accessible__get_parent
#define Accessibility_Application__get_childCount Accessibility_Accessible__get_childCount
#define Accessibility_Application_isEqual Accessibility_Accessible_isEqual
#define Accessibility_Application_getChildAtIndex Accessibility_Accessible_getChildAtIndex
#define Accessibility_Application_getIndexInParent Accessibility_Accessible_getIndexInParent
#define Accessibility_Application_getRelationSet Accessibility_Accessible_getRelationSet
#define Accessibility_Application_getRole Accessibility_Accessible_getRole
#define Accessibility_Application_getRoleName Accessibility_Accessible_getRoleName
#define Accessibility_Application_getLocalizedRoleName Accessibility_Accessible_getLocalizedRoleName
#define Accessibility_Application_getState Accessibility_Accessible_getState
#define Accessibility_Application_unImplemented Accessibility_Accessible_unImplemented
#define Accessibility_Application_unImplemented2 Accessibility_Accessible_unImplemented2
#define Accessibility_Application_unImplemented3 Accessibility_Accessible_unImplemented3
   CORBA_string Accessibility_Application__get_toolkitName(Accessibility_Application _obj, CORBA_Environment * ev);
   CORBA_string Accessibility_Application__get_version(Accessibility_Application _obj, CORBA_Environment * ev);
   CORBA_long Accessibility_Application__get_id(Accessibility_Application _obj, CORBA_Environment * ev);
   void Accessibility_Application__set_id(Accessibility_Application _obj, const CORBA_long value, CORBA_Environment * ev);
   void Accessibility_Application_registerToolkitEventListener(Accessibility_Application _obj, const Accessibility_EventListener listener, const CORBA_char * eventName, CORBA_Environment * ev);
   void Accessibility_Application_registerObjectEventListener(Accessibility_Application _obj, const Accessibility_EventListener listener, const CORBA_char * eventName, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Application_pause(Accessibility_Application _obj, CORBA_Environment * ev);
   CORBA_boolean Accessibility_Application_resume(Accessibility_Application _obj, CORBA_Environment * ev);
   CORBA_string Accessibility_Application_getLocale(Accessibility_Application _obj, const Accessibility_LOCALE_TYPE lctype, CORBA_Environment * ev);
   void Accessibility_Application_unImplemented_(Accessibility_Application _obj, CORBA_Environment * ev);
   void Accessibility_Application_unImplemented2_(Accessibility_Application _obj, CORBA_Environment * ev);
   void Accessibility_Application_unImplemented3_(Accessibility_Application _obj, CORBA_Environment * ev);
#define Accessibility_Desktop_ref Bonobo_Unknown_ref
#define Accessibility_Desktop_unref Bonobo_Unknown_unref
#define Accessibility_Desktop_queryInterface Bonobo_Unknown_queryInterface
#define Accessibility_Desktop__get_name Accessibility_Accessible__get_name
#define Accessibility_Desktop__set_name Accessibility_Accessible__set_name
#define Accessibility_Desktop__get_description Accessibility_Accessible__get_description
#define Accessibility_Desktop__set_description Accessibility_Accessible__set_description
#define Accessibility_Desktop__get_parent Accessibility_Accessible__get_parent
#define Accessibility_Desktop__get_childCount Accessibility_Accessible__get_childCount
#define Accessibility_Desktop_isEqual Accessibility_Accessible_isEqual
#define Accessibility_Desktop_getChildAtIndex Accessibility_Accessible_getChildAtIndex
#define Accessibility_Desktop_getIndexInParent Accessibility_Accessible_getIndexInParent
#define Accessibility_Desktop_getRelationSet Accessibility_Accessible_getRelationSet
#define Accessibility_Desktop_getRole Accessibility_Accessible_getRole
#define Accessibility_Desktop_getRoleName Accessibility_Accessible_getRoleName
#define Accessibility_Desktop_getLocalizedRoleName Accessibility_Accessible_getLocalizedRoleName
#define Accessibility_Desktop_getState Accessibility_Accessible_getState
#define Accessibility_Desktop_unImplemented Accessibility_Accessible_unImplemented
#define Accessibility_Desktop_unImplemented2 Accessibility_Accessible_unImplemented2
#define Accessibility_Desktop_unImplemented3 Accessibility_Accessible_unImplemented3
   void Accessibility_Desktop_unImplemented_(Accessibility_Desktop _obj, CORBA_Environment * ev);
   void Accessibility_Desktop_unImplemented2_(Accessibility_Desktop _obj, CORBA_Environment * ev);
   void Accessibility_Desktop_unImplemented3_(Accessibility_Desktop _obj, CORBA_Environment * ev);
   void Accessibility_Desktop_unImplemented4_(Accessibility_Desktop _obj, CORBA_Environment * ev);
#define Accessibility_Registry_ref Bonobo_Unknown_ref
#define Accessibility_Registry_unref Bonobo_Unknown_unref
#define Accessibility_Registry_queryInterface Bonobo_Unknown_queryInterface
#define Accessibility_Registry_notifyEvent Accessibility_EventListener_notifyEvent
#define Accessibility_Registry_unImplemented_ Accessibility_EventListener_unImplemented_
#define Accessibility_Registry_unImplemented2_ Accessibility_EventListener_unImplemented2_
#define Accessibility_Registry_unImplemented3_ Accessibility_EventListener_unImplemented3_
#define Accessibility_Registry_unImplemented4_ Accessibility_EventListener_unImplemented4_
   void Accessibility_Registry_registerApplication(Accessibility_Registry _obj, const Accessibility_Application application, CORBA_Environment * ev);
   void Accessibility_Registry_deregisterApplication(Accessibility_Registry _obj, const Accessibility_Application application, CORBA_Environment * ev);
   void Accessibility_Registry_registerGlobalEventListener(Accessibility_Registry _obj, const Accessibility_EventListener listener, const CORBA_char * eventName, CORBA_Environment * ev);
   void Accessibility_Registry_deregisterGlobalEventListenerAll(Accessibility_Registry _obj, const Accessibility_EventListener listener, CORBA_Environment * ev);
   void Accessibility_Registry_deregisterGlobalEventListener(Accessibility_Registry _obj, const Accessibility_EventListener listener, const CORBA_char * event_name, CORBA_Environment * ev);
   CORBA_short Accessibility_Registry_getDesktopCount(Accessibility_Registry _obj, CORBA_Environment * ev);
   Accessibility_Desktop Accessibility_Registry_getDesktop(Accessibility_Registry _obj, const CORBA_short n, CORBA_Environment * ev);
   Accessibility_DesktopSeq *Accessibility_Registry_getDesktopList(Accessibility_Registry _obj, CORBA_Environment * ev);
   Accessibility_DeviceEventController Accessibility_Registry_getDeviceEventController(Accessibility_Registry _obj, CORBA_Environment * ev);
   void Accessibility_Registry_unImplemented(Accessibility_Registry _obj, CORBA_Environment * ev);
   void Accessibility_Registry_unImplemented2(Accessibility_Registry _obj, CORBA_Environment * ev);
   void Accessibility_Registry_unImplemented3(Accessibility_Registry _obj, CORBA_Environment * ev);
   void Accessibility_Registry_unImplemented4(Accessibility_Registry _obj, CORBA_Environment * ev);
   void Accessibility_Registry_unImplemented5(Accessibility_Registry _obj, CORBA_Environment * ev);
   void Accessibility_Registry_unImplemented6(Accessibility_Registry _obj, CORBA_Environment * ev);
#define Accessibility_DeviceEventListener_ref Bonobo_Unknown_ref
#define Accessibility_DeviceEventListener_unref Bonobo_Unknown_unref
#define Accessibility_DeviceEventListener_queryInterface Bonobo_Unknown_queryInterface
   CORBA_boolean Accessibility_DeviceEventListener_notifyEvent(Accessibility_DeviceEventListener _obj, const Accessibility_DeviceEvent * event, CORBA_Environment * ev);
   void Accessibility_DeviceEventListener_unImplemented__(Accessibility_DeviceEventListener _obj, CORBA_Environment * ev);
   void Accessibility_DeviceEventListener_unImplemented_2_(Accessibility_DeviceEventListener _obj, CORBA_Environment * ev);
   void Accessibility_DeviceEventListener_unImplemented_3_(Accessibility_DeviceEventListener _obj, CORBA_Environment * ev);
   void Accessibility_DeviceEventListener_unImplemented_4_(Accessibility_DeviceEventListener _obj, CORBA_Environment * ev);
   void Accessibility_DeviceEventListener_unImplemented_5_(Accessibility_DeviceEventListener _obj, CORBA_Environment * ev);
   void Accessibility_DeviceEventListener_unImplemented_6_(Accessibility_DeviceEventListener _obj, CORBA_Environment * ev);
#define Accessibility_DeviceEventController_ref Bonobo_Unknown_ref
#define Accessibility_DeviceEventController_unref Bonobo_Unknown_unref
#define Accessibility_DeviceEventController_queryInterface Bonobo_Unknown_queryInterface
   CORBA_boolean Accessibility_DeviceEventController_registerKeystrokeListener(Accessibility_DeviceEventController _obj, const Accessibility_DeviceEventListener listener, const Accessibility_KeySet * keys, const Accessibility_ControllerEventMask mask, const Accessibility_KeyEventTypeSeq * type, const Accessibility_EventListenerMode * mode, CORBA_Environment * ev);
   void Accessibility_DeviceEventController_deregisterKeystrokeListener(Accessibility_DeviceEventController _obj, const Accessibility_DeviceEventListener listener, const Accessibility_KeySet * keys, const Accessibility_ControllerEventMask mask, const Accessibility_KeyEventTypeSeq * type, CORBA_Environment * ev);
   CORBA_boolean Accessibility_DeviceEventController_registerDeviceEventListener(Accessibility_DeviceEventController _obj, const Accessibility_DeviceEventListener listener, const Accessibility_EventTypeSeq * typeseq, CORBA_Environment * ev);
   void Accessibility_DeviceEventController_deregisterDeviceEventListener(Accessibility_DeviceEventController _obj, const Accessibility_DeviceEventListener listener, const Accessibility_EventTypeSeq * typeseq, CORBA_Environment * ev);
   CORBA_boolean Accessibility_DeviceEventController_notifyListenersSync(Accessibility_DeviceEventController _obj, const Accessibility_DeviceEvent * event, CORBA_Environment * ev);
   void Accessibility_DeviceEventController_notifyListenersAsync(Accessibility_DeviceEventController _obj, const Accessibility_DeviceEvent * event, CORBA_Environment * ev);
   void Accessibility_DeviceEventController_generateKeyboardEvent(Accessibility_DeviceEventController _obj, const CORBA_long keycode, const CORBA_char * keystring, const Accessibility_KeySynthType type, CORBA_Environment * ev);
   void Accessibility_DeviceEventController_generateMouseEvent(Accessibility_DeviceEventController _obj, const CORBA_long x, const CORBA_long y, const CORBA_char * eventName, CORBA_Environment * ev);
   void Accessibility_DeviceEventController_unImplemented(Accessibility_DeviceEventController _obj, CORBA_Environment * ev);
   void Accessibility_DeviceEventController_unImplemented2(Accessibility_DeviceEventController _obj, CORBA_Environment * ev);
   void Accessibility_DeviceEventController_unImplemented3(Accessibility_DeviceEventController _obj, CORBA_Environment * ev);
   void Accessibility_DeviceEventController_unImplemented4(Accessibility_DeviceEventController _obj, CORBA_Environment * ev);
#include <orbit/orb-core/orbit-interface.h>
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Relation__iinterface;
#define Accessibility_Relation_IMETHODS_LEN 8
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Relation__imethods[Accessibility_Relation_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_StateSet__iinterface;
#define Accessibility_StateSet_IMETHODS_LEN 11
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_StateSet__imethods[Accessibility_StateSet_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Accessible__iinterface;
#define Accessibility_Accessible_IMETHODS_LEN 17
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Accessible__imethods[Accessibility_Accessible_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Action__iinterface;
#define Accessibility_Action_IMETHODS_LEN 9
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Action__imethods[Accessibility_Action_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_EventListener__iinterface;
#define Accessibility_EventListener_IMETHODS_LEN 5
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_EventListener__imethods[Accessibility_EventListener_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Component__iinterface;
#define Accessibility_Component_IMETHODS_LEN 14
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Component__imethods[Accessibility_Component_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Hyperlink__iinterface;
#define Accessibility_Hyperlink_IMETHODS_LEN 10
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Hyperlink__imethods[Accessibility_Hyperlink_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Image__iinterface;
#define Accessibility_Image_IMETHODS_LEN 8
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Image__imethods[Accessibility_Image_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Selection__iinterface;
#define Accessibility_Selection_IMETHODS_LEN 11
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Selection__imethods[Accessibility_Selection_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Bonobo_Stream__iinterface;
#define Bonobo_Stream_IMETHODS_LEN 10
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Bonobo_Stream__imethods[Bonobo_Stream_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Bonobo_Storage__iinterface;
#define Bonobo_Storage_IMETHODS_LEN 12
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Bonobo_Storage__imethods[Bonobo_Storage_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_StreamableContent__iinterface;
#define Accessibility_StreamableContent_IMETHODS_LEN 6
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_StreamableContent__imethods[Accessibility_StreamableContent_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Table__iinterface;
#define Accessibility_Table_IMETHODS_LEN 33
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Table__imethods[Accessibility_Table_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Text__iinterface;
#define Accessibility_Text_IMETHODS_LEN 22
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Text__imethods[Accessibility_Text_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Value__iinterface;
#define Accessibility_Value_IMETHODS_LEN 9
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Value__imethods[Accessibility_Value_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_EditableText__iinterface;
#define Accessibility_EditableText_IMETHODS_LEN 13
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_EditableText__imethods[Accessibility_EditableText_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Hypertext__iinterface;
#define Accessibility_Hypertext_IMETHODS_LEN 7
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Hypertext__imethods[Accessibility_Hypertext_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Application__iinterface;
#define Accessibility_Application_IMETHODS_LEN 12
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Application__imethods[Accessibility_Application_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Desktop__iinterface;
#define Accessibility_Desktop_IMETHODS_LEN 4
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Desktop__imethods[Accessibility_Desktop_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_Registry__iinterface;
#define Accessibility_Registry_IMETHODS_LEN 15
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_Registry__imethods[Accessibility_Registry_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_DeviceEventListener__iinterface;
#define Accessibility_DeviceEventListener_IMETHODS_LEN 7
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_DeviceEventListener__imethods[Accessibility_DeviceEventListener_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IInterface Accessibility_DeviceEventController__iinterface;
#define Accessibility_DeviceEventController_IMETHODS_LEN 12
#ifdef ORBIT_IDL_C_IMODULE_Accessibility
   static
#else
   extern
#endif
   ORBit_IMethod Accessibility_DeviceEventController__imethods[Accessibility_DeviceEventController_IMETHODS_LEN];
#ifdef __cplusplus
}
#endif				/* __cplusplus */
#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>
#endif				/* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
